// src/app.js

const config = require('./config');
const logger = require('./utils/logger');
const { WebSocketMonitor } = require('./services/monitoring/websocket');
const { PollingMonitor } = require('./services/monitoring/polling');
const { TradingService } = require('./services/trading');
const { NotificationService } = require('./services/notification');
const { DatabaseService } = require('./services/storage/database');
const { APIServer } = require('./services/server');
const { ErrorHandler } = require('./utils/errors');

/**
 * –ì–æ–ª–æ–≤–Ω–∏–π –∫–ª–∞—Å –¥–æ–¥–∞—Ç–∫—É
 */
class BinanceListingBot {
  constructor() {
    this.isRunning = false;
    this.services = {};
    this.monitors = {};
  }

  /**
   * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –≤—Å—ñ—Ö —Å–µ—Ä–≤—ñ—Å—ñ–≤
   */
  async initialize() {
    try {
      logger.info('üöÄ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Binance Listing Bot...');
      logger.info(`üìç –°–µ—Ä–µ–¥–æ–≤–∏—â–µ: ${config.env}`);
      logger.info(`üíµ Quote Asset: ${config.trading.quoteAsset}`);
      logger.info(`üí∞ –†–æ–∑–º—ñ—Ä –æ—Ä–¥–µ—Ä–∞: ${config.trading.baseOrderSize} ${config.trading.quoteAsset}`);

      // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
      logger.info('üóÑÔ∏è –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö...');
      this.services.database = new DatabaseService();
      await this.services.database.connect();

      // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–µ—Ä–≤—ñ—Å—É —Ç–æ—Ä–≥—ñ–≤–ª—ñ
      logger.info('üíπ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–µ—Ä–≤—ñ—Å—É...');
      this.services.trading = new TradingService(this.services.database);
      await this.services.trading.initialize();

      // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–ø–æ–≤—ñ—â–µ–Ω—å
      logger.info('üì¢ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–µ—Ä–≤—ñ—Å—É —Å–ø–æ–≤—ñ—â–µ–Ω—å...');
      this.services.notification = new NotificationService();
      await this.services.notification.initialize();

      // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É
      await this.initializeMonitoring();

      // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è API —Å–µ—Ä–≤–µ—Ä–∞ (—è–∫—â–æ —É–≤—ñ–º–∫–Ω–µ–Ω–æ)
      if (config.server.api.enabled) {
        logger.info('üåê –ó–∞–ø—É—Å–∫ API —Å–µ—Ä–≤–µ—Ä–∞...');
        this.services.apiServer = new APIServer(this);
        await this.services.apiServer.start();
      }

      // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –ø–æ–¥—ñ–π
      this.setupEventHandlers();

      logger.info('‚úÖ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ!');
      
      // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –∑–∞–ø—É—Å–∫
      await this.services.notification.send('bot_started', {
        environment: config.env,
        testnet: config.binance.testnet,
        simulationMode: config.debug.simulationMode
      });

    } catch (error) {
      logger.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó:', error);
      throw error;
    }
  }

  /**
   * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É (WebSocket + Polling)
   */
  async initializeMonitoring() {
    // WebSocket –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ (–æ—Å–Ω–æ–≤–Ω–∏–π)
    if (config.monitoring.useWebSocket) {
      logger.info('üì° –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è WebSocket –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É...');
      this.monitors.websocket = new WebSocketMonitor();
      
      // –û–±—Ä–æ–±–∫–∞ –ø–æ–¥—ñ–π WebSocket
      this.monitors.websocket.on('newListing', this.handleNewListing.bind(this));
      this.monitors.websocket.on('error', this.handleMonitorError.bind(this));
      this.monitors.websocket.on('reconnectFailed', this.handleWebSocketFailure.bind(this));
    }

    // Polling –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ (—Ä–µ–∑–µ—Ä–≤–Ω–∏–π)
    if (config.monitoring.pollingEnabled) {
      logger.info('üîÑ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Polling –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É...');
      this.monitors.polling = new PollingMonitor();
      
      // –û–±—Ä–æ–±–∫–∞ –ø–æ–¥—ñ–π Polling
      this.monitors.polling.on('newListing', this.handleNewListing.bind(this));
      this.monitors.polling.on('error', this.handleMonitorError.bind(this));
    }
  }

  /**
   * –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
   */
  async start() {
    if (this.isRunning) {
      logger.warn('‚ö†Ô∏è –ë–æ—Ç –≤–∂–µ –∑–∞–ø—É—â–µ–Ω–æ');
      return;
    }

    try {
      logger.info('‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...');
      this.isRunning = true;

      // –ó–∞–ø—É—Å–∫–∞—î–º–æ WebSocket –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥
      if (this.monitors.websocket) {
        await this.monitors.websocket.start();
      }

      // –Ø–∫—â–æ WebSocket –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π –∞–±–æ —è–∫ —Ä–µ–∑–µ—Ä–≤ - –∑–∞–ø—É—Å–∫–∞—î–º–æ polling
      if (this.monitors.polling && 
          (!this.monitors.websocket || !config.monitoring.useWebSocket)) {
        await this.monitors.polling.start();
      }

      logger.info('‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!');
      logger.info('üëÄ –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –Ω–æ–≤–∏—Ö –ª—ñ—Å—Ç–∏–Ω–≥—ñ–≤...\n');

    } catch (error) {
      logger.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞:', error);
      this.isRunning = false;
      throw error;
    }
  }

  /**
   * –û–±—Ä–æ–±–∫–∞ –Ω–æ–≤–æ–≥–æ –ª—ñ—Å—Ç–∏–Ω–≥—É
   */
  async handleNewListing(listingData) {
    try {
      logger.info('üéâ –û–±—Ä–æ–±–∫–∞ –Ω–æ–≤–æ–≥–æ –ª—ñ—Å—Ç–∏–Ω–≥—É:', listingData);

      // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ª—ñ—Å—Ç–∏–Ω–≥
      await this.services.database.saveListing(listingData);

      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î —Ñ—ñ–ª—å—Ç—Ä–∞–º
      if (!this.checkListingFilters(listingData)) {
        logger.info(`‚è≠Ô∏è –õ—ñ—Å—Ç–∏–Ω–≥ ${listingData.symbol} –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î —Ñ—ñ–ª—å—Ç—Ä–∞–º`);
        return;
      }

      // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –Ω–æ–≤–∏–π –ª—ñ—Å—Ç–∏–Ω–≥
      await this.services.notification.send('new_listing', listingData);

      // –Ø–∫—â–æ –≤–≤—ñ–º–∫–Ω–µ–Ω–æ —Ä–µ–∂–∏–º —Å–∏–º—É–ª—è—Ü—ñ—ó - –ª–∏—à–µ –ª–æ–≥—É—î–º–æ
      if (config.debug.simulationMode) {
        logger.info(`üìù [–°–ò–ú–£–õ–Ø–¶–Ü–Ø] –ö—É–ø—ñ–≤–ª—è ${listingData.symbol}`);
        return;
      }

      // –í–∏–∫–æ–Ω—É—î–º–æ —Ç–æ—Ä–≥–æ–≤—É –æ–ø–µ—Ä–∞—Ü—ñ—é
      const result = await this.services.trading.executeBuy(listingData);

      if (result.success) {
        logger.info(`‚úÖ –£—Å–ø—ñ—à–Ω–∞ –ø–æ–∫—É–ø–∫–∞ ${listingData.symbol}`);
        
        // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–∫—É–ø–∫—É
        await this.services.notification.send('buy_executed', result);

        // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ TP/SL
        const tpSlResult = await this.services.trading.setTakeProfitStopLoss(result);
        
        if (tpSlResult.success) {
          logger.info(`‚úÖ TP/SL –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è ${listingData.symbol}`);
        }
      } else {
        logger.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ–∫—É–ø–∫–∏ ${listingData.symbol}:`, result.error);
      }

    } catch (error) {
      logger.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –Ω–æ–≤–æ–≥–æ –ª—ñ—Å—Ç–∏–Ω–≥—É:', error);
      await this.services.notification.send('error', {
        type: 'new_listing_processing',
        error: error.message,
        listing: listingData
      });
    }
  }

  /**
   * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç—ñ –ª—ñ—Å—Ç–∏–Ω–≥—É —Ñ—ñ–ª—å—Ç—Ä–∞–º
   */
  checkListingFilters(listingData) {
    const filters = config.trading.filters;

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ–≥–æ –æ–±—Å—è–≥—É
    if (listingData.quoteVolume && listingData.quoteVolume < filters.minVolume24h) {
      logger.debug(`–§—ñ–ª—å—Ç—Ä: –æ–±—Å—è–≥ ${listingData.quoteVolume} < ${filters.minVolume24h}`);
      return false;
    }

    // –Ü–Ω—à—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ —Ç—É—Ç

    return true;
  }

  /**
   * –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–∫–∏ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É
   */
  async handleMonitorError(error) {
    logger.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É:', error);
    
    await this.services.notification.send('error', {
      type: 'monitoring_error',
      error: error.message
    });
  }

  /**
   * –û–±—Ä–æ–±–∫–∞ –≤—ñ–¥–º–æ–≤–∏ WebSocket
   */
  async handleWebSocketFailure() {
    logger.warn('‚ö†Ô∏è WebSocket –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π');

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∞—î–º–æ—Å—å –Ω–∞ polling —è–∫—â–æ –¥–æ—Å—Ç—É–ø–Ω–∏–π
    if (this.monitors.polling && !this.monitors.polling.isRunning) {
      logger.info('üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–Ω—è –Ω–∞ Polling –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥...');
      await this.monitors.polling.start();
    }

    await this.services.notification.send('warning', {
      type: 'websocket_failure',
      message: '–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∏–π –º–µ—Ç–æ–¥ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É'
    });
  }

  /**
   * –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ —Å–∏—Å—Ç–µ–º–Ω–∏—Ö –ø–æ–¥—ñ–π
   */
  setupEventHandlers() {
    // Graceful shutdown
    const shutdownHandler = async (signal) => {
      logger.info(`\nüìç –û—Ç—Ä–∏–º–∞–Ω–æ —Å–∏–≥–Ω–∞–ª ${signal}, –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏...`);
      await this.stop();
      process.exit(0);
    };

    process.on('SIGINT', shutdownHandler);
    process.on('SIGTERM', shutdownHandler);

    // –û–±—Ä–æ–±–∫–∞ –Ω–µ–æ–±—Ä–æ–±–ª–µ–Ω–∏—Ö –ø–æ–º–∏–ª–æ–∫
    process.on('unhandledRejection', (error) => {
      logger.error('‚ùå –ù–µ–æ–±—Ä–æ–±–ª–µ–Ω–∞ –ø–æ–º–∏–ª–∫–∞:', error);
      ErrorHandler.handle(error);
    });

    process.on('uncaughtException', (error) => {
      logger.error('‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞:', error);
      ErrorHandler.handle(error);
      process.exit(1);
    });
  }

  /**
   * –ó—É–ø–∏–Ω–∫–∞ –±–æ—Ç–∞
   */
  async stop() {
    if (!this.isRunning) return;

    try {
      logger.info('‚èπÔ∏è –ó—É–ø–∏–Ω–∫–∞ –±–æ—Ç–∞...');

      // –ó—É–ø–∏–Ω—è—î–º–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥
      if (this.monitors.websocket) {
        await this.monitors.websocket.stop();
      }
      if (this.monitors.polling) {
        await this.monitors.polling.stop();
      }

      // –ó—É–ø–∏–Ω—è—î–º–æ —Ç–æ—Ä–≥–æ–≤–∏–π —Å–µ—Ä–≤—ñ—Å
      if (this.services.trading) {
        await this.services.trading.stop();
      }

      // –ó—É–ø–∏–Ω—è—î–º–æ API —Å–µ—Ä–≤–µ—Ä
      if (this.services.apiServer) {
        await this.services.apiServer.stop();
      }

      // –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ –ë–î
      if (this.services.database) {
        await this.services.database.disconnect();
      }

      // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –∑—É–ø–∏–Ω–∫—É
      if (this.services.notification) {
        await this.services.notification.send('bot_stopped', {
          uptime: process.uptime()
        });
      }

      this.isRunning = false;
      logger.info('‚úÖ –ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ');

    } catch (error) {
      logger.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑—É–ø–∏–Ω—Ü—ñ –±–æ—Ç–∞:', error);
      throw error;
    }
  }

  /**
   * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –±–æ—Ç–∞
   */
  getStatus() {
    return {
      isRunning: this.isRunning,
      uptime: process.uptime(),
      monitors: {
        websocket: this.monitors.websocket?.getStatus() || null,
        polling: this.monitors.polling?.getStatus() || null
      },
      services: {
        trading: this.services.trading?.getStatus() || null,
        database: this.services.database?.getStatus() || null,
        notification: this.services.notification?.getStatus() || null
      },
      config: {
        environment: config.env,
        testnet: config.binance.testnet,
        simulationMode: config.debug.simulationMode
      }
    };
  }
}

// –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É
async function main() {
  const bot = new BinanceListingBot();

  try {
    await bot.initialize();
    await bot.start();
  } catch (error) {
    logger.error('‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞:', error);
    process.exit(1);
  }
}

// –ï–∫—Å–ø–æ—Ä—Ç –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
module.exports = { BinanceListingBot };

// –ó–∞–ø—É—Å–∫ —è–∫—â–æ —Ü–µ –≥–æ–ª–æ–≤–Ω–∏–π —Ñ–∞–π–ª
if (require.main === module) {
  main();
}