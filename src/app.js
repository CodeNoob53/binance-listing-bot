// src/app.js (–æ–Ω–æ–≤–ª–µ–Ω–∏–π)

const config = require('./config');
const logger = require('./utils/logger');
const { WebSocketMonitor } = require('./services/monitoring/websocket');
const { PollingMonitor } = require('./services/monitoring/polling');
const { TradingService } = require('./services/trading');
const { NotificationService } = require('./services/notification');
const { DatabaseService } = require('./services/storage/database');
const { APIServer } = require('./services/server');
const { ErrorHandler } = require('./utils/errors');
const { getBinanceClientFactory } = require('./services/binance/client-factory');

/**
 * –ì–æ–ª–æ–≤–Ω–∏–π –∫–ª–∞—Å –¥–æ–¥–∞—Ç–∫—É –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é –º–Ω–æ–∂–∏–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â
 */
class BinanceListingBot {
  constructor() {
    this.isRunning = false;
    this.services = {};
    this.monitors = {};
    this.clientFactory = null;
    this.currentEnvironment = null;
    this.processedListings = new Set(); // –ö–µ—à –¥–ª—è –æ–±—Ä–æ–±–ª–µ–Ω–∏—Ö –ª—ñ—Å—Ç–∏–Ω–≥—ñ–≤
  }

  /**
   * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –≤—Å—ñ—Ö —Å–µ—Ä–≤—ñ—Å—ñ–≤
   */
  async initialize() {
    try {
      logger.info('üöÄ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Binance Listing Bot...');
      
      // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —Ñ–∞–±—Ä–∏–∫—É –∫–ª—ñ—î–Ω—Ç—ñ–≤
      this.clientFactory = getBinanceClientFactory();
      
      // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤–µ —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ (testnet –∞–±–æ mainnet)
      const initialEnvironment = config.binance.useTestnet ? 'testnet' : 'mainnet';
      await this.clientFactory.switchEnvironment(initialEnvironment);
      
      // –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ—Ç–æ—á–Ω–µ —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ
      this.currentEnvironment = this.clientFactory.environmentManager.getCurrentEnvironment();
      
      // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –±–∞–∑—É –¥–∞–Ω–∏—Ö
      await this.initializeDatabase();
      
      // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —Ç–æ—Ä–≥–æ–≤–∏–π —Å–µ—Ä–≤—ñ—Å
      await this.initializeTradingService();
      
      // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —Å–µ—Ä–≤—ñ—Å —Å–ø–æ–≤—ñ—â–µ–Ω—å
      await this.initializeNotificationService();
      
      // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥
      await this.initializeMonitoring();
      
      logger.info('‚úÖ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ!');
      
    } catch (error) {
      logger.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó:', error);
      throw error;
    }
  }

  /**
   * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
   */
  async initializeDatabase() {
    logger.info('üóÑÔ∏è –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö...');
    this.services.database = new DatabaseService();
    await this.services.database.connect();
  }

  /**
   * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–µ—Ä–≤—ñ—Å—É
   */
  async initializeTradingService() {
    logger.info('üíπ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–µ—Ä–≤—ñ—Å—É...');
    this.services.trading = new TradingService(this.services.database);
    await this.services.trading.initialize();
  }

  /**
   * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–µ—Ä–≤—ñ—Å—É —Å–ø–æ–≤—ñ—â–µ–Ω—å
   */
  async initializeNotificationService() {
    logger.info('üì¢ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–µ—Ä–≤—ñ—Å—É —Å–ø–æ–≤—ñ—â–µ–Ω—å...');
    this.services.notification = new NotificationService();
    await this.services.notification.initialize();
  }

  /**
   * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É (WebSocket –∞–±–æ Polling)
   */
  async initializeMonitoring() {
    // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ WebSocket —è–∫—â–æ –≤—ñ–Ω —É–≤—ñ–º–∫–Ω–µ–Ω–∏–π
    if (config.monitoring.useWebSocket && process.env.USE_WEBSOCKET === 'true') {
      logger.info('üì° –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è WebSocket –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É...');
      this.monitors.websocket = new WebSocketMonitor();
      
      // –û–±—Ä–æ–±–∫–∞ –ø–æ–¥—ñ–π WebSocket
      this.monitors.websocket.on('newListing', this.handleNewListing.bind(this));
      this.monitors.websocket.on('error', this.handleMonitorError.bind(this));
      this.monitors.websocket.on('reconnectFailed', this.handleWebSocketFailure.bind(this));
    } 
    // –Ü–Ω–∞–∫—à–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ Polling
    else if (config.monitoring.pollingEnabled && process.env.USE_POLLING === 'true') {
      logger.info('üîÑ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Polling –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É...');
      this.monitors.polling = new PollingMonitor();
      
      // –û–±—Ä–æ–±–∫–∞ –ø–æ–¥—ñ–π Polling
      this.monitors.polling.on('newListing', this.handleNewListing.bind(this));
      this.monitors.polling.on('error', this.handleMonitorError.bind(this));
    } else {
      logger.warn('‚ö†Ô∏è –ñ–æ–¥–µ–Ω –º–µ—Ç–æ–¥ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –Ω–µ —É–≤—ñ–º–∫–Ω–µ–Ω–æ. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è USE_WEBSOCKET —Ç–∞ USE_POLLING');
    }
  }

  /**
   * –í–∏–≤–µ–¥–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –±–æ—Ç–∞
   */
  logBotStatus() {
    const status = {
      environment: this.currentEnvironment.displayName,
      isRunning: this.isRunning,
      activePositions: this.services.trading?.activePositions?.size || 0,
      processedListings: this.processedListings.size,
      lastCheckTime: this.monitors.polling?.lastCheckTime ? new Date(this.monitors.polling.lastCheckTime).toLocaleTimeString() : 'N/A',
      monitoringMode: this.monitors.websocket ? 'WebSocket' : 'Polling',
      simulationMode: config.debug.simulationMode ? 'Enabled' : 'Disabled'
    };

    logger.info('ü§ñ –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:', status);
  }

  /**
   * –ó–∞–ø—É—Å–∫ –ø–µ—Ä—ñ–æ–¥–∏—á–Ω–æ–≥–æ –≤–∏–≤–µ–¥–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É
   */
  startStatusUpdates() {
    setInterval(() => {
      if (this.isRunning) {
        this.logBotStatus();
      }
    }, 30000); // –ö–æ–∂–Ω—ñ 30 —Å–µ–∫—É–Ω–¥
  }

  /**
   * –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
   */
  async start() {
    if (this.isRunning) {
      logger.warn('‚ö†Ô∏è –ë–æ—Ç –≤–∂–µ –∑–∞–ø—É—â–µ–Ω–æ');
      return;
    }

    try {
      logger.info('‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...');
      this.isRunning = true;

      // –ó–∞–ø—É—Å–∫–∞—î–º–æ –ø–µ—Ä—ñ–æ–¥–∏—á–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É
      this.startStatusUpdates();

      // –ó–∞–ø—É—Å–∫–∞—î–º–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥
      if (this.monitors.websocket) {
        logger.info('üîå –ó–∞–ø—É—Å–∫ WebSocket –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É...');
        await this.monitors.websocket.start();
      } else if (this.monitors.polling) {
        logger.info('üîÑ –ó–∞–ø—É—Å–∫ Polling –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É...');
        await this.monitors.polling.start();
      }

      // –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ç–æ—Ä–≥–æ–≤–∏–π —Å–µ—Ä–≤—ñ—Å
      if (this.services.trading) {
        await this.services.trading.start();
      }

      logger.info('‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!');
      this.logBotStatus();

    } catch (error) {
      logger.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞:', error);
      this.isRunning = false;
      throw error;
    }
  }

  /**
   * –ü–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ –ø—ñ–¥ —á–∞—Å —Ä–æ–±–æ—Ç–∏
   */
  async switchEnvironment(environmentName) {
    try {
      logger.info(`üîÑ –ü–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è –±–æ—Ç–∞ –Ω–∞ —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ ${environmentName}...`);
      
      const wasRunning = this.isRunning;
      
      // –¢–∏–º—á–∞—Å–æ–≤–æ –∑—É–ø–∏–Ω—è—î–º–æ –±–æ—Ç–∞
      if (this.isRunning) {
        await this.pause();
      }
      
      // –ü–µ—Ä–µ–º–∏–∫–∞—î–º–æ —Ç–æ—Ä–≥–æ–≤–∏–π —Å–µ—Ä–≤—ñ—Å
      await this.services.trading.switchEnvironment(environmentName);
      
      // –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ—Ç–æ—á–Ω–µ —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ
      this.currentEnvironment = this.clientFactory.environmentManager.getCurrentEnvironment();
      
      // –õ–æ–≥—É—î–º–æ –Ω–æ–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ
      this.logEnvironmentInfo();
      
      // –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ —Ä–æ–±–æ—Ç—É —è–∫—â–æ –±—É–ª–æ –∑–∞–ø—É—â–µ–Ω–æ
      if (wasRunning) {
        await this.resume();
      }
      
      // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
      await this.services.notification.send('environment_switched', {
        newEnvironment: this.currentEnvironment.name,
        displayName: this.currentEnvironment.displayName,
        features: this.currentEnvironment.features
      });
      
      logger.info(`‚úÖ –ë–æ—Ç —É—Å–ø—ñ—à–Ω–æ –ø–µ—Ä–µ–º–∫–Ω—É—Ç–æ –Ω–∞ ${this.currentEnvironment.displayName}`);
      
    } catch (error) {
      logger.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è –Ω–∞ ${environmentName}:`, error);
      throw error;
    }
  }

  /**
   * –ü–∞—É–∑–∞ –±–æ—Ç–∞
   */
  async pause() {
    logger.info('‚è∏Ô∏è –ü–∞—É–∑–∞ –±–æ—Ç–∞...');
    this.isRunning = false;
    
    // –ó—É–ø–∏–Ω—è—î–º–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥
    if (this.monitors.websocket) {
      await this.monitors.websocket.stop();
    }
    if (this.monitors.polling) {
      await this.monitors.polling.stop();
    }
    
    // –ü—Ä–∏–∑—É–ø–∏–Ω—è—î–º–æ —Ç–æ—Ä–≥–æ–≤–∏–π —Å–µ—Ä–≤—ñ—Å
    if (this.services.trading) {
      await this.services.trading.pause();
    }
  }

  /**
   * –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏ –±–æ—Ç–∞
   */
  async resume() {
    logger.info('‚ñ∂Ô∏è –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏ –±–æ—Ç–∞...');
    this.isRunning = true;
    
    // –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ —Ç–æ—Ä–≥–æ–≤–∏–π —Å–µ—Ä–≤—ñ—Å
    if (this.services.trading) {
      await this.services.trading.resume();
    }
    
    // –ó–∞–ø—É—Å–∫–∞—î–º–æ WebSocket –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ —è–∫—â–æ –≤—ñ–Ω —É–≤—ñ–º–∫–Ω–µ–Ω–æ
    if (config.monitoring.useWebSocket && process.env.USE_WEBSOCKET === 'true' && this.monitors.websocket) {
      await this.monitors.websocket.start();
    } 
    // –Ü–Ω–∞–∫—à–µ –∑–∞–ø—É—Å–∫–∞—î–º–æ polling —è–∫ —Ä–µ–∑–µ—Ä–≤–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç
    else if (config.monitoring.pollingEnabled && this.monitors.polling) {
      await this.monitors.polling.start();
    }
  }

  /**
   * –û–±—Ä–æ–±–∫–∞ –Ω–æ–≤–æ–≥–æ –ª—ñ—Å—Ç–∏–Ω–≥—É –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
   */
  async handleNewListing(listingData) {
    try {
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≤–∂–µ –æ–±—Ä–æ–±–ª—è–ª–∏ —Ü–µ–π –ª—ñ—Å—Ç–∏–Ω–≥
      const listingKey = `${listingData.symbol}_${listingData.detectedAt || new Date().toISOString()}`;
      if (this.processedListings.has(listingKey)) {
        logger.debug(`‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –ø–æ–≤—Ç–æ—Ä–Ω–∏–π –ª—ñ—Å—Ç–∏–Ω–≥ ${listingData.symbol} (–≤–∂–µ –æ–±—Ä–æ–±–ª–µ–Ω–æ)`);
        return;
      }

      // –î–æ–¥–∞—î–º–æ –≤ –∫–µ—à –æ–±—Ä–æ–±–ª–µ–Ω–∏—Ö
      this.processedListings.add(listingKey);
      
      // –û—á–∏—â–∞—î–º–æ —Å—Ç–∞—Ä–∏–π –∫–µ—à –∫–æ–∂–Ω—ñ 1000 –∑–∞–ø–∏—Å—ñ–≤
      if (this.processedListings.size > 1000) {
        logger.debug(`üßπ –û—á–∏—â–µ–Ω–Ω—è –∫–µ—à—É –æ–±—Ä–æ–±–ª–µ–Ω–∏—Ö –ª—ñ—Å—Ç–∏–Ω–≥—ñ–≤ (—Ä–æ–∑–º—ñ—Ä: ${this.processedListings.size})`);
        this.processedListings.clear();
      }

      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≤–∂–µ —î –∞–∫—Ç–∏–≤–Ω–∞ –ø–æ–∑–∏—Ü—ñ—è –¥–ª—è —Ü—å–æ–≥–æ —Å–∏–º–≤–æ–ª—É
      const existingPosition = await this.services.database.getPositionBySymbol(listingData.symbol);
      if (existingPosition) {
        logger.info(`‚ÑπÔ∏è –°–∏–º–≤–æ–ª ${listingData.symbol} –≤–∂–µ –º–∞—î –∞–∫—Ç–∏–≤–Ω—É –ø–æ–∑–∏—Ü—ñ—é (—Å—Ç–∞—Ç—É—Å: ${existingPosition.status})`);
        return;
      }

      logger.info(`üéâ –û–±—Ä–æ–±–∫–∞ –Ω–æ–≤–æ–≥–æ –ª—ñ—Å—Ç–∏–Ω–≥—É –≤ ${this.currentEnvironment.displayName}:`, listingData);

      // –î–æ–¥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ –¥–æ –¥–∞–Ω–∏—Ö –ª—ñ—Å—Ç–∏–Ω–≥—É
      const enrichedListingData = {
        ...listingData,
        environment: this.currentEnvironment.name,
        detectedAt: new Date().toISOString(),
        timestamp: new Date().toISOString()
      };

      // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ª—ñ—Å—Ç–∏–Ω–≥
      const savedListing = await this.services.database.saveListing(enrichedListingData);
      
      // –Ø–∫—â–æ –ª—ñ—Å—Ç–∏–Ω–≥ –≤–∂–µ —ñ—Å–Ω—É—î, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ –æ–±—Ä–æ–±–∫—É
      if (!savedListing) {
        logger.debug(`‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –ª—ñ—Å—Ç–∏–Ω–≥ ${listingData.symbol} (–≤–∂–µ —ñ—Å–Ω—É—î –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö)`);
        return;
      }

      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î —Ñ—ñ–ª—å—Ç—Ä–∞–º
      if (!this.checkListingFilters(enrichedListingData)) {
        logger.info(`‚è≠Ô∏è –õ—ñ—Å—Ç–∏–Ω–≥ ${listingData.symbol} –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î —Ñ—ñ–ª—å—Ç—Ä–∞–º`);
        return;
      }

      // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –Ω–æ–≤–∏–π –ª—ñ—Å—Ç–∏–Ω–≥
      await this.services.notification.send('new_listing', {
        ...enrichedListingData,
        environment: this.currentEnvironment.displayName
      });

      // –°–ø–µ—Ü—ñ–∞–ª—å–Ω–∞ –ª–æ–≥—ñ–∫–∞ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â
      if (this.currentEnvironment.name === 'testnet') {
        await this.handleTestnetListing(enrichedListingData);
      } else if (this.currentEnvironment.name === 'mainnet') {
        await this.handleMainnetListing(enrichedListingData);
      }

      // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –ø—ñ—Å–ª—è –æ–±—Ä–æ–±–∫–∏ –ª—ñ—Å—Ç–∏–Ω–≥—É
      this.logBotStatus();

    } catch (error) {
      logger.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –Ω–æ–≤–æ–≥–æ –ª—ñ—Å—Ç–∏–Ω–≥—É:', error);
      await this.services.notification.send('error', {
        type: 'new_listing_processing',
        environment: this.currentEnvironment?.name || 'unknown',
        error: error.message,
        listing: listingData
      });
    }
  }

  /**
   * –û–±—Ä–æ–±–∫–∞ –ª—ñ—Å—Ç–∏–Ω–≥—É –≤ testnet —Å–µ—Ä–µ–¥–æ–≤–∏—â—ñ
   */
  async handleTestnetListing(listingData) {
    logger.info(`üß™ –û–±—Ä–æ–±–∫–∞ testnet –ª—ñ—Å—Ç–∏–Ω–≥—É ${listingData.symbol}`);
    
    // –ù–∞ testnet –º–æ–∂–µ–º–æ –±—É—Ç–∏ –±—ñ–ª—å—à –∞–≥—Ä–µ—Å–∏–≤–Ω–∏–º–∏ –≤ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—ñ
    if (config.debug.simulationMode) {
      logger.info(`üìù [TESTNET SIMULATION] –ö—É–ø—ñ–≤–ª—è ${listingData.symbol}`);
      return;
    }

    // –í–∏–∫–æ–Ω—É—î–º–æ —Ç–æ—Ä–≥–æ–≤—É –æ–ø–µ—Ä–∞—Ü—ñ—é
    const result = await this.services.trading.executeBuy(listingData);

    if (result.success) {
      logger.info(`‚úÖ Testnet –ø–æ–∫—É–ø–∫–∞ ${listingData.symbol} —É—Å–ø—ñ—à–Ω–∞`);
      
      // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–∫—É–ø–∫—É
      await this.services.notification.send('buy_executed', {
        ...result,
        environment: 'Testnet'
      });

      // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ TP/SL
      const tpSlResult = await this.services.trading.setTakeProfitStopLoss(result);
      
      if (tpSlResult.success) {
        logger.info(`‚úÖ TP/SL –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è ${listingData.symbol} –≤ testnet`);
      }
    } else {
      logger.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ testnet –ø–æ–∫—É–ø–∫–∏ ${listingData.symbol}:`, result.error);
    }
  }

  /**
   * –û–±—Ä–æ–±–∫–∞ –ª—ñ—Å—Ç–∏–Ω–≥—É –≤ mainnet —Å–µ—Ä–µ–¥–æ–≤–∏—â—ñ
   */
  async handleMainnetListing(listingData) {
    logger.warn(`üí∞ –û–±—Ä–æ–±–∫–∞ MAINNET –ª—ñ—Å—Ç–∏–Ω–≥—É ${listingData.symbol} - –†–ï–ê–õ–¨–ù–Ü –ì–†–û–®–Ü!`);
    
    // –î–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –±–µ–∑–ø–µ–∫–∏ –¥–ª—è mainnet
    const safetyChecks = await this.performMainnetSafetyChecks(listingData);
    
    if (!safetyChecks.passed) {
      logger.warn(`‚ö†Ô∏è Mainnet –ª—ñ—Å—Ç–∏–Ω–≥ ${listingData.symbol} –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ —Å–∏—Å—Ç–µ–º–æ—é –±–µ–∑–ø–µ–∫–∏:`, safetyChecks.reasons);
      return;
    }

    // –Ø–∫—â–æ –≤–≤—ñ–º–∫–Ω–µ–Ω–æ —Ä–µ–∂–∏–º —Å–∏–º—É–ª—è—Ü—ñ—ó –Ω–∞–≤—ñ—Ç—å –Ω–∞ mainnet
    if (config.debug.simulationMode) {
      logger.warn(`üìù [MAINNET SIMULATION] –ö—É–ø—ñ–≤–ª—è ${listingData.symbol} - —Å–∏–º—É–ª—è—Ü—ñ—è –Ω–∞ mainnet`);
      return;
    }

    // –í–∏–∫–æ–Ω—É—î–º–æ —Ç–æ—Ä–≥–æ–≤—É –æ–ø–µ—Ä–∞—Ü—ñ—é –∑ –ø—ñ–¥–≤–∏—â–µ–Ω–∏–º —Ä—ñ–≤–Ω–µ–º –æ–±–µ—Ä–µ–∂–Ω–æ—Å—Ç—ñ
    const result = await this.services.trading.executeBuy(listingData);

    if (result.success) {
      logger.info(`‚úÖ MAINNET –ø–æ–∫—É–ø–∫–∞ ${listingData.symbol} —É—Å–ø—ñ—à–Ω–∞ - –†–ï–ê–õ–¨–ù–Ü –ö–û–®–¢–ò –í–ò–ö–û–†–ò–°–¢–ê–ù–û!`);
      
      // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–∫—É–ø–∫—É
      await this.services.notification.send('buy_executed', {
        ...result,
        environment: 'Mainnet (PRODUCTION)',
        warning: '–†–µ–∞–ª—å–Ω—ñ –∫–æ—à—Ç–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ!'
      });

      // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ TP/SL
      const tpSlResult = await this.services.trading.setTakeProfitStopLoss(result);
      
      if (tpSlResult.success) {
        logger.info(`‚úÖ TP/SL –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è ${listingData.symbol} –≤ mainnet`);
      }
    } else {
      logger.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ MAINNET –ø–æ–∫—É–ø–∫–∏ ${listingData.symbol}:`, result.error);
    }
  }

  /**
   * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∏ –±–µ–∑–ø–µ–∫–∏ –¥–ª—è mainnet
   */
  async performMainnetSafetyChecks(listingData) {
    const checks = {
      passed: true,
      reasons: []
    };

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∞—Å—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –Ω–µ —Ç–æ—Ä–≥—É—î–º–æ –≤–Ω–æ—á—ñ)
    const hour = new Date().getHours();
    if (config.isProduction && (hour < 6 || hour > 22)) {
      checks.passed = false;
      checks.reasons.push('–¢–æ—Ä–≥—ñ–≤–ª—è –ø–æ–∑–∞ —Ä–æ–±–æ—á–∏–º–∏ –≥–æ–¥–∏–Ω–∞–º–∏');
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ–±—Å—è–≥—É
    if (listingData.quoteVolume < config.trading.filters.minVolume24h * 3) {
      checks.passed = false;
      checks.reasons.push('–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—ñ–π –æ–±—Å—è–≥ –¥–ª—è mainnet');
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –≤–∏—Ö—ñ–¥–Ω—ñ (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
    const isWeekend = [0, 6].includes(new Date().getDay());
    if (config.isProduction && isWeekend) {
      checks.passed = false;
      checks.reasons.push('–¢–æ—Ä–≥—ñ–≤–ª—è —É –≤–∏—Ö—ñ–¥–Ω—ñ –¥–Ω—ñ –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–∞');
    }

    return checks;
  }

  /**
   * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç—ñ –ª—ñ—Å—Ç–∏–Ω–≥—É —Ñ—ñ–ª—å—Ç—Ä–∞–º
   */
  checkListingFilters(listingData) {
    const filters = config.trading.filters;

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ–≥–æ –æ–±—Å—è–≥—É
    if (listingData.quoteVolume && listingData.quoteVolume < filters.minVolume24h) {
      logger.debug(`–§—ñ–ª—å—Ç—Ä: –æ–±—Å—è–≥ ${listingData.quoteVolume} < ${filters.minVolume24h}`);
      return false;
    }

    // –î–æ–¥–∞—Ç–∫–æ–≤—ñ —Ñ—ñ–ª—å—Ç—Ä–∏ –¥–ª—è mainnet
    if (this.currentEnvironment.name === 'mainnet') {
      // –ë—ñ–ª—å—à —Å—Ç—Ä–æ–≥—ñ —Ñ—ñ–ª—å—Ç—Ä–∏ –¥–ª—è —Ä–µ–∞–ª—å–Ω–∏—Ö –≥—Ä–æ—à–µ–π
      if (listingData.quoteVolume && listingData.quoteVolume < filters.minVolume24h * 2) {
        logger.debug(`Mainnet —Ñ—ñ–ª—å—Ç—Ä: –æ–±—Å—è–≥ ${listingData.quoteVolume} < ${filters.minVolume24h * 2} (–ø–æ–¥–≤—ñ–π–Ω–∏–π –º—ñ–Ω—ñ–º—É–º)`);
        return false;
      }
    }

    return true;
  }

  /**
   * –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–∫–∏ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É
   */
  async handleMonitorError(error) {
    logger.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É:', error);
    
    // –ë–µ–∑–ø–µ—á–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–∫–∏, —è–∫—â–æ —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
    const environmentName = this.currentEnvironment?.name || 'unknown';
    
    await this.services.notification.send('error', {
      type: 'monitoring_error',
      environment: environmentName,
      error: error.message
    });
  }

  /**
   * –û–±—Ä–æ–±–∫–∞ –≤—ñ–¥–º–æ–≤–∏ WebSocket
   */
  async handleWebSocketFailure() {
    logger.warn('‚ö†Ô∏è WebSocket –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π');

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∞—î–º–æ—Å—å –Ω–∞ polling —è–∫—â–æ –¥–æ—Å—Ç—É–ø–Ω–∏–π
    if (this.monitors.polling && !this.monitors.polling.isRunning) {
      logger.info('üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–Ω—è –Ω–∞ Polling –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥...');
      await this.monitors.polling.start();
    }

    await this.services.notification.send('warning', {
      type: 'websocket_failure',
      environment: this.currentEnvironment.name,
      message: '–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∏–π –º–µ—Ç–æ–¥ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É'
    });
  }

  /**
   * –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ —Å–∏—Å—Ç–µ–º–Ω–∏—Ö –ø–æ–¥—ñ–π
   */
  setupEventHandlers() {
    // Graceful shutdown
    const shutdownHandler = async (signal) => {
      logger.info(`\nüìç –û—Ç—Ä–∏–º–∞–Ω–æ —Å–∏–≥–Ω–∞–ª ${signal}, –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏...`);
      await this.stop();
      process.exit(0);
    };

    process.on('SIGINT', shutdownHandler);
    process.on('SIGTERM', shutdownHandler);

    // –û–±—Ä–æ–±–∫–∞ –Ω–µ–æ–±—Ä–æ–±–ª–µ–Ω–∏—Ö –ø–æ–º–∏–ª–æ–∫
    process.on('unhandledRejection', (error) => {
      logger.error('‚ùå –ù–µ–æ–±—Ä–æ–±–ª–µ–Ω–∞ –ø–æ–º–∏–ª–∫–∞:', error);
      ErrorHandler.handle(error);
    });

    process.on('uncaughtException', (error) => {
      logger.error('‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞:', error);
      ErrorHandler.handle(error);
      process.exit(1);
    });

    // –û–±—Ä–æ–±–Ω–∏–∫ –∑–º—ñ–Ω–∏ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
    if (this.services.trading) {
      this.services.trading.on('environmentChanged', (data) => {
        logger.info(`üîÑ –¢–æ—Ä–≥–æ–≤–∏–π —Å–µ—Ä–≤—ñ—Å –ø–µ—Ä–µ–º–∫–Ω—É—Ç–æ –Ω–∞ ${data.environment}`);
        this.currentEnvironment = this.clientFactory.environmentManager.getCurrentEnvironment();
      });
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø–æ–≤–Ω–æ–≥–æ –∑–≤—ñ—Ç—É –ø—Ä–æ —Å—Ç–∞–Ω –±–æ—Ç–∞
   */
  generateBotReport() {
    const tradingReport = this.services.trading?.generateEnvironmentReport();
    const clientStats = this.clientFactory?.getClientStatistics();
    
    return {
      timestamp: new Date().toISOString(),
      version: '3.0.0',
      environment: {
        current: this.currentEnvironment,
        factory: this.clientFactory?.exportConfiguration()
      },
      status: {
        isRunning: this.isRunning,
        uptime: process.uptime(),
        monitors: {
          websocket: this.monitors.websocket?.getStatus() || null,
          polling: this.monitors.polling?.getStatus() || null
        }
      },
      services: {
        trading: tradingReport,
        database: this.services.database?.getStatus() || null,
        notification: this.services.notification?.getStatus() || null
      },
      configuration: {
        simulationMode: config.debug.simulationMode,
        maxPositions: config.trading.maxPositions,
        baseOrderSize: config.trading.baseOrderSize,
        filters: config.trading.filters
      },
      clientStatistics: clientStats
    };
  }

  /**
   * –ó—É–ø–∏–Ω–∫–∞ –±–æ—Ç–∞
   */
  async stop() {
    if (!this.isRunning) return;

    try {
      logger.info('‚èπÔ∏è –ó—É–ø–∏–Ω–∫–∞ –±–æ—Ç–∞...');

      // –ó—É–ø–∏–Ω—è—î–º–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥
      if (this.monitors.websocket) {
        await this.monitors.websocket.stop();
      }
      if (this.monitors.polling) {
        await this.monitors.polling.stop();
      }

      // –ó—É–ø–∏–Ω—è—î–º–æ —Ç–æ—Ä–≥–æ–≤–∏–π —Å–µ—Ä–≤—ñ—Å
      if (this.services.trading) {
        await this.services.trading.stop();
      }

      // –ó—É–ø–∏–Ω—è—î–º–æ API —Å–µ—Ä–≤–µ—Ä
      if (this.services.apiServer) {
        await this.services.apiServer.stop();
      }

      // –ë–µ–∑–ø–µ—á–Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ñ–∞–±—Ä–∏–∫–∏ –∫–ª—ñ—î–Ω—Ç—ñ–≤
      if (this.clientFactory) {
        await this.clientFactory.shutdown();
      }

      // –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ –ë–î
      if (this.services.database) {
        await this.services.database.disconnect();
      }

      // –ì–µ–Ω–µ—Ä—É—î–º–æ —Ñ—ñ–Ω–∞–ª—å–Ω–∏–π –∑–≤—ñ—Ç
      const finalReport = this.generateBotReport();
      logger.info('üìä –§—ñ–Ω–∞–ª—å–Ω–∏–π –∑–≤—ñ—Ç –±–æ—Ç–∞:', finalReport);

      // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –∑—É–ø–∏–Ω–∫—É
      if (this.services.notification) {
        await this.services.notification.send('bot_stopped', {
          uptime: process.uptime(),
          environment: this.currentEnvironment?.name || 'unknown',
          finalReport
        });
      }

      this.isRunning = false;
      logger.info('‚úÖ –ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ');

    } catch (error) {
      logger.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑—É–ø–∏–Ω—Ü—ñ –±–æ—Ç–∞:', error);
      throw error;
    }
  }

  /**
   * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –±–æ—Ç–∞
   */
  getStatus() {
    return this.generateBotReport();
  }

  /**
   * –õ–æ–≥—É–≤–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ
   */
  logEnvironmentInfo() {
    const envInfo = [
      'üåç ======================== –Ü–ù–§–û–†–ú–ê–¶–Ü–Ø –ü–†–û –°–ï–†–ï–î–û–í–ò–©–ï ======================== üåç',
      `üè∑Ô∏è  –ù–∞–∑–≤–∞: ${this.currentEnvironment.displayName}`,
      `üîß –í–Ω—É—Ç—Ä—ñ—à–Ω—è –Ω–∞–∑–≤–∞: ${this.currentEnvironment.name}`,
      `üåê REST API: ${this.currentEnvironment.config.baseURL}`,
      `üì° WebSocket: ${this.currentEnvironment.config.wsBaseURL}`,
      `üí∞ –†–µ–∞–ª—å–Ω—ñ –≥—Ä–æ—à—ñ: ${this.currentEnvironment.features.realTrading ? '–¢–ê–ö' : '–ù–Ü'}`,
      `üß™ –¢–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ: ${this.currentEnvironment.features.virtualMoney ? '–¢–ê–ö' : '–ù–Ü'}`,
      `üìä API –∫–ª—é—á—ñ: ${this.currentEnvironment.hasApiKeys ? '–ù–∞–ª–∞—à—Ç–æ–≤–∞–Ω—ñ' : '–í—ñ–¥—Å—É—Ç–Ω—ñ'}`,
      `üéöÔ∏è  –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å –æ—Ä–¥–µ—Ä–∞: $${this.currentEnvironment.features.orderLimits.maxOrderValue.toLocaleString()}`,
      `üìà –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–∑–∏—Ü—ñ–π: ${this.currentEnvironment.features.orderLimits.maxPositions}`,
      `üíµ Quote Asset: ${config.trading.quoteAsset}`,
      `üí∞ –†–æ–∑–º—ñ—Ä –æ—Ä–¥–µ—Ä–∞: ${config.trading.baseOrderSize} ${config.trading.quoteAsset}`,
      `üéØ Take Profit: ${(config.trading.defaultTP * 100).toFixed(1)}%`,
      `üõë Stop Loss: ${(config.trading.defaultSL * 100).toFixed(1)}%`,
      'üåç ========================================================================== üåç'
    ];
    
    envInfo.forEach(line => logger.info(line));
    
    // –î–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è
    if (this.currentEnvironment.features.realTrading && !config.debug.simulationMode) {
      logger.warn('‚ö†Ô∏è –£–í–ê–ì–ê: –¢–æ—Ä–≥—ñ–≤–ª—è —Ä–µ–∞–ª—å–Ω–∏–º–∏ –∫–æ—à—Ç–∞–º–∏ —É–≤—ñ–º–∫–Ω–µ–Ω–∞!');
    }
    
    if (config.debug.simulationMode) {
      logger.info('üß™ –†–µ–∂–∏–º —Å–∏–º—É–ª—è—Ü—ñ—ó —É–≤—ñ–º–∫–Ω–µ–Ω–æ - –æ—Ä–¥–µ—Ä–∏ –Ω–µ –±—É–¥—É—Ç—å —Ä–µ–∞–ª—å–Ω–∏–º–∏');
    }
    
    // –ü–æ–∫–∞–∑—É—î–º–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó
    const recommendations = this.clientFactory.environmentManager.getSetupRecommendations();
    if (recommendations.length > 0) {
      logger.info('üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó:');
      recommendations.forEach(rec => {
        const icon = rec.type === 'warning' ? '‚ö†Ô∏è' : rec.type === 'security' ? 'üîí' : '‚ÑπÔ∏è';
        logger.info(`  ${icon} ${rec.message}`);
        if (rec.action) {
          logger.info(`    ‚Üí ${rec.action}`);
        }
      });
    }
  }
}

// –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É
async function main() {
  const bot = new BinanceListingBot();

  try {
    await bot.initialize();
    await bot.start();
  } catch (error) {
    logger.error('‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞:', error);
    process.exit(1);
  }
}

// –ï–∫—Å–ø–æ—Ä—Ç –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
module.exports = { BinanceListingBot };

// –ó–∞–ø—É—Å–∫ —è–∫—â–æ —Ü–µ –≥–æ–ª–æ–≤–Ω–∏–π —Ñ–∞–π–ª
if (require.main === module) {
  main();
}