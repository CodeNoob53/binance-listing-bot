// src/services/server/index.js

const express = require('express');
const http = require('http');
const cors = require('cors');
const helmet = require('helmet');
const compression = require('compression');
const rateLimit = require('express-rate-limit');
const WebSocket = require('ws');
const config = require('../../config');
const logger = require('../../utils/logger');
const { ErrorHandler } = require('../../utils/errors');

/**
 * API –°–µ—Ä–≤–µ—Ä –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É —Ç–∞ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –±–æ—Ç–æ–º
 */
class APIServer {
  constructor(bot) {
    this.app = express();
    this.server = null;
    this.wss = null;
    this.bot = bot;
    this.connectedClients = new Set();
    this.port = config.server.port;
    this.host = config.server.host;
  }

  /**
   * –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
   */
  async start() {
    try {
      // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Express
      this.setupExpress();
      
      // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –º–∞—Ä—à—Ä—É—Ç—ñ–≤
      this.setupRoutes();
      
      // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è HTTP —Å–µ—Ä–≤–µ—Ä–∞
      this.server = http.createServer(this.app);
      
      // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è WebSocket —Å–µ—Ä–≤–µ—Ä–∞
      if (config.server.ws.enabled) {
        this.setupWebSocket();
      }
      
      // –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
      await this.startServer();
      
      logger.info(`üåê API —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ http://${this.host}:${this.port}`);
      
      if (config.server.ws.enabled) {
        logger.info(`üîå WebSocket —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ ws://${this.host}:${this.port}${config.server.ws.path}`);
      }
      
    } catch (error) {
      logger.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É API —Å–µ—Ä–≤–µ—Ä–∞:', error);
      throw error;
    }
  }

  /**
   * –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Express
   */
  setupExpress() {
    // –ë–∞–∑–æ–≤–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
    this.app.use(express.json());
    this.app.use(express.urlencoded({ extended: true }));
    this.app.use(cors());
    this.app.use(helmet());
    this.app.use(compression());
    
    // Rate limiting
    if (config.security.rateLimit.enabled) {
      const limiter = rateLimit({
        windowMs: config.security.rateLimit.windowMs,
        max: config.security.rateLimit.max,
        standardHeaders: true,
        legacyHeaders: false,
        message: { error: '–ü–µ—Ä–µ–≤–∏—â–µ–Ω–æ –ª—ñ–º—ñ—Ç –∑–∞–ø–∏—Ç—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.' }
      });
      
      this.app.use(limiter);
    }
    
    // IP whitelist
    if (config.security.ipWhitelist.enabled && config.security.ipWhitelist.ips.length > 0) {
      this.app.use((req, res, next) => {
        const clientIp = req.ip || req.connection.remoteAddress;
        
        if (!config.security.ipWhitelist.ips.includes(clientIp)) {
          logger.warn(`‚ö†Ô∏è –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ –¥–ª—è IP: ${clientIp}`);
          return res.status(403).json({ error: '–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ' });
        }
        
        next();
      });
    }
    
    // API Auth middleware
    if (config.server.api.auth.enabled) {
      this.app.use(this.authMiddleware.bind(this));
    }
    
    // –õ–æ–≥—É–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—ñ–≤
    this.app.use((req, res, next) => {
      const start = Date.now();
      
      res.on('finish', () => {
        const duration = Date.now() - start;
        const logLevel = res.statusCode >= 400 ? 'warn' : 'debug';
        
        logger[logLevel](`${req.method} ${req.originalUrl} ${res.statusCode} [${duration}ms]`);
      });
      
      next();
    });
  }

  /**
   * Middleware –¥–ª—è –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
   */
  authMiddleware(req, res, next) {
    // –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ OPTIONS –∑–∞–ø–∏—Ç–∏
    if (req.method === 'OPTIONS') {
      return next();
    }
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç–æ–∫–µ–Ω
    const token = req.headers['x-api-key'] || req.query.apiKey;
    
    if (!token || token !== config.server.api.auth.token) {
      logger.warn('‚ö†Ô∏è –°–ø—Ä–æ–±–∞ –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø—É –¥–æ API');
      return res.status(401).json({ error: '–ù–µ–æ–±—Ö—ñ–¥–Ω–∞ –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—è' });
    }
    
    next();
  }

  /**
   * –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –º–∞—Ä—à—Ä—É—Ç—ñ–≤
   */
  setupRoutes() {
    const apiPrefix = config.server.api.prefix;
    
    // –ë–∞–∑–æ–≤–∏–π –º–∞—Ä—à—Ä—É—Ç
    this.app.get('/', (req, res) => {
      res.json({
        name: 'Binance Listing Bot API',
        version: '1.0.0',
        status: 'running'
      });
    });
    
    // API –º–∞—Ä—à—Ä—É—Ç–∏
    const apiRouter = express.Router();
    
    // –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞
    apiRouter.get('/status', (req, res) => {
      const status = this.bot.getStatus();
      res.json(status);
    });
    
    // –ó–∞–ø—É—Å–∫/–∑—É–ø–∏–Ω–∫–∞ –±–æ—Ç–∞
    apiRouter.post('/control', async (req, res) => {
      try {
        const { action } = req.body;
        
        if (action === 'start') {
          if (this.bot.isRunning) {
            return res.json({ success: true, message: '–ë–æ—Ç –≤–∂–µ –∑–∞–ø—É—â–µ–Ω–æ' });
          }
          
          await this.bot.start();
          return res.json({ success: true, message: '–ë–æ—Ç —É—Å–ø—ñ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ' });
        }
        
        if (action === 'stop') {
          if (!this.bot.isRunning) {
            return res.json({ success: true, message: '–ë–æ—Ç –≤–∂–µ –∑—É–ø–∏–Ω–µ–Ω–æ' });
          }
          
          await this.bot.stop();
          return res.json({ success: true, message: '–ë–æ—Ç —É—Å–ø—ñ—à–Ω–æ –∑—É–ø–∏–Ω–µ–Ω–æ' });
        }
        
        return res.status(400).json({ success: false, error: '–ù–µ–≤—ñ–¥–æ–º–∞ –¥—ñ—è' });
        
      } catch (error) {
        logger.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∫–æ–Ω—Ç—Ä–æ–ª—é –±–æ—Ç–∞:', error);
        return res.status(500).json({ success: false, error: error.message });
      }
    });
    
    // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–∏—Ö –ø–æ–∑–∏—Ü—ñ–π
    apiRouter.get('/positions', async (req, res) => {
      try {
        const positions = await this.bot.services.database.getActivePositions();
        res.json({ success: true, positions });
      } catch (error) {
        logger.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ–π:', error);
        res.status(500).json({ success: false, error: error.message });
      }
    });
    
    // –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó –ø–æ–∑–∏—Ü—ñ–π
    apiRouter.get('/positions/history', async (req, res) => {
      try {
        const { limit = 50, offset = 0, status } = req.query;
        
        const filters = {};
        if (status) {
          filters.status = status;
        }
        
        const result = await this.bot.services.database.getPositions(
          filters,
          parseInt(limit),
          parseInt(offset)
        );
        
        res.json({
          success: true,
          positions: result.rows,
          total: result.count,
          limit: parseInt(limit),
          offset: parseInt(offset)
        });
        
      } catch (error) {
        logger.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó –ø–æ–∑–∏—Ü—ñ–π:', error);
        res.status(500).json({ success: false, error: error.message });
      }
    });
    
    // –ó–∞–∫—Ä–∏—Ç—Ç—è –ø–æ–∑–∏—Ü—ñ—ó
    apiRouter.post('/positions/:symbol/close', async (req, res) => {
      try {
        const { symbol } = req.params;
        
        // –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ–∑–∏—Ü—ñ—é
        const position = await this.bot.services.database.getPositionBySymbol(symbol);
        
        if (!position) {
          return res.status(404).json({ success: false, error: '–ü–æ–∑–∏—Ü—ñ—é –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' });
        }
        
        // –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—É —Ü—ñ–Ω—É
        const currentPrice = await this.bot.services.trading.binanceClient.getCurrentPrice(symbol);
        
        // –°—Ç–≤–æ—Ä—é—î–º–æ —Ñ—ñ–∫—Ç–∏–≤–Ω–∏–π –æ—Ä–¥–µ—Ä –¥–ª—è –∑–∞–∫—Ä–∏—Ç—Ç—è –ø–æ–∑–∏—Ü—ñ—ó
        const filledOrder = {
          orderId: Date.now(),
          symbol,
          status: config.constants.ORDER_STATUS.FILLED,
          price: currentPrice
        };
        
        // –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –ø–æ–∑–∏—Ü—ñ—é
        await this.bot.services.trading.closePosition(position, filledOrder);
        
        res.json({
          success: true,
          message: `–ü–æ–∑–∏—Ü—ñ—é ${symbol} —É—Å–ø—ñ—à–Ω–æ –∑–∞–∫—Ä–∏—Ç–æ`,
          price: currentPrice
        });
        
      } catch (error) {
        logger.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è –ø–æ–∑–∏—Ü—ñ—ó ${req.params.symbol}:`, error);
        res.status(500).json({ success: false, error: error.message });
      }
    });
    
    // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
    apiRouter.get('/config', (req, res) => {
      // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é –±–µ–∑ —á—É—Ç–ª–∏–≤–∏—Ö –¥–∞–Ω–∏—Ö
      const safeConfig = { ...config };
      
      // –í–∏–¥–∞–ª—è—î–º–æ —á—É—Ç–ª–∏–≤—ñ –¥–∞–Ω—ñ
      delete safeConfig.binance.apiKey;
      delete safeConfig.binance.apiSecret;
      delete safeConfig.server.api.auth.token;
      
      if (safeConfig.notifications.telegram) {
        delete safeConfig.notifications.telegram.botToken;
        delete safeConfig.notifications.telegram.chatId;
      }
      
      if (safeConfig.notifications.email && safeConfig.notifications.email.smtp) {
        delete safeConfig.notifications.email.smtp.auth;
      }
      
      if (safeConfig.security.encryption) {
        delete safeConfig.security.encryption.key;
      }
      
      res.json({ success: true, config: safeConfig });
    });
    
    // –†—É—á–Ω–∏–π –∑–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ—ó –ø–æ–∫—É–ø–∫–∏
    apiRouter.post('/test/buy', async (req, res) => {
      try {
        const { symbol } = req.body;
        
        if (!symbol) {
          return res.status(400).json({ success: false, error: '–ù–µ–æ–±—Ö—ñ–¥–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ —Å–∏–º–≤–æ–ª' });
        }
        
        // –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Å–∏–º–≤–æ–ª
        const currentPrice = await this.bot.services.trading.binanceClient.getCurrentPrice(symbol);
        
        if (!currentPrice) {
          return res.status(404).json({ success: false, error: '–°–∏–º–≤–æ–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' });
        }
        
        // –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ
        const listingData = {
          symbol,
          price: currentPrice,
          volume: 1000000,
          quoteVolume: 1000000,
          timestamp: Date.now()
        };
        
        // –í–∏–∫–æ–Ω—É—î–º–æ –ø–æ–∫—É–ø–∫—É
        const result = await this.bot.services.trading.executeBuy(listingData);
        
        if (result.success) {
          // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ TP/SL
          await this.bot.services.trading.setTakeProfitStopLoss(result);
          
          res.json({
            success: true,
            message: `–¢–µ—Å—Ç–æ–≤–∞ –ø–æ–∫—É–ø–∫–∞ ${symbol} –≤–∏–∫–æ–Ω–∞–Ω–∞ —É—Å–ø—ñ—à–Ω–æ`,
            result
          });
        } else {
          res.status(400).json({
            success: false,
            error: result.error,
            message: `–ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ—ó –ø–æ–∫—É–ø–∫–∏ ${symbol}`
          });
        }
        
      } catch (error) {
        logger.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ—ó –ø–æ–∫—É–ø–∫–∏:', error);
        res.status(500).json({ success: false, error: error.message });
      }
    });
    
    // –ü–æ–º–∏–ª–∫–∏
    apiRouter.get('/errors', async (req, res) => {
      try {
        const { limit = 50, offset = 0 } = req.query;
        
        const errors = await this.bot.services.database.models.Error.findAndCountAll({
          limit: parseInt(limit),
          offset: parseInt(offset),
          order: [['timestamp', 'DESC']]
        });
        
        res.json({
          success: true,
          errors: errors.rows,
          total: errors.count,
          limit: parseInt(limit),
          offset: parseInt(offset)
        });
        
      } catch (error) {
        logger.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–º–∏–ª–æ–∫:', error);
        res.status(500).json({ success: false, error: error.message });
      }
    });
    
    // –õ–æ–≥–∏
    apiRouter.get('/logs', async (req, res) => {
      try {
        const { limit = 50, offset = 0, level } = req.query;
        
        const where = {};
        if (level) {
          where.level = level;
        }
        
        const logs = await this.bot.services.database.models.Log.findAndCountAll({
          where,
          limit: parseInt(limit),
          offset: parseInt(offset),
          order: [['timestamp', 'DESC']]
        });
        
        res.json({
          success: true,
          logs: logs.rows,
          total: logs.count,
          limit: parseInt(limit),
          offset: parseInt(offset)
        });
        
      } catch (error) {
        logger.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ª–æ–≥—ñ–≤:', error);
        res.status(500).json({ success: false, error: error.message });
      }
    });
    
    // –°—Ç–≤–æ—Ä—é—î–º–æ –º–∞—Ä—à—Ä—É—Ç –¥–ª—è API
    this.app.use(apiPrefix, apiRouter);
    
    // –û–±—Ä–æ–±–∫–∞ 404
    this.app.use((req, res) => {
      res.status(404).json({ error: '–ú–∞—Ä—à—Ä—É—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' });
    });
    
    // –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫
    this.app.use((err, req, res, next) => {
      logger.error('‚ùå –ü–æ–º–∏–ª–∫–∞ API:', err);
      
      const errorResponse = ErrorHandler.formatErrorResponse(err);
      res.status(errorResponse.status || 500).json(errorResponse);
    });
  }

  /**
   * –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è WebSocket —Å–µ—Ä–≤–µ—Ä–∞
   */
  setupWebSocket() {
    this.wss = new WebSocket.Server({
      server: this.server,
      path: config.server.ws.path
    });
    
    // –û–±—Ä–æ–±–∫–∞ –Ω–æ–≤–∏—Ö –∑'—î–¥–Ω–∞–Ω—å
    this.wss.on('connection', (ws, req) => {
      // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
      if (config.server.api.auth.enabled) {
        const url = new URL(req.url, `http://${req.headers.host}`);
        const token = url.searchParams.get('token');
        
        if (!token || token !== config.server.api.auth.token) {
          logger.warn('‚ö†Ô∏è –°–ø—Ä–æ–±–∞ –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ–≥–æ WebSocket –∑\'—î–¥–Ω–∞–Ω–Ω—è');
          ws.close(4001, '–ù–µ–æ–±—Ö—ñ–¥–Ω–∞ –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—è');
          return;
        }
      }
      
      // –î–æ–¥–∞—î–º–æ –∫–ª—ñ—î–Ω—Ç–∞ –¥–æ —Å–ø–∏—Å–∫—É –ø—ñ–¥–∫–ª—é—á–µ–Ω–∏—Ö
      this.connectedClients.add(ws);
      
      logger.info(`üîå –ù–æ–≤–∏–π WebSocket –∫–ª—ñ—î–Ω—Ç –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ (–≤—Å—å–æ–≥–æ: ${this.connectedClients.size})`);
      
      // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤–∏–π —Å—Ç–∞—Ç—É—Å
      this.sendToClient(ws, {
        type: 'status',
        data: this.bot.getStatus()
      });
      
      // –û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –≤—ñ–¥ –∫–ª—ñ—î–Ω—Ç–∞
      ws.on('message', (message) => {
        try {
          const data = JSON.parse(message);
          this.handleWebSocketMessage(ws, data);
        } catch (error) {
          logger.warn('‚ö†Ô∏è –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ WebSocket –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:', error);
        }
      });
      
      // –û–±—Ä–æ–±–∫–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è –∑'—î–¥–Ω–∞–Ω–Ω—è
      ws.on('close', () => {
        this.connectedClients.delete(ws);
        logger.info(`üîå WebSocket –∫–ª—ñ—î–Ω—Ç –≤—ñ–¥–∫–ª—é—á–µ–Ω–æ (–∑–∞–ª–∏—à–∏–ª–æ—Å—å: ${this.connectedClients.size})`);
      });
      
      // –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫
      ws.on('error', (error) => {
        logger.error('‚ùå WebSocket –ø–æ–º–∏–ª–∫–∞:', error);
        this.connectedClients.delete(ws);
      });
    });
    
    // –ü—ñ–¥–ø–∏—Å—É—î–º–æ—Å—å –Ω–∞ –ø–æ–¥—ñ—ó –±–æ—Ç–∞
    this.subscribeToEvents();
  }

  /**
   * –û–±—Ä–æ–±–∫–∞ WebSocket –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
   */
  handleWebSocketMessage(ws, message) {
    const { type, data } = message;
    
    switch (type) {
      case 'ping':
        this.sendToClient(ws, { type: 'pong', timestamp: Date.now() });
        break;
        
      case 'getStatus':
        this.sendToClient(ws, {
          type: 'status',
          data: this.bot.getStatus()
        });
        break;
        
      case 'control':
        if (data.action === 'start') {
          this.bot.start()
            .then(() => {
              this.sendToClient(ws, {
                type: 'controlResponse',
                success: true,
                message: '–ë–æ—Ç —É—Å–ø—ñ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ'
              });
            })
            .catch(error => {
              this.sendToClient(ws, {
                type: 'controlResponse',
                success: false,
                message: `–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞: ${error.message}`
              });
            });
        } else if (data.action === 'stop') {
          this.bot.stop()
            .then(() => {
              this.sendToClient(ws, {
                type: 'controlResponse',
                success: true,
                message: '–ë–æ—Ç —É—Å–ø—ñ—à–Ω–æ –∑—É–ø–∏–Ω–µ–Ω–æ'
              });
            })
            .catch(error => {
              this.sendToClient(ws, {
                type: 'controlResponse',
                success: false,
                message: `–ü–æ–º–∏–ª–∫–∞ –∑—É–ø–∏–Ω–∫–∏ –±–æ—Ç–∞: ${error.message}`
              });
            });
        }
        break;
        
      default:
        logger.warn(`‚ö†Ô∏è –ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø WebSocket –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: ${type}`);
    }
  }

  /**
   * –ü—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ø–æ–¥—ñ—ó –±–æ—Ç–∞
   */
  subscribeToEvents() {
    // –ù–æ–≤—ñ –ª—ñ—Å—Ç–∏–Ω–≥–∏
    this.bot.on('newListing', (data) => {
      this.broadcastToClients({
        type: 'newListing',
        data
      });
    });
    
    // –ü–æ–∫—É–ø–∫–∞
    this.bot.on('buyExecuted', (data) => {
      this.broadcastToClients({
        type: 'buyExecuted',
        data
      });
    });
    
    // –ó–∞–∫—Ä–∏—Ç—Ç—è –ø–æ–∑–∏—Ü—ñ—ó
    this.bot.on('positionClosed', (data) => {
      this.broadcastToClients({
        type: 'positionClosed',
        data
      });
    });
    
    // –ü–æ–º–∏–ª–∫–∏
    this.bot.on('error', (data) => {
      this.broadcastToClients({
        type: 'error',
        data
      });
    });
  }

  /**
   * –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –æ–¥–Ω–æ–º—É –∫–ª—ñ—î–Ω—Ç—É
   */
  sendToClient(ws, data) {
    if (ws.readyState === WebSocket.OPEN) {
      ws.send(JSON.stringify(data));
    }
  }

  /**
   * –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—Å—ñ–º –∫–ª—ñ—î–Ω—Ç–∞–º
   */
  broadcastToClients(data) {
    this.connectedClients.forEach(client => {
      if (client.readyState === WebSocket.OPEN) {
        client.send(JSON.stringify(data));
      }
    });
  }

  /**
   * –ó–∞–ø—É—Å–∫ HTTP —Å–µ—Ä–≤–µ—Ä–∞
   */
  async startServer() {
    return new Promise((resolve, reject) => {
      this.server.listen(this.port, this.host, (err) => {
        if (err) {
          return reject(err);
        }
        resolve();
      });
    });
  }

  /**
   * –ó—É–ø–∏–Ω–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
   */
  async stop() {
    logger.info('‚èπÔ∏è –ó—É–ø–∏–Ω–∫–∞ API —Å–µ—Ä–≤–µ—Ä–∞...');
    
    // –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –≤—Å—ñ WebSocket –∑'—î–¥–Ω–∞–Ω–Ω—è
    if (this.wss) {
      this.connectedClients.forEach(client => {
        client.close(1000, '–°–µ—Ä–≤–µ—Ä –∑—É–ø–∏–Ω–µ–Ω–æ');
      });
      
      this.connectedClients.clear();
      
      this.wss.close();
      this.wss = null;
    }
    
    // –ó–∞–∫—Ä–∏–≤–∞—î–º–æ HTTP —Å–µ—Ä–≤–µ—Ä
    if (this.server) {
      return new Promise((resolve, reject) => {
        this.server.close((err) => {
          if (err) {
            logger.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑—É–ø–∏–Ω–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞:', err);
            return reject(err);
          }
          
          this.server = null;
          logger.info('‚úÖ API —Å–µ—Ä–≤–µ—Ä –∑—É–ø–∏–Ω–µ–Ω–æ');
          resolve();
        });
      });
    }
  }
}

module.exports = { APIServer };