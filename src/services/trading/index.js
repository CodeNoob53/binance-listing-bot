// src/services/trading/index.js (–æ–Ω–æ–≤–ª–µ–Ω–∏–π)

const EventEmitter = require('events');
const config = require('../../config');
const logger = require('../../utils/logger');
const { getBinanceClientFactory } = require('../binance/client-factory');
const { OrderManager } = require('../binance/orders');
const { PositionCalculator } = require('./calculator');
const { RiskManager } = require('./risk');
const constants = require('../../config/constants');

/**
 * –û–Ω–æ–≤–ª–µ–Ω–∏–π —Ç–æ—Ä–≥–æ–≤–∏–π —Å–µ—Ä–≤—ñ—Å –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é —Ä—ñ–∑–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â
 */
class TradingService extends EventEmitter {
  constructor(database) {
    super();
    this.database = database;
    
    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —Ñ–∞–±—Ä–∏–∫—É –∫–ª—ñ—î–Ω—Ç—ñ–≤
    this.clientFactory = getBinanceClientFactory();
    this.binanceClient = null;
    this.orderManager = null;
    
    this.calculator = new PositionCalculator();
    this.riskManager = new RiskManager();
    
    this.isActive = false;
    this.activePositions = new Map();
    this.accountInfo = null;
    this.lastBalanceUpdate = 0;
    
    // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω—ñ –¥–ª—è —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
    this.environmentSettings = {
      testnet: {
        maxSimultaneousPositions: 10,
        allowRiskyOperations: true,
        detailedLogging: true
      },
      mainnet: {
        maxSimultaneousPositions: config.trading.maxPositions,
        allowRiskyOperations: false,
        detailedLogging: false
      }
    };
  }

  /**
   * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–µ—Ä–≤—ñ—Å—É
   */
  async initialize() {
    try {
      logger.info('üíπ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–µ—Ä–≤—ñ—Å—É...');
      
      // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –∫–ª—ñ—î–Ω—Ç –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
      await this.initializeBinanceClient();
      
      // –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∞–∫–∞—É–Ω—Ç
      await this.updateAccountInfo();
      
      // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∞–∫—Ç–∏–≤–Ω—ñ –ø–æ–∑–∏—Ü—ñ—ó –∑ –ë–î
      await this.loadActivePositions();
      
      // –ó–∞–ø—É—Å–∫–∞—î–º–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –ø–æ–∑–∏—Ü—ñ–π
      this.startPositionMonitoring();
      
      this.isActive = true;
      
      // –õ–æ–≥—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ
      const envInfo = this.clientFactory.environmentManager.getEnvironmentInfo();
      logger.info('‚úÖ –¢–æ—Ä–≥–æ–≤–∏–π —Å–µ—Ä–≤—ñ—Å —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ', {
        environment: envInfo.name,
        features: envInfo.features,
        hasApiKeys: envInfo.hasApiKeys
      });
      
    } catch (error) {
      logger.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–µ—Ä–≤—ñ—Å—É:', error);
      throw error;
    }
  }

  /**
   * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Binance –∫–ª—ñ—î–Ω—Ç–∞
   */
  async initializeBinanceClient() {
    try {
      // –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª—ñ—î–Ω—Ç –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
      this.binanceClient = this.clientFactory.getCurrentClient();
      this.orderManager = new OrderManager(this.binanceClient);
      
      // –í–∞–ª—ñ–¥—É—î–º–æ –∫–ª—ñ—î–Ω—Ç
      if (this.binanceClient.isTestnet && this.binanceClient.validateTestEnvironment) {
        const validation = await this.binanceClient.validateTestEnvironment();
        if (!validation.isValid) {
          throw new Error(`Testnet –≤–∞–ª—ñ–¥–∞—Ü—ñ—è –ø—Ä–æ–≤–∞–ª–µ–Ω–∞: ${validation.checks.filter(c => c.status === 'failed').map(c => c.details).join(', ')}`);
        }
      } else if (this.binanceClient.isMainnet && this.binanceClient.healthCheck) {
        const health = await this.binanceClient.healthCheck();
        if (health.overall === 'critical') {
          throw new Error(`Mainnet health check –ø—Ä–æ–≤–∞–ª–µ–Ω–∏–π: ${health.checks.filter(c => c.status === 'critical').map(c => c.details).join(', ')}`);
        }
      }
      
      logger.info(`üîó Binance –∫–ª—ñ—î–Ω—Ç –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ: ${this.binanceClient.environment}`);
      
    } catch (error) {
      logger.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó Binance –∫–ª—ñ—î–Ω—Ç–∞:', error);
      throw error;
    }
  }

  /**
   * –ü–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
   */
  async switchEnvironment(environmentName) {
    try {
      logger.info(`üîÑ –ü–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–µ—Ä–≤—ñ—Å—É –Ω–∞ ${environmentName}...`);
      
      // –ó—É–ø–∏–Ω—è—î–º–æ –ø–æ—Ç–æ—á–Ω—ñ –æ–ø–µ—Ä–∞—Ü—ñ—ó
      const wasActive = this.isActive;
      if (this.isActive) {
        await this.pause();
      }
      
      // –ü–µ—Ä–µ–º–∏–∫–∞—î–º–æ –∫–ª—ñ—î–Ω—Ç
      this.binanceClient = await this.clientFactory.switchEnvironment(environmentName);
      this.orderManager = new OrderManager(this.binanceClient);
      
      // –û–Ω–æ–≤–ª—é—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
      this.updateEnvironmentSettings();
      
      // –û–Ω–æ–≤–ª—é—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∞–∫–∞—É–Ω—Ç
      await this.updateAccountInfo();
      
      // –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ —Ä–æ–±–æ—Ç—É —è–∫—â–æ –±—É–ª–æ –∞–∫—Ç–∏–≤–Ω–æ
      if (wasActive) {
        await this.resume();
      }
      
      logger.info(`‚úÖ –¢–æ—Ä–≥–æ–≤–∏–π —Å–µ—Ä–≤—ñ—Å –ø–µ—Ä–µ–º–∫–Ω—É—Ç–æ –Ω–∞ ${environmentName}`);
      
      this.emit('environmentChanged', {
        environment: environmentName,
        client: this.binanceClient
      });
      
    } catch (error) {
      logger.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è –Ω–∞ ${environmentName}:`, error);
      throw error;
    }
  }

  /**
   * –û–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
   */
  updateEnvironmentSettings() {
    const currentEnv = this.binanceClient.environment;
    const settings = this.environmentSettings[currentEnv] || this.environmentSettings.mainnet;
    
    // –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
    this.maxPositions = settings.maxSimultaneousPositions;
    this.allowRiskyOperations = settings.allowRiskyOperations;
    this.detailedLogging = settings.detailedLogging;
    
    logger.debug(`‚öôÔ∏è –ó–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è ${currentEnv}:`, settings);
  }

  /**
   * –û–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∞–∫–∞—É–Ω—Ç –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
   */
  async updateAccountInfo() {
    try {
      this.accountInfo = await this.binanceClient.getAccountInfo();
      this.lastBalanceUpdate = Date.now();
      
      // –õ–æ–≥—É–≤–∞–Ω–Ω—è –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
      if (this.detailedLogging || this.binanceClient.isTestnet) {
        const balances = this.accountInfo.balances
          .filter(b => parseFloat(b.free) > 0 || parseFloat(b.locked) > 0)
          .map(b => `${b.asset}: ${b.free} (locked: ${b.locked})`);
        
        logger.info('üí∞ –ë–∞–ª–∞–Ω—Å–∏:', balances);
      }
      
      // –î–ª—è testnet –ø–æ–∫–∞–∑—É—î–º–æ –≤—ñ—Ä—Ç—É–∞–ª—å–Ω–∏–π –±–∞–ª–∞–Ω—Å —è–∫—â–æ –¥–æ—Å—Ç—É–ø–Ω–∏–π
      if (this.binanceClient.isTestnet && this.binanceClient.virtualBalance) {
        logger.info('üß™ –í—ñ—Ä—Ç—É–∞–ª—å–Ω–∏–π –±–∞–ª–∞–Ω—Å:', Object.fromEntries(this.binanceClient.virtualBalance));
      }
      
      // –î–ª—è mainnet –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –±–µ–∑–ø–µ–∫—É
      if (this.binanceClient.isMainnet && this.binanceClient.validateAccountSafety) {
        this.binanceClient.validateAccountSafety(this.accountInfo);
      }
      
    } catch (error) {
      logger.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –∞–∫–∞—É–Ω—Ç–∞:', error);
      throw error;
    }
  }

  /**
   * –í–∏–∫–æ–Ω–∞–Ω–Ω—è –ø–æ–∫—É–ø–∫–∏ –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
   */
  async executeBuy(listingData) {
    const timer = logger.startTimer();
    const { symbol } = listingData;
    
    try {
      logger.trade(`üõí –ü–æ—á–∞—Ç–æ–∫ –ø–æ–∫—É–ø–∫–∏ ${symbol} –≤ ${this.binanceClient.environment}`, { 
        listingData,
        environment: this.binanceClient.environment
      });
      
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≤–∂–µ –º–∞—î–º–æ –ø–æ–∑–∏—Ü—ñ—é
      if (this.activePositions.has(symbol)) {
        logger.warn(`‚ö†Ô∏è –ü–æ–∑–∏—Ü—ñ—è –¥–ª—è ${symbol} –≤–∂–µ —ñ—Å–Ω—É—î`);
        return { success: false, error: 'Position already exists' };
      }
      
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ª—ñ–º—ñ—Ç –ø–æ–∑–∏—Ü—ñ–π –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
      if (this.activePositions.size >= this.maxPositions) {
        logger.warn(`‚ö†Ô∏è –î–æ—Å—è–≥–Ω—É—Ç–æ –ª—ñ–º—ñ—Ç –ø–æ–∑–∏—Ü—ñ–π: ${this.maxPositions} –¥–ª—è ${this.binanceClient.environment}`);
        return { success: false, error: 'Max positions limit reached' };
      }
      
      // –î–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –¥–ª—è mainnet
      if (this.binanceClient.isMainnet && !this.allowRiskyOperations) {
        const riskAssessment = await this.assessTradeRisk(listingData);
        if (riskAssessment.risk === 'high') {
          logger.warn(`‚ö†Ô∏è –í–∏—Å–æ–∫–∏–π —Ä–∏–∑–∏–∫ —Ç–æ—Ä–≥—ñ–≤–ª—ñ ${symbol} –Ω–∞ mainnet:`, riskAssessment.reasons);
          return { success: false, error: 'High risk trade blocked on mainnet' };
        }
      }
      
      // –û–Ω–æ–≤–ª—é—î–º–æ –±–∞–ª–∞–Ω—Å —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
      if (Date.now() - this.lastBalanceUpdate > 60000) {
        await this.updateAccountInfo();
      }
      
      // –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Å–∏–º–≤–æ–ª
      const symbolInfo = await this.binanceClient.getSymbolInfo(symbol);
      if (!symbolInfo) {
        throw new Error(`Symbol info not found for ${symbol}`);
      }
      
      // –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ —Ä–æ–∑–º—ñ—Ä –æ—Ä–¥–µ—Ä–∞ –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
      const availableBalance = this.getAvailableBalance();
      const orderSize = this.calculateOrderSizeForEnvironment(availableBalance);
      
      if (orderSize < config.trading.baseOrderSize) {
        logger.warn(`‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤. –î–æ—Å—Ç—É–ø–Ω–æ: ${availableBalance}, –ü–æ—Ç—Ä—ñ–±–Ω–æ: ${config.trading.baseOrderSize}`);
        return { success: false, error: 'Insufficient balance' };
      }
      
      // –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—É —Ü—ñ–Ω—É
      const currentPrice = listingData.price || await this.binanceClient.getCurrentPrice(symbol);
      
      // –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–ª—è –ø–æ–∫—É–ø–∫–∏
      const quantity = this.calculator.calculateQuantity(
        orderSize,
        currentPrice,
        symbolInfo
      );
      
      if (!quantity || quantity <= 0) {
        throw new Error('Invalid quantity calculated');
      }
      
      // –í–∏–∫–æ–Ω—É—î–º–æ —Ä–∏–Ω–∫–æ–≤–∏–π –æ—Ä–¥–µ—Ä
      logger.trade(`üìà –í–∏–∫–æ–Ω–∞–Ω–Ω—è —Ä–∏–Ω–∫–æ–≤–æ–≥–æ –æ—Ä–¥–µ—Ä–∞: ${quantity} ${symbol} @ ~${currentPrice}`);
      
      const orderResult = await this.orderManager.placeMarketBuyOrder(symbol, quantity);
      
      if (!orderResult.success) {
        throw new Error(orderResult.error || 'Order placement failed');
      }
      
      // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ–∑–∏—Ü—ñ—é
      const position = {
        symbol,
        orderId: orderResult.orderId,
        quantity: orderResult.executedQty,
        entryPrice: orderResult.avgPrice,
        entryTime: new Date(),
        status: constants.POSITION_STATUS.OPEN,
        side: constants.ORDER_SIDES.BUY,
        environment: this.binanceClient.environment,
        ...listingData
      };
      
      await this.database.savePosition(position);
      this.activePositions.set(symbol, position);
      
      timer.done(`‚úÖ –ü–æ–∫—É–ø–∫–∞ ${symbol} –≤–∏–∫–æ–Ω–∞–Ω–∞ —É—Å–ø—ñ—à–Ω–æ –≤ ${this.binanceClient.environment}`, {
        symbol,
        quantity: orderResult.executedQty,
        avgPrice: orderResult.avgPrice,
        cost: orderResult.executedQty * orderResult.avgPrice,
        environment: this.binanceClient.environment,
        isSimulated: orderResult.isSimulated
      });
      
      this.emit('buyExecuted', {
        ...position,
        environment: this.binanceClient.environment
      });
      
      return {
        success: true,
        position,
        order: orderResult
      };
      
    } catch (error) {
      logger.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ–∫—É–ø–∫–∏ ${symbol} –≤ ${this.binanceClient.environment}:`, error);
      
      await this.database.saveError({
        type: 'BUY_ORDER_ERROR',
        symbol,
        environment: this.binanceClient.environment,
        error: error.message,
        data: listingData
      });
      
      return {
        success: false,
        error: error.message
      };
    }
  }

  /**
   * –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Ä–æ–∑–º—ñ—Ä—É –æ—Ä–¥–µ—Ä–∞ –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
   */
  calculateOrderSizeForEnvironment(availableBalance) {
    let baseSize = this.riskManager.calculateOrderSize(
      availableBalance,
      this.activePositions.size
    );
    
    // –ö–æ—Ä–∏–≥—É—î–º–æ —Ä–æ–∑–º—ñ—Ä –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â
    if (this.binanceClient.isTestnet) {
      // –ù–∞ testnet –º–æ–∂–µ–º–æ –¥–æ–∑–≤–æ–ª–∏—Ç–∏ –±—ñ–ª—å—à—ñ –æ—Ä–¥–µ—Ä–∏ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
      baseSize = Math.min(baseSize * 2, availableBalance * 0.5);
    } else if (this.binanceClient.isMainnet) {
      // –ù–∞ mainnet –±—ñ–ª—å—à –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–∏–π –ø—ñ–¥—Ö—ñ–¥
      baseSize = Math.min(baseSize, config.trading.maxOrderSize * 0.8);
    }
    
    return baseSize;
  }

  /**
   * –û—Ü—ñ–Ω–∫–∞ —Ä–∏–∑–∏–∫—É —Ç–æ—Ä–≥—ñ–≤–ª—ñ
   */
  async assessTradeRisk(listingData) {
    const risks = [];
    let riskLevel = 'low';
    
    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ–±—Å—è–≥—É
    if (listingData.quoteVolume < config.trading.filters.minVolume24h * 2) {
      risks.push('–ù–∏–∑—å–∫–∏–π –æ–±—Å—è–≥ —Ç–æ—Ä–≥—ñ–≤');
      riskLevel = 'medium';
    }
    
    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—ñ
    if (Math.abs(listingData.priceChangePercent) > 50) {
      risks.push('–í–∏—Å–æ–∫–∞ –≤–æ–ª–∞—Ç—ñ–ª—å–Ω—ñ—Å—Ç—å');
      riskLevel = 'high';
    }
    
    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∞—Å—É –ª—ñ—Å—Ç–∏–Ω–≥—É
    const listingAge = Date.now() - listingData.timestamp;
    if (listingAge > 300000) { // 5 —Ö–≤–∏–ª–∏–Ω
      risks.push('–°—Ç–∞—Ä–∏–π –ª—ñ—Å—Ç–∏–Ω–≥');
      riskLevel = 'medium';
    }
    
    return {
      risk: riskLevel,
      reasons: risks,
      score: risks.length
    };
  }

  /**
   * –ü–∞—É–∑–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–µ—Ä–≤—ñ—Å—É
   */
  async pause() {
    logger.info('‚è∏Ô∏è –ü–∞—É–∑–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–µ—Ä–≤—ñ—Å—É...');
    this.isActive = false;
    
    if (this.positionMonitorInterval) {
      clearInterval(this.positionMonitorInterval);
      this.positionMonitorInterval = null;
    }
  }

  /**
   * –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–µ—Ä–≤—ñ—Å—É
   */
  async resume() {
    logger.info('‚ñ∂Ô∏è –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–µ—Ä–≤—ñ—Å—É...');
    this.isActive = true;
    this.startPositionMonitoring();
  }

  /**
   * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
   */
  getStatus() {
    const baseStatus = {
      isActive: this.isActive,
      activePositions: this.activePositions.size,
      balance: this.getAvailableBalance(),
      lastUpdate: this.lastBalanceUpdate,
      environment: this.binanceClient?.environment || 'unknown',
      maxPositions: this.maxPositions,
      positions: Array.from(this.activePositions.values()).map(p => ({
        symbol: p.symbol,
        entryPrice: p.entryPrice,
        quantity: p.quantity,
        status: p.status,
        environment: p.environment
      }))
    };

    // –î–æ–¥–∞—î–º–æ —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –¥–ª—è —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
    if (this.binanceClient?.isTestnet) {
      baseStatus.testnetFeatures = this.binanceClient.testFeatures;
      if (this.binanceClient.virtualBalance) {
        baseStatus.virtualBalance = Object.fromEntries(this.binanceClient.virtualBalance);
      }
    }

    if (this.binanceClient?.isMainnet) {
      baseStatus.safetyFeatures = this.binanceClient.safetyFeatures;
      baseStatus.dailyStats = this.binanceClient.dailyStats;
    }

    return baseStatus;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∑–≤—ñ—Ç—É —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
   */
  generateEnvironmentReport() {
    const clientStats = this.clientFactory.getClientStatistics();
    const envInfo = this.clientFactory.environmentManager.getEnvironmentInfo();
    
    const report = {
      timestamp: new Date().toISOString(),
      currentEnvironment: envInfo,
      clientStatistics: clientStats,
      tradingService: this.getStatus(),
      recommendations: this.clientFactory.environmentManager.getSetupRecommendations()
    };

    // –î–æ–¥–∞—î–º–æ —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é
    if (this.binanceClient?.isMainnet && this.binanceClient.generateSecurityReport) {
      report.securityReport = this.binanceClient.generateSecurityReport();
    }

    if (this.binanceClient?.isTestnet && this.binanceClient.exportTestData) {
      report.testData = this.binanceClient.exportTestData();
    }

    return report;
  }

  /**
   * –ó—É–ø–∏–Ω–∫–∞ —Å–µ—Ä–≤—ñ—Å—É –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
   */
  async stop() {
    logger.info('‚èπÔ∏è –ó—É–ø–∏–Ω–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–µ—Ä–≤—ñ—Å—É...');
    
    this.isActive = false;
    
    if (this.positionMonitorInterval) {
      clearInterval(this.positionMonitorInterval);
    }
    
    // –ë–µ–∑–ø–µ—á–Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞
    if (this.binanceClient?.safeShutdown) {
      await this.binanceClient.safeShutdown();
    }
    
    // –ì–µ–Ω–µ—Ä—É—î–º–æ —Ñ—ñ–Ω–∞–ª—å–Ω–∏–π –∑–≤—ñ—Ç
    const finalReport = this.generateEnvironmentReport();
    logger.info('üìä –§—ñ–Ω–∞–ª—å–Ω–∏–π –∑–≤—ñ—Ç —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–µ—Ä–≤—ñ—Å—É:', finalReport);
    
    logger.info('‚úÖ –¢–æ—Ä–≥–æ–≤–∏–π —Å–µ—Ä–≤—ñ—Å –∑—É–ø–∏–Ω–µ–Ω–æ');
  }

  // –†–µ—à—Ç–∞ –º–µ—Ç–æ–¥—ñ–≤ –∑–∞–ª–∏—à–∞—é—Ç—å—Å—è –±–µ–∑ –∑–º—ñ–Ω, —Ç—ñ–ª—å–∫–∏ –¥–æ–¥–∞—î–º–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ –¥–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ
  
  /**
   * –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–∏—Ö –ø–æ–∑–∏—Ü—ñ–π
   */
  async loadActivePositions() {
    try {
      const positions = await this.database.getActivePositions();
      
      for (const position of positions) {
        this.activePositions.set(position.symbol, position);
      }
      
      logger.info(`üìä –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ ${this.activePositions.size} –∞–∫—Ç–∏–≤–Ω–∏—Ö –ø–æ–∑–∏—Ü—ñ–π –¥–ª—è ${this.binanceClient.environment}`);
      
    } catch (error) {
      logger.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ–π:', error);
    }
  }

  /**
   * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å—É
   */
  getAvailableBalance(asset = config.trading.quoteAsset) {
    if (!this.accountInfo) return 0;
    
    const balance = this.accountInfo.balances.find(b => b.asset === asset);
    return balance ? parseFloat(balance.free) : 0;
  }

  /**
   * –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è Take Profit —Ç–∞ Stop Loss
   */
  async setTakeProfitStopLoss(buyResult) {
    const { position } = buyResult;
    const { symbol, quantity, entryPrice } = position;
    
    try {
      logger.trade(`‚öôÔ∏è –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è TP/SL –¥–ª—è ${symbol} –≤ ${this.binanceClient.environment}`);
      
      // –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ —Ü—ñ–Ω–∏ TP —Ç–∞ SL
      const prices = this.calculator.calculateTPSL(
        entryPrice,
        config.trading.defaultTP,
        config.trading.defaultSL
      );
      
      let result;
      
      // –°–ø—Ä–æ–±—É—î–º–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ OCO –æ—Ä–¥–µ—Ä
      if (config.trading.useOCO) {
        result = await this.orderManager.placeOCOOrder(
          symbol,
          quantity,
          prices.takeProfit,
          prices.stopLoss
        );
      }
      
      // –Ø–∫—â–æ OCO –Ω–µ –≤–¥–∞–ª–æ—Å—è –∞–±–æ –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è - —Å—Ç–≤–æ—Ä—é—î–º–æ –æ–∫—Ä–µ–º—ñ –æ—Ä–¥–µ—Ä–∏
      if (!result || !result.success) {
        logger.warn('‚ö†Ô∏è OCO –æ—Ä–¥–µ—Ä –Ω–µ –≤–¥–∞–≤—Å—è, —Å—Ç–≤–æ—Ä—é—î–º–æ –æ–∫—Ä–µ–º—ñ –æ—Ä–¥–µ—Ä–∏');
        
        const [tpResult, slResult] = await Promise.all([
          this.orderManager.placeLimitSellOrder(symbol, quantity, prices.takeProfit),
          this.orderManager.placeStopLossOrder(symbol, quantity, prices.stopLoss)
        ]);
        
        result = {
          success: tpResult.success && slResult.success,
          tpOrder: tpResult,
          slOrder: slResult
        };
      }
      
      // –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ–∑–∏—Ü—ñ—é –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ TP/SL
      position.takeProfitPrice = prices.takeProfit;
      position.stopLossPrice = prices.stopLoss;
      position.tpOrderId = result.tpOrder?.orderId || result.orders?.[0]?.orderId;
      position.slOrderId = result.slOrder?.orderId || result.orders?.[1]?.orderId;
      
      await this.database.updatePosition(position);
      
      logger.trade(`‚úÖ TP/SL –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è ${symbol} –≤ ${this.binanceClient.environment}`, {
        takeProfit: prices.takeProfit,
        stopLoss: prices.stopLoss
      });
      
      this.emit('tpSlSet', position);
      
      return {
        success: true,
        position,
        tpSlResult: result
      };
      
    } catch (error) {
      logger.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è TP/SL –¥–ª—è ${symbol}:`, error);
      
      return {
        success: false,
        error: error.message
      };
    }
  }

  /**
   * –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–Ω–∏—Ö –ø–æ–∑–∏—Ü—ñ–π
   */
  startPositionMonitoring() {
    this.positionMonitorInterval = setInterval(async () => {
      if (!this.isActive || this.activePositions.size === 0) return;
      
      try {
        await this.checkPositions();
      } catch (error) {
        logger.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –ø–æ–∑–∏—Ü—ñ–π:', error);
      }
    }, constants.DELAYS.POSITION_UPDATE);
  }

  /**
   * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É –ø–æ–∑–∏—Ü—ñ–π
   */
  async checkPositions() {
    const positions = Array.from(this.activePositions.values());
    
    for (const position of positions) {
      try {
        // –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—É —Ü—ñ–Ω—É
        const currentPrice = await this.binanceClient.getCurrentPrice(position.symbol);
        position.currentPrice = currentPrice;
        
        // –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ P&L
        const pnl = this.calculator.calculatePnL(
          position.entryPrice,
          currentPrice,
          position.quantity
        );
        
        position.pnl = pnl.amount;
        position.pnlPercent = pnl.percentage;
        
        // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –ø–æ–∑–∏—Ü—ñ—ó
        const newStatus = this.determinePositionStatus(pnl.percentage);
        if (newStatus !== position.status) {
          position.status = newStatus;
          await this.database.updatePosition(position);
        }
        
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞—Ç—É—Å –æ—Ä–¥–µ—Ä—ñ–≤
        if (position.tpOrderId || position.slOrderId) {
          await this.checkOrderStatus(position);
        }
        
        // –õ–æ–≥—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω
        logger.position(`${position.symbol}: ${currentPrice} (${pnl.percentage >= 0 ? '+' : ''}${pnl.percentage.toFixed(2)}%) [${this.binanceClient.environment}]`, {
          symbol: position.symbol,
          entryPrice: position.entryPrice,
          currentPrice,
          pnl: pnl.amount,
          pnlPercent: pnl.percentage,
          environment: position.environment
        });
        
      } catch (error) {
        logger.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø–æ–∑–∏—Ü—ñ—ó ${position.symbol}:`, error);
      }
    }

    // –í–∏–≤–æ–¥–∏–º–æ —Å—Ç–∞—Ç—É—Å –ø—ñ—Å–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –≤—Å—ñ—Ö –ø–æ–∑–∏—Ü—ñ–π
    this.logTradingStatus();
  }

  /**
   * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É –æ—Ä–¥–µ—Ä—ñ–≤
   */
  async checkOrderStatus(position) {
    try {
      const orders = await this.binanceClient.getOpenOrders(position.symbol);
      
      const tpOrder = orders.find(o => o.orderId === position.tpOrderId);
      const slOrder = orders.find(o => o.orderId === position.slOrderId);
      
      // –Ø–∫—â–æ –æ–¥–∏–Ω –∑ –æ—Ä–¥–µ—Ä—ñ–≤ –≤–∏–∫–æ–Ω–∞–Ω–æ - –∑–∞–∫—Ä–∏–≤–∞—î–º–æ –ø–æ–∑–∏—Ü—ñ—é
      if ((!tpOrder && position.tpOrderId) || (!slOrder && position.slOrderId)) {
        const filledOrder = await this.binanceClient.getOrder(
          position.symbol,
          position.tpOrderId || position.slOrderId
        );
        
        if (filledOrder && filledOrder.status === constants.ORDER_STATUS.FILLED) {
          await this.closePosition(position, filledOrder);
        }
      }
      
    } catch (error) {
      logger.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –æ—Ä–¥–µ—Ä—ñ–≤ –¥–ª—è ${position.symbol}:`, error);
    }
  }

  /**
   * –ó–∞–∫—Ä–∏—Ç—Ç—è –ø–æ–∑–∏—Ü—ñ—ó
   */
  async closePosition(position, filledOrder) {
    try {
      logger.trade(`üìä –ó–∞–∫—Ä–∏—Ç—Ç—è –ø–æ–∑–∏—Ü—ñ—ó ${position.symbol} –≤ ${this.binanceClient.environment}`);
      
      // –í–∏–∑–Ω–∞—á–∞—î–º–æ –ø—Ä–∏—á–∏–Ω—É –∑–∞–∫—Ä–∏—Ç—Ç—è
      const closeReason = filledOrder.orderId === position.tpOrderId
        ? constants.CLOSE_REASONS.TAKE_PROFIT
        : constants.CLOSE_REASONS.STOP_LOSS;
      
      // –°–∫–∞—Å–æ–≤—É—î–º–æ –ø—Ä–æ—Ç–∏–ª–µ–∂–Ω–∏–π –æ—Ä–¥–µ—Ä
      const orderToCancel = closeReason === constants.CLOSE_REASONS.TAKE_PROFIT
        ? position.slOrderId
        : position.tpOrderId;
      
      if (orderToCancel) {
        await this.orderManager.cancelOrder(position.symbol, orderToCancel);
      }
      
      // –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ —Ñ—ñ–Ω–∞–ª—å–Ω–∏–π P&L
      const exitPrice = parseFloat(filledOrder.price);
      const pnl = this.calculator.calculatePnL(
        position.entryPrice,
        exitPrice,
        position.quantity
      );
      
      // –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ–∑–∏—Ü—ñ—é
      position.status = constants.POSITION_STATUS.CLOSED;
      position.exitPrice = exitPrice;
      position.exitTime = new Date();
      position.closeReason = closeReason;
      position.pnl = pnl.amount;
      position.pnlPercent = pnl.percentage;
      
      await this.database.updatePosition(position);
      
      // –í–∏–¥–∞–ª—è—î–º–æ –∑ –∞–∫—Ç–∏–≤–Ω–∏—Ö
      this.activePositions.delete(position.symbol);
      
      // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–ª—ñ—î–Ω—Ç–∞
      if (this.binanceClient.updateDailyStats) {
        this.binanceClient.updateDailyStats('trade', {}, { pnl: pnl.amount });
      }
      
      logger.trade(`‚úÖ –ü–æ–∑–∏—Ü—ñ—è ${position.symbol} –∑–∞–∫—Ä–∏—Ç–∞ –≤ ${this.binanceClient.environment}`, {
        reason: closeReason,
        entryPrice: position.entryPrice,
        exitPrice,
        pnl: pnl.amount,
        pnlPercent: pnl.percentage,
        environment: this.binanceClient.environment
      });
      
      this.emit('positionClosed', {
        ...position,
        environment: this.binanceClient.environment
      });
      
      // –û–Ω–æ–≤–ª—é—î–º–æ –±–∞–ª–∞–Ω—Å
      await this.updateAccountInfo();
      
    } catch (error) {
      logger.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è –ø–æ–∑–∏—Ü—ñ—ó ${position.symbol}:`, error);
    }
  }

  /**
   * –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –ø–æ–∑–∏—Ü—ñ—ó
   */
  determinePositionStatus(pnlPercent) {
    if (pnlPercent > 0) {
      return constants.POSITION_STATUS.IN_PROFIT;
    } else if (pnlPercent < 0) {
      return constants.POSITION_STATUS.IN_LOSS;
    } else {
      return constants.POSITION_STATUS.BREAK_EVEN;
    }
  }

  /**
   * –í–∏–≤–µ–¥–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–µ—Ä–≤—ñ—Å—É
   */
  logTradingStatus() {
    const positions = Array.from(this.activePositions.values());
    const status = {
      environment: this.binanceClient.environment,
      isActive: this.isActive,
      activePositions: positions.length,
      positions: positions.map(p => ({
        symbol: p.symbol,
        entryPrice: p.entryPrice,
        currentPrice: p.currentPrice,
        pnl: p.pnl,
        pnlPercent: p.pnlPercent,
        status: p.status
      })),
      maxPositions: this.maxPositions,
      lastBalanceUpdate: this.lastBalanceUpdate ? new Date(this.lastBalanceUpdate).toLocaleTimeString() : 'N/A',
      simulationMode: config.debug.simulationMode ? 'Enabled' : 'Disabled'
    };

    logger.info('üíπ –°—Ç–∞—Ç—É—Å —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–µ—Ä–≤—ñ—Å—É:', status);
  }

  /**
   * –ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–µ—Ä–≤—ñ—Å—É
   */
  async start() {
    try {
      logger.info('‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–µ—Ä–≤—ñ—Å—É...');
      
      // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —Å–µ—Ä–≤—ñ—Å —è–∫—â–æ —â–µ –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ
      if (!this.isActive) {
        await this.initialize();
      }
      
      // –ó–∞–ø—É—Å–∫–∞—î–º–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –ø–æ–∑–∏—Ü—ñ–π
      this.startPositionMonitoring();
      
      this.isActive = true;
      
      logger.info('‚úÖ –¢–æ—Ä–≥–æ–≤–∏–π —Å–µ—Ä–≤—ñ—Å –∑–∞–ø—É—â–µ–Ω–æ');
      
    } catch (error) {
      logger.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–µ—Ä–≤—ñ—Å—É:', error);
      throw error;
    }
  }
}

module.exports = { TradingService };