// src/services/binance/client-factory.js

const { BinanceClient } = require('./client');
const { TestnetClient } = require('./testnet-client');
const { MainnetClient } = require('./mainnet-client');
const { EnvironmentManager } = require('./environment-manager');
const logger = require('../../utils/logger');
const config = require('../../config');

/**
 * –§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞ Binance
 * –Ω–∞ –æ—Å–Ω–æ–≤—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
 */
class BinanceClientFactory {
  constructor() {
    this.clients = new Map();
    this.currentEnvironment = null;
    this.environmentManager = new EnvironmentManager();
  }

  /**
   * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞ –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
   */
  getCurrentClient() {
    if (!this.currentEnvironment) {
      throw new Error('No active environment');
    }
    return this.clients.get(this.currentEnvironment);
  }

  /**
   * –ü–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
   */
  async switchEnvironment(environment) {
    // –Ø–∫—â–æ –≤–∂–µ –≤ —Ü—å–æ–º—É —Å–µ—Ä–µ–¥–æ–≤–∏—â—ñ, –ø—Ä–æ—Å—Ç–æ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞
    if (this.currentEnvironment === environment) {
      return this.getCurrentClient();
    }

    // –í–∞–ª—ñ–¥—É—î–º–æ –Ω–æ–≤–µ —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ
    const validation = await this.environmentManager.validateEnvironment(environment);
    if (!validation.isValid) {
      throw new Error(`Invalid environment: ${validation.errors.join(', ')}`);
    }

    // –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª—ñ—î–Ω—Ç –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
    const client = new BinanceClient(environment);
    this.clients.set(environment, client);
    
    // –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ—Ç–æ—á–Ω–µ —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ
    this.currentEnvironment = environment;
    
    return client;
  }

  /**
   * –í–∞–ª—ñ–¥–∞—Ü—ñ—è –≤—Å—ñ—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â
   */
  async validateAllEnvironments() {
    const results = {};
    const environments = this.environmentManager.getAvailableEnvironments();
    
    for (const env of environments) {
      try {
        const validation = await this.environmentManager.validateEnvironment(env.name);
        results[env.name] = {
          isValid: validation.isValid,
          checks: validation.checks
        };
      } catch (error) {
        results[env.name] = {
          isValid: false,
          error: error.message
        };
      }
    }
    
    return results;
  }

  /**
   * –û—á–∏—â–µ–Ω–Ω—è –∫–µ—à—É –∫–ª—ñ—î–Ω—Ç—ñ–≤
   */
  clearClientCache() {
    this.clients.clear();
    this.currentEnvironment = null;
  }

  /**
   * –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ (–±–µ–∑ –ø–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ)
   */
  createClientForEnvironment(environmentName) {
    const originalEnv = this.environmentManager.currentEnvironment;
    
    try {
      // –¢–∏–º—á–∞—Å–æ–≤–æ –ø–µ—Ä–µ–º–∏–∫–∞—î–º–æ —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ
      this.environmentManager.switchEnvironment(environmentName);
      const client = this.getCurrentClient();
      
      // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–µ —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ
      this.environmentManager.switchEnvironment(originalEnv);
      
      return client;
    } catch (error) {
      // –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–µ —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ —É –≤–∏–ø–∞–¥–∫—É –ø–æ–º–∏–ª–∫–∏
      this.environmentManager.switchEnvironment(originalEnv);
      throw error;
    }
  }

  /**
   * –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –≤–∏–±—ñ—Ä –Ω–∞–π–∫—Ä–∞—â–æ–≥–æ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
   */
  async autoSelectEnvironment() {
    const validationResults = await this.validateAllEnvironments();
    
    // –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç: testnet –¥–ª—è —Ä–æ–∑—Ä–æ–±–∫–∏, mainnet –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É
    const preferredOrder = config.isDevelopment 
      ? ['testnet', 'mainnet']
      : ['mainnet', 'testnet'];

    for (const envName of preferredOrder) {
      if (validationResults[envName] && validationResults[envName].isValid) {
        logger.info(`üéØ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –æ–±—Ä–∞–Ω–æ —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ: ${envName}`);
        return this.switchEnvironment(envName);
      }
    }

    throw new Error('–ñ–æ–¥–Ω–µ —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ –Ω–µ –ø—Ä–æ–π—à–ª–æ –≤–∞–ª—ñ–¥–∞—Ü—ñ—é');
  }

  /**
   * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∫–ª—ñ—î–Ω—Ç–∞—Ö
   */
  getClientStatistics() {
    const stats = {
      currentEnvironment: this.environmentManager.currentEnvironment,
      cachedClients: Array.from(this.clients.keys()),
      hasCurrentClient: !!this.currentEnvironment,
      environmentsAvailable: this.environmentManager.getAvailableEnvironments().map(e => e.name)
    };

    // –î–æ–¥–∞—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞
    if (this.currentEnvironment) {
      if (this.clients.get(this.currentEnvironment).dailyStats) {
        stats.dailyStats = this.clients.get(this.currentEnvironment).dailyStats;
      }
      if (this.clients.get(this.currentEnvironment).virtualBalance) {
        stats.virtualBalance = Object.fromEntries(this.clients.get(this.currentEnvironment).virtualBalance);
      }
    }

    return stats;
  }

  /**
   * –ï–∫—Å–ø–æ—Ä—Ç –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –≤—Å—ñ—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤
   */
  exportConfiguration() {
    return {
      factory: {
        currentEnvironment: this.environmentManager.currentEnvironment,
        cachedEnvironments: Array.from(this.clients.keys())
      },
      environments: this.environmentManager.getAvailableEnvironments(),
      recommendations: this.environmentManager.getSetupRecommendations(),
      statistics: this.getClientStatistics()
    };
  }

  /**
   * –ë–µ–∑–ø–µ—á–Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏ –≤—Å—ñ—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤
   */
  async shutdown() {
    logger.info('üîí –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏ —Ñ–∞–±—Ä–∏–∫–∏ –∫–ª—ñ—î–Ω—Ç—ñ–≤...');
    
    const shutdownPromises = [];

    // –ó–∞–≤–µ—Ä—à—É—î–º–æ —Ä–æ–±–æ—Ç—É –≤—Å—ñ—Ö –∑–∞–∫–µ—à–æ–≤–∞–Ω–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤
    for (const [envName, client] of this.clients.entries()) {
      if (client.safeShutdown) {
        shutdownPromises.push(
          client.safeShutdown().catch(error => {
            logger.error(`–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞ ${envName}:`, error);
          })
        );
      }
    }

    await Promise.allSettled(shutdownPromises);
    
    this.clearClientCache();
    
    logger.info('‚úÖ –§–∞–±—Ä–∏–∫–∞ –∫–ª—ñ—î–Ω—Ç—ñ–≤ –∑–∞–≤–µ—Ä—à–∏–ª–∞ —Ä–æ–±–æ—Ç—É');
  }
}

// –°–∏–Ω–≥–ª—Ç–æ–Ω –¥–ª—è —Ñ–∞–±—Ä–∏–∫–∏
let factoryInstance = null;

function getBinanceClientFactory() {
  if (!factoryInstance) {
    factoryInstance = new BinanceClientFactory();
  }
  return factoryInstance;
}

module.exports = {
  BinanceClientFactory,
  getBinanceClientFactory
};