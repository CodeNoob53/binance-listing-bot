// src/services/binance/environment-manager.js

const logger = require('../../utils/logger');
const config = require('../../config');

/**
 * –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–µ—Ä–µ–¥–æ–≤–∏—â –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è testnet —Ç–∞ mainnet –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è–º–∏
 */
class EnvironmentManager {
  constructor() {
    this.currentEnvironment = config.binance.useTestnet ? 'testnet' : 'mainnet';
    this.environments = new Map();
    
    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
    this.initializeEnvironments();
  }

  /**
   * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –≤—Å—ñ—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â
   */
  initializeEnvironments() {
    // Testnet —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ
    this.environments.set('testnet', {
      name: 'testnet',
      displayName: 'Testnet',
      config: config.binance.testnet,
      features: {
        realTrading: false,
        virtualMoney: true,
        fullAPI: true,
        websocket: true,
        orderLimits: {
          maxOrderValue: 1000000, // –ë—ñ–ª—å—à—ñ –ª—ñ–º—ñ—Ç–∏ –Ω–∞ testnet
          maxPositions: 50
        }
      },
      validation: {
        requiredKeys: ['apiKey', 'apiSecret'],
        minKeyLength: 64
      }
    });

    // Mainnet —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ
    this.environments.set('mainnet', {
      name: 'mainnet',
      displayName: 'Mainnet (Production)',
      config: config.binance.mainnet,
      features: {
        realTrading: true,
        virtualMoney: false,
        fullAPI: true,
        websocket: true,
        orderLimits: {
          maxOrderValue: config.trading.maxOrderSize,
          maxPositions: config.trading.maxPositions
        }
      },
      validation: {
        requiredKeys: ['apiKey', 'apiSecret'],
        minKeyLength: 64,
        additionalChecks: [
          'validateIPRestrictions',
          'validatePermissions'
        ]
      }
    });

    logger.info(`üåç –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞: ${Array.from(this.environments.keys()).join(', ')}`);
    logger.info(`üìç –ü–æ—Ç–æ—á–Ω–µ —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ: ${this.currentEnvironment}`);
  }

  /**
   * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
   */
  getCurrentEnvironment() {
    return this.environments.get(this.currentEnvironment);
  }

  /**
   * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
   */
  getCurrentConfig() {
    const environment = this.getCurrentEnvironment();
    if (!environment) {
      throw new Error(`–°–µ—Ä–µ–¥–æ–≤–∏—â–µ ${this.currentEnvironment} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ`);
    }
    return environment.config;
  }

  /**
   * –ü–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
   */
  switchEnvironment(environmentName) {
    if (!this.environments.has(environmentName)) {
      throw new Error(`–°–µ—Ä–µ–¥–æ–≤–∏—â–µ ${environmentName} –Ω–µ —ñ—Å–Ω—É—î`);
    }

    const oldEnvironment = this.currentEnvironment;
    this.currentEnvironment = environmentName;

    logger.warn(`üîÑ –ü–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞: ${oldEnvironment} ‚Üí ${environmentName}`);
    
    // –í–∞–ª—ñ–¥—É—î–º–æ –Ω–æ–≤–µ —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ
    const validationResult = this.validateEnvironment(environmentName);
    if (!validationResult.isValid) {
      // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –Ω–∞–∑–∞–¥ –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ
      this.currentEnvironment = oldEnvironment;
      throw new Error(`–ü–æ–º–∏–ª–∫–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ ${environmentName}: ${validationResult.errors.join(', ')}`);
    }

    return this.getCurrentEnvironment();
  }

  /**
   * –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
   */
  validateEnvironment(environmentName = this.currentEnvironment) {
    const environment = this.environments.get(environmentName);
    if (!environment) {
      return {
        isValid: false,
        errors: [`–°–µ—Ä–µ–¥–æ–≤–∏—â–µ ${environmentName} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ`]
      };
    }

    const errors = [];
    const { config, validation } = environment;

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –∫–ª—é—á—ñ
    for (const key of validation.requiredKeys) {
      if (!config[key] || config[key].trim() === '') {
        errors.push(`–í—ñ–¥—Å—É—Ç–Ω—ñ–π –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä: ${key}`);
      } else if (config[key].length < validation.minKeyLength) {
        errors.push(`${key} –º–∞—î –±—É—Ç–∏ –¥–æ–≤–∂–∏–Ω–æ—é –º—ñ–Ω—ñ–º—É–º ${validation.minKeyLength} —Å–∏–º–≤–æ–ª—ñ–≤`);
      }
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ URL
    if (!this.isValidUrl(config.baseURL)) {
      errors.push('–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π baseURL');
    }

    if (!this.isValidWebSocketUrl(config.wsBaseURL)) {
      errors.push('–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π wsBaseURL');
    }

    // –î–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –¥–ª—è mainnet
    if (environmentName === 'mainnet' && validation.additionalChecks) {
      // –ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è –ø—Ä–æ —Ä–µ–∞–ª—å–Ω—ñ –≥—Ä–æ—à—ñ
      if (environment.features.realTrading) {
        logger.warn('‚ö†Ô∏è –£–í–ê–ì–ê: –£–≤—ñ–º–∫–Ω–µ–Ω–æ —Ç–æ—Ä–≥—ñ–≤–ª—é —Ä–µ–∞–ª—å–Ω–∏–º–∏ –∫–æ—à—Ç–∞–º–∏ –Ω–∞ MAINNET!');
      }
    }

    return {
      isValid: errors.length === 0,
      errors
    };
  }

  /**
   * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–∞–ª—ñ–¥–Ω–æ—Å—Ç—ñ URL
   */
  isValidUrl(url) {
    try {
      new URL(url);
      return url.startsWith('https://');
    } catch {
      return false;
    }
  }

  /**
   * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–∞–ª—ñ–¥–Ω–æ—Å—Ç—ñ WebSocket URL
   */
  isValidWebSocketUrl(url) {
    try {
      const parsedUrl = new URL(url);
      return parsedUrl.protocol === 'wss:';
    } catch {
      return false;
    }
  }

  /**
   * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ–π —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
   */
  getEnvironmentFeatures(environmentName = this.currentEnvironment) {
    const environment = this.environments.get(environmentName);
    return environment ? environment.features : null;
  }

  /**
   * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –¥–æ–∑–≤–æ–ª–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü—ñ—è –≤ –ø–æ—Ç–æ—á–Ω–æ–º—É —Å–µ—Ä–µ–¥–æ–≤–∏—â—ñ
   */
  isOperationAllowed(operation, value = null) {
    const features = this.getEnvironmentFeatures();
    if (!features) return false;

    switch (operation) {
      case 'realTrading':
        return features.realTrading;
      
      case 'orderValue':
        return value <= features.orderLimits.maxOrderValue;
      
      case 'positions':
        return value <= features.orderLimits.maxPositions;
      
      case 'websocket':
        return features.websocket;
      
      default:
        return true;
    }
  }

  /**
   * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –±–µ–∑–ø–µ—á–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ (–±–µ–∑ —Å–µ–∫—Ä–µ—Ç—ñ–≤)
   */
  getEnvironmentInfo(environmentName = this.currentEnvironment) {
    const environment = this.environments.get(environmentName);
    if (!environment) return null;

    return {
      name: environment.name,
      displayName: environment.displayName,
      features: environment.features,
      endpoints: {
        rest: environment.config.baseURL,
        websocket: environment.config.wsBaseURL,
        wsApi: environment.config.wsApiBaseURL
      },
      hasApiKeys: !!(environment.config.apiKey && environment.config.apiSecret)
    };
  }

  /**
   * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –≤—Å—ñ—Ö –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â
   */
  getAvailableEnvironments() {
    return Array.from(this.environments.keys()).map(name => this.getEnvironmentInfo(name));
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
   */
  getSetupRecommendations() {
    const recommendations = [];

    if (this.currentEnvironment === 'mainnet') {
      recommendations.push({
        type: 'warning',
        message: '–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ —Å–ø–æ—á–∞—Ç–∫—É –ø—Ä–æ—Ç–µ—Å—Ç—É–≤–∞—Ç–∏ –Ω–∞ testnet',
        action: '–í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å BINANCE_TESTNET=true –≤ .env —Ñ–∞–π–ª—ñ'
      });
    }

    if (this.currentEnvironment === 'testnet') {
      recommendations.push({
        type: 'info',
        message: '–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å—Å—è —Ç–µ—Å—Ç–æ–≤—ñ –∫–æ—à—Ç–∏',
        action: '–ü–µ—Ä–µ–∫–ª—é—á—ñ—Ç—å—Å—è –Ω–∞ mainnet –∫–æ–ª–∏ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ñ'
      });
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–µ–∑–ø–µ–∫–∏
    if (!config.security.ipWhitelist.enabled && this.currentEnvironment === 'mainnet') {
      recommendations.push({
        type: 'security',
        message: '–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ —É–≤—ñ–º–∫–Ω—É—Ç–∏ IP whitelist –¥–ª—è mainnet',
        action: '–í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å IP_WHITELIST_ENABLED=true'
      });
    }

    return recommendations;
  }

  /**
   * –ï–∫—Å–ø–æ—Ä—Ç –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
   */
  exportEnvironmentConfig(includeSecrets = false) {
    const environment = this.getCurrentEnvironment();
    const config = { ...environment.config };

    if (!includeSecrets) {
      // –ú–∞—Å–∫—É—î–º–æ —Å–µ–∫—Ä–µ—Ç–Ω—ñ –¥–∞–Ω—ñ
      if (config.apiKey) {
        config.apiKey = config.apiKey.substring(0, 8) + '...';
      }
      delete config.apiSecret;
    }

    return {
      environment: environment.name,
      config,
      features: environment.features
    };
  }
}

module.exports = { EnvironmentManager };