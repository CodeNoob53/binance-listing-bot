// src/services/binance/mainnet-client.js

const { BinanceClient } = require('./client');
const logger = require('../../utils/logger');
const config = require('../../config');

/**
 * –°–ø–µ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π –∫–ª—ñ—î–Ω—Ç –¥–ª—è Binance Mainnet
 * –í–∫–ª—é—á–∞—î –¥–æ–¥–∞—Ç–∫–æ–≤—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –±–µ–∑–ø–µ–∫–∏ —Ç–∞ –∫–æ–Ω—Ç—Ä–æ–ª—é –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ—ó —Ç–æ—Ä–≥—ñ–≤–ª—ñ
 */
class MainnetClient extends BinanceClient {
  constructor() {
    super();
    
    this.isMainnet = true;
    this.safetyFeatures = {
      enableOrderConfirmation: true,
      enableBalanceChecks: true,
      enableRiskLimits: true,
      enableAuditLogging: true,
      maxOrderValue: config.trading.maxOrderSize,
      dailyLossLimit: config.trading.baseOrderSize * 10 // 10x –±–∞–∑–æ–≤–æ–≥–æ –æ—Ä–¥–µ—Ä–∞
    };
    
    this.dailyStats = {
      ordersPlaced: 0,
      totalVolume: 0,
      totalLoss: 0,
      totalProfit: 0,
      lastReset: new Date().toDateString()
    };
    
    // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è –ø—Ä–æ —Ä–µ–∞–ª—å–Ω—ñ –≥—Ä–æ—à—ñ
    this.showMainnetWarning();
    
    logger.info('üí∞ Mainnet –∫–ª—ñ—î–Ω—Ç —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ', {
      baseURL: this.baseURL,
      safetyFeatures: this.safetyFeatures
    });
  }

  /**
   * –ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è –ø—Ä–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ä–µ–∞–ª—å–Ω–∏—Ö –∫–æ—à—Ç—ñ–≤
   */
  showMainnetWarning() {
    const warnings = [
      '‚ö†Ô∏è ================================ –£–í–ê–ì–ê ================================ ‚ö†Ô∏è',
      '‚ö†Ô∏è                  –í–ò –í–ò–ö–û–†–ò–°–¢–û–í–£–Ñ–¢–ï MAINNET BINANCE                    ‚ö†Ô∏è',
      '‚ö†Ô∏è                    –¢–û–†–ì–Ü–í–õ–Ø –†–ï–ê–õ–¨–ù–ò–ú–ò –ö–û–®–¢–ê–ú–ò!                       ‚ö†Ô∏è',
      '‚ö†Ô∏è                                                                      ‚ö†Ô∏è',
      '‚ö†Ô∏è ‚Ä¢ –í—Å—ñ –æ—Ä–¥–µ—Ä–∏ –±—É–¥—É—Ç—å –≤–∏–∫–æ–Ω—É–≤–∞—Ç–∏—Å—è –∑ —Ä–µ–∞–ª—å–Ω–∏–º–∏ –∫–æ—à—Ç–∞–º–∏                ‚ö†Ô∏è',
      '‚ö†Ô∏è ‚Ä¢ –í—Ç—Ä–∞—Ç–∏ –±—É–¥—É—Ç—å —Ä–µ–∞–ª—å–Ω–∏–º–∏ —Ç–∞ –Ω–µ–∑–≤–æ—Ä–æ—Ç–Ω–∏–º–∏                           ‚ö†Ô∏è',
      '‚ö†Ô∏è ‚Ä¢ –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å                          ‚ö†Ô∏è',
      '‚ö†Ô∏è ‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è —Å–ø–æ—á–∞—Ç–∫—É –ø—Ä–æ—Ç–µ—Å—Ç—É–≤–∞—Ç–∏ –Ω–∞ testnet                   ‚ö†Ô∏è',
      '‚ö†Ô∏è                                                                      ‚ö†Ô∏è',
      '‚ö†Ô∏è ===================================================================== ‚ö†Ô∏è'
    ];
    
    warnings.forEach(warning => logger.warn(warning));
    
    // –î–æ–¥–∞—Ç–∫–æ–≤–µ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è —è–∫—â–æ —Å–∏–º—É–ª—è—Ü—ñ—è –≤–∏–º–∫–Ω–µ–Ω–∞
    if (!config.debug.simulationMode) {
      logger.warn('üö® –°–ò–ú–£–õ–Ø–¶–Ü–Ø –í–ò–ú–ö–ù–ï–ù–ê - –û–†–î–ï–†–ò –ë–£–î–£–¢–¨ –†–ï–ê–õ–¨–ù–ò–ú–ò! üö®');
    }
  }

  /**
   * –°–∫–∏–¥–∞–Ω–Ω—è –¥–µ–Ω–Ω–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
   */
  resetDailyStatsIfNeeded() {
    const today = new Date().toDateString();
    if (this.dailyStats.lastReset !== today) {
      this.dailyStats = {
        ordersPlaced: 0,
        totalVolume: 0,
        totalLoss: 0,
        totalProfit: 0,
        lastReset: today
      };
      logger.info('üìä –î–µ–Ω–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∫–∏–Ω—É—Ç–∞');
    }
  }

  /**
   * –ê—É–¥–∏—Ç –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è mainnet –æ–ø–µ—Ä–∞—Ü—ñ–π
   */
  auditLog(operation, data, risk = 'low') {
    if (this.safetyFeatures.enableAuditLogging) {
      const auditEntry = {
        timestamp: new Date().toISOString(),
        operation,
        risk,
        environment: 'mainnet',
        data,
        user: 'system', // –ú–æ–∂–Ω–∞ —Ä–æ–∑—à–∏—Ä–∏—Ç–∏ –¥–ª—è –±–∞–≥–∞—Ç–æ–∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ü—å–∫–æ–≥–æ —Ä–µ–∂–∏–º—É
        sessionId: process.pid // –ü—Ä–æ—Å—Ç–∏–π session ID
      };
      
      logger.info(`üîç [AUDIT] ${operation}`, auditEntry);
      
      // –í production –º–æ–∂–Ω–∞ –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ –≤ –æ–∫—Ä–µ–º–∏–π —Ñ–∞–π–ª –∞—É–¥–∏—Ç—É
      if (config.isProduction) {
        // TODO: –î–æ–¥–∞—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ audit.log
      }
    }
  }

  /**
   * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –±–µ–∑–ø–µ—á–Ω–æ—Å—Ç—ñ –æ—Ä–¥–µ—Ä–∞ –ø–µ—Ä–µ–¥ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è–º
   */
  validateOrderSafety(params) {
    this.resetDailyStatsIfNeeded();
    
    const { symbol, side, quantity, price, type } = params;
    const orderValue = type === 'MARKET' 
      ? quantity * (price || 0) // –î–ª—è —Ä–∏–Ω–∫–æ–≤–∏—Ö –æ—Ä–¥–µ—Ä—ñ–≤ —Ü—ñ–Ω–∞ –º–æ–∂–µ –±—É—Ç–∏ –Ω–µ–≤—ñ–¥–æ–º–∞
      : quantity * price;

    const validationResults = {
      isValid: true,
      warnings: [],
      errors: []
    };

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–æ–∑–º—ñ—Ä—É –æ—Ä–¥–µ—Ä–∞
    if (orderValue > this.safetyFeatures.maxOrderValue) {
      validationResults.errors.push(
        `–†–æ–∑–º—ñ—Ä –æ—Ä–¥–µ—Ä–∞ (${orderValue}) –ø–µ—Ä–µ–≤–∏—â—É—î –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π –ª—ñ–º—ñ—Ç (${this.safetyFeatures.maxOrderValue})`
      );
      validationResults.isValid = false;
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–µ–Ω–Ω–æ–≥–æ –ª—ñ–º—ñ—Ç—É –≤—Ç—Ä–∞—Ç
    if (this.dailyStats.totalLoss >= this.safetyFeatures.dailyLossLimit) {
      validationResults.errors.push(
        `–î–æ—Å—è–≥–Ω—É—Ç–æ –¥–µ–Ω–Ω–∏–π –ª—ñ–º—ñ—Ç –≤—Ç—Ä–∞—Ç (${this.safetyFeatures.dailyLossLimit})`
      );
      validationResults.isValid = false;
    }

    // –ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è –¥–ª—è –≤–µ–ª–∏–∫–∏—Ö –æ—Ä–¥–µ—Ä—ñ–≤
    if (orderValue > config.trading.baseOrderSize * 5) {
      validationResults.warnings.push(
        `–í–µ–ª–∏–∫–∏–π –æ—Ä–¥–µ—Ä: ${orderValue} (>5x –±–∞–∑–æ–≤–æ–≥–æ —Ä–æ–∑–º—ñ—Ä—É)`
      );
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–∏–º–≤–æ–ª—É
    if (!symbol.endsWith(config.trading.quoteAsset)) {
      validationResults.warnings.push(
        `–°–∏–º–≤–æ–ª ${symbol} –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ–º—É quote asset (${config.trading.quoteAsset})`
      );
    }

    return validationResults;
  }

  /**
   * –ü–µ—Ä–µ–≤–∏–∑–Ω–∞—á–µ–Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ—Ä–¥–µ—Ä–∞ –∑ –¥–æ–¥–∞—Ç–∫–æ–≤–∏–º–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞–º–∏ –±–µ–∑–ø–µ–∫–∏
   */
  async createOrder(params) {
    // –ê—É–¥–∏—Ç —Å–ø—Ä–æ–±–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ—Ä–¥–µ—Ä–∞
    this.auditLog('ORDER_ATTEMPT', params, 'high');

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –±–µ–∑–ø–µ—á–Ω–æ—Å—Ç—ñ
    const safetyCheck = this.validateOrderSafety(params);
    
    if (!safetyCheck.isValid) {
      const error = new Error(`–û—Ä–¥–µ—Ä –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ —Å–∏—Å—Ç–µ–º–æ—é –±–µ–∑–ø–µ–∫–∏: ${safetyCheck.errors.join(', ')}`);
      this.auditLog('ORDER_BLOCKED', { params, errors: safetyCheck.errors }, 'critical');
      throw error;
    }

    // –õ–æ–≥—É—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è
    if (safetyCheck.warnings.length > 0) {
      safetyCheck.warnings.forEach(warning => logger.warn(`‚ö†Ô∏è ${warning}`));
    }

    // –Ø–∫—â–æ –≤–≤—ñ–º–∫–Ω–µ–Ω–∞ —Å–∏–º—É–ª—è—Ü—ñ—è –Ω–∞ mainnet (–¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è)
    if (config.debug.simulationMode) {
      logger.warn('üß™ [MAINNET SIMULATION] –û—Ä–¥–µ—Ä –Ω–µ –±—É–¥–µ –≤–∏–∫–æ–Ω–∞–Ω–æ —Ä–µ–∞–ª—å–Ω–æ');
      return this.simulateOrderExecution(params);
    }

    try {
      // –î–æ–¥–∞—Ç–∫–æ–≤–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –¥–ª—è –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π
      if (this.safetyFeatures.enableOrderConfirmation) {
        const orderValue = params.quantity * (params.price || 0);
        if (orderValue > config.trading.baseOrderSize * 2) {
          logger.warn(`ü§î –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–µ–ª–∏–∫–æ–≥–æ –æ—Ä–¥–µ—Ä–∞: ${orderValue} ${config.trading.quoteAsset}`);
          // –í production —Ç—É—Ç –º–æ–∂–µ –±—É—Ç–∏ –∑–∞–ø–∏—Ç –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        }
      }

      const result = await super.createOrder(params);
      
      // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      this.updateDailyStats('order', params, result);
      
      // –ê—É–¥–∏—Ç —É—Å–ø—ñ—à–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞
      this.auditLog('ORDER_SUCCESS', {
        orderId: result.orderId,
        symbol: result.symbol,
        side: result.side,
        quantity: result.executedQty,
        price: result.avgPrice || params.price
      }, 'high');

      return result;
    } catch (error) {
      // –ê—É–¥–∏—Ç –ø–æ–º–∏–ª–∫–∏ –æ—Ä–¥–µ—Ä–∞
      this.auditLog('ORDER_ERROR', {
        params,
        error: error.message
      }, 'critical');
      
      throw error;
    }
  }

  /**
   * –°–∏–º—É–ª—è—Ü—ñ—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –æ—Ä–¥–µ—Ä–∞ –¥–ª—è —Ä–µ–∂–∏–º—É —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –Ω–∞ mainnet
   */
  simulateOrderExecution(params) {
    const mockOrderId = Date.now();
    const executedQty = params.quantity;
    const avgPrice = params.price || Math.random() * 100; // –í–∏–ø–∞–¥–∫–æ–≤–∞ —Ü—ñ–Ω–∞ –¥–ª—è —Ä–∏–Ω–∫–æ–≤–∏—Ö –æ—Ä–¥–µ—Ä—ñ–≤

    return {
      orderId: mockOrderId,
      symbol: params.symbol,
      status: 'FILLED',
      type: params.type,
      side: params.side,
      origQty: params.quantity,
      executedQty,
      avgPrice,
      transactTime: Date.now(),
      isSimulated: true
    };
  }

  /**
   * –û–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–µ–Ω–Ω–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
   */
  updateDailyStats(type, params, result) {
    this.resetDailyStatsIfNeeded();

    if (type === 'order') {
      this.dailyStats.ordersPlaced++;
      const volume = result.executedQty * (result.avgPrice || params.price);
      this.dailyStats.totalVolume += volume;
    }

    if (type === 'trade') {
      if (result.pnl > 0) {
        this.dailyStats.totalProfit += result.pnl;
      } else {
        this.dailyStats.totalLoss += Math.abs(result.pnl);
      }
    }
  }

  /**
   * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å—É –∑ –¥–æ–¥–∞—Ç–∫–æ–≤–∏–º–∏ –æ–±–º–µ–∂–µ–Ω–Ω—è–º–∏
   */
  async getAccountInfo() {
    try {
      const accountInfo = await super.getAccountInfo();
      
      this.auditLog('BALANCE_CHECK', {
        balanceCount: accountInfo.balances.length,
        canTrade: accountInfo.canTrade,
        canWithdraw: accountInfo.canWithdraw
      }, 'medium');

      // –î–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –¥–ª—è mainnet
      if (this.safetyFeatures.enableBalanceChecks) {
        this.validateAccountSafety(accountInfo);
      }

      return {
        ...accountInfo,
        isMainnet: true,
        dailyStats: this.dailyStats
      };
    } catch (error) {
      this.auditLog('BALANCE_ERROR', { error: error.message }, 'critical');
      throw error;
    }
  }

  /**
   * –í–∞–ª—ñ–¥–∞—Ü—ñ—è –±–µ–∑–ø–µ—á–Ω–æ—Å—Ç—ñ –∞–∫–∞—É–Ω—Ç–∞
   */
  validateAccountSafety(accountInfo) {
    const warnings = [];

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ–∑–≤–æ–ª—ñ–≤
    if (!accountInfo.canTrade) {
      warnings.push('–¢–æ—Ä–≥—ñ–≤–ª—è –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–∞ –Ω–∞ –∞–∫–∞—É–Ω—Ç—ñ');
    }

    if (accountInfo.canWithdraw) {
      warnings.push('–î–æ–∑–≤—ñ–ª –Ω–∞ –≤–∏–≤–µ–¥–µ–Ω–Ω—è –∫–æ—à—Ç—ñ–≤ —É–≤—ñ–º–∫–Ω–µ–Ω–æ (—Ä–∏–∑–∏–∫ –±–µ–∑–ø–µ–∫–∏)');
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å—É –æ—Å–Ω–æ–≤–Ω–æ—ó –≤–∞–ª—é—Ç–∏
    const quoteBalance = accountInfo.balances.find(b => b.asset === config.trading.quoteAsset);
    if (quoteBalance) {
      const balance = parseFloat(quoteBalance.free);
      if (balance < config.trading.baseOrderSize) {
        warnings.push(`–ù–∏–∑—å–∫–∏–π –±–∞–ª–∞–Ω—Å ${config.trading.quoteAsset}: ${balance}`);
      }
    }

    // –õ–æ–≥—É—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è
    warnings.forEach(warning => logger.warn(`‚ö†Ô∏è [MAINNET SAFETY] ${warning}`));

    return warnings;
  }

  /**
   * –ï–∫—Å–ø–æ—Ä—Ç –∑–≤—ñ—Ç—É –ø–æ –±–µ–∑–ø–µ—Ü—ñ
   */
  generateSecurityReport() {
    this.resetDailyStatsIfNeeded();

    return {
      environment: 'mainnet',
      timestamp: new Date().toISOString(),
      safetyFeatures: this.safetyFeatures,
      dailyStats: this.dailyStats,
      limits: {
        maxOrderValue: this.safetyFeatures.maxOrderValue,
        dailyLossLimit: this.safetyFeatures.dailyLossLimit,
        remainingLossLimit: Math.max(0, this.safetyFeatures.dailyLossLimit - this.dailyStats.totalLoss)
      },
      recommendations: this.getSecurityRecommendations()
    };
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π –∑ –±–µ–∑–ø–µ–∫–∏
   */
  getSecurityRecommendations() {
    const recommendations = [];

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–µ–Ω–Ω–æ—ó –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
    if (this.dailyStats.ordersPlaced > 20) {
      recommendations.push({
        type: 'warning',
        message: '–í–∏—Å–æ–∫–∞ –¥–µ–Ω–Ω–∞ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å',
        suggestion: '–†–æ–∑–≥–ª—è–Ω—å—Ç–µ –∑–±—ñ–ª—å—à–µ–Ω–Ω—è —ñ–Ω—Ç–µ—Ä–≤–∞–ª—ñ–≤ –º—ñ–∂ –æ—Ä–¥–µ—Ä–∞–º–∏'
      });
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤—Ç—Ä–∞—Ç
    if (this.dailyStats.totalLoss > this.safetyFeatures.dailyLossLimit * 0.7) {
      recommendations.push({
        type: 'critical',
        message: '–ù–∞–±–ª–∏–∂–µ–Ω–Ω—è –¥–æ –¥–µ–Ω–Ω–æ–≥–æ –ª—ñ–º—ñ—Ç—É –≤—Ç—Ä–∞—Ç',
        suggestion: '–†–æ–∑–≥–ª—è–Ω—å—Ç–µ –∑—É–ø–∏–Ω–∫—É —Ç–æ—Ä–≥—ñ–≤–ª—ñ –¥–æ –∑–∞–≤—Ç—Ä–∞'
      });
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–∏–±—É—Ç–∫–æ–≤–æ—Å—Ç—ñ
    const totalPnL = this.dailyStats.totalProfit - this.dailyStats.totalLoss;
    if (totalPnL < 0 && Math.abs(totalPnL) > config.trading.baseOrderSize) {
      recommendations.push({
        type: 'warning',
        message: '–î–µ–Ω–Ω–∏–π –∑–±–∏—Ç–æ–∫ –ø–µ—Ä–µ–≤–∏—â—É—î –±–∞–∑–æ–≤–∏–π —Ä–æ–∑–º—ñ—Ä –æ—Ä–¥–µ—Ä–∞',
        suggestion: '–ü–µ—Ä–µ–≥–ª—è–Ω—å—Ç–µ —Ç–æ—Ä–≥–æ–≤—É —Å—Ç—Ä–∞—Ç–µ–≥—ñ—é'
      });
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –±–µ–∑–ø–µ–∫–∏
    if (!config.security.ipWhitelist.enabled) {
      recommendations.push({
        type: 'security',
        message: 'IP whitelist –Ω–µ —É–≤—ñ–º–∫–Ω–µ–Ω–æ',
        suggestion: '–£–≤—ñ–º–∫–Ω—ñ—Ç—å IP_WHITELIST_ENABLED –¥–ª—è –¥–æ–¥–∞—Ç–∫–æ–≤–æ—ó –±–µ–∑–ø–µ–∫–∏'
      });
    }

    return recommendations;
  }

  /**
   * –ê–≤–∞—Ä—ñ–π–Ω–∞ –∑—É–ø–∏–Ω–∫–∞ —Ç–æ—Ä–≥—ñ–≤–ª—ñ
   */
  async emergencyStop(reason) {
    this.auditLog('EMERGENCY_STOP', { reason }, 'critical');
    
    logger.error(`üö® –ê–í–ê–†–Ü–ô–ù–ê –ó–£–ü–ò–ù–ö–ê: ${reason}`);
    
    try {
      // –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –≤—ñ–¥–∫—Ä–∏—Ç—ñ –æ—Ä–¥–µ—Ä–∏
      const openOrders = await this.getOpenOrders();
      
      if (openOrders.length > 0) {
        logger.warn(`‚ö†Ô∏è –°–∫–∞—Å—É–≤–∞–Ω–Ω—è ${openOrders.length} –≤—ñ–¥–∫—Ä–∏—Ç–∏—Ö –æ—Ä–¥–µ—Ä—ñ–≤...`);
        
        // –°–∫–∞—Å–æ–≤—É—î–º–æ –≤—Å—ñ –≤—ñ–¥–∫—Ä–∏—Ç—ñ –æ—Ä–¥–µ—Ä–∏
        const cancelPromises = openOrders.map(order => 
          this.cancelOrder(order.symbol, order.orderId).catch(err => {
            logger.error(`–ü–æ–º–∏–ª–∫–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –æ—Ä–¥–µ—Ä–∞ ${order.orderId}:`, err);
          })
        );
        
        await Promise.allSettled(cancelPromises);
      }
      
      // –í–∏–º–∏–∫–∞—î–º–æ –≤—Å—ñ —Ñ—É–Ω–∫—Ü—ñ—ó —Ç–æ—Ä–≥—ñ–≤–ª—ñ
      this.safetyFeatures.enableOrderConfirmation = false;
      
      logger.error('üõë –¢–æ—Ä–≥—ñ–≤–ª—è –∑—É–ø–∏–Ω–µ–Ω–∞. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç—ñ—Ç—å –±–æ—Ç–∞ –¥–ª—è –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è.');
      
      return {
        stopped: true,
        reason,
        cancelledOrders: openOrders.length,
        timestamp: new Date().toISOString()
      };
      
    } catch (error) {
      this.auditLog('EMERGENCY_STOP_ERROR', { reason, error: error.message }, 'critical');
      throw error;
    }
  }

  /**
   * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤'—è mainnet –∫–ª—ñ—î–Ω—Ç–∞
   */
  async healthCheck() {
    const checks = [];

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
    try {
      const start = Date.now();
      await this.getExchangeInfo();
      const latency = Date.now() - start;
      
      checks.push({
        test: 'API Connectivity',
        status: latency < 5000 ? 'passed' : 'warning',
        details: `Latency: ${latency}ms`,
        latency
      });
    } catch (error) {
      checks.push({
        test: 'API Connectivity',
        status: 'failed',
        details: error.message
      });
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
    try {
      const accountInfo = await this.getAccountInfo();
      checks.push({
        test: 'Authentication',
        status: 'passed',
        details: `Trading: ${accountInfo.canTrade ? 'enabled' : 'disabled'}`
      });
    } catch (error) {
      checks.push({
        test: 'Authentication',
        status: 'failed',
        details: error.message
      });
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ª—ñ–º—ñ—Ç—ñ–≤
    const lossLimitUsage = (this.dailyStats.totalLoss / this.safetyFeatures.dailyLossLimit) * 100;
    checks.push({
      test: 'Daily Loss Limit',
      status: lossLimitUsage < 70 ? 'passed' : lossLimitUsage < 90 ? 'warning' : 'critical',
      details: `Used: ${lossLimitUsage.toFixed(1)}%`
    });

    return {
      environment: 'mainnet',
      overall: checks.every(c => c.status === 'passed') ? 'healthy' : 
               checks.some(c => c.status === 'critical') ? 'critical' : 'warning',
      checks,
      dailyStats: this.dailyStats
    };
  }

  /**
   * –ë–µ–∑–ø–µ—á–Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏
   */
  async safeShutdown() {
    logger.info('üîí –ë–µ–∑–ø–µ—á–Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è mainnet –∫–ª—ñ—î–Ω—Ç–∞...');
    
    this.auditLog('SAFE_SHUTDOWN', { dailyStats: this.dailyStats }, 'medium');
    
    // –ì–µ–Ω–µ—Ä—É—î–º–æ —Ñ—ñ–Ω–∞–ª—å–Ω–∏–π –∑–≤—ñ—Ç
    const finalReport = this.generateSecurityReport();
    logger.info('üìä –§—ñ–Ω–∞–ª—å–Ω–∏–π –∑–≤—ñ—Ç mainnet —Å–µ—Å—ñ—ó:', finalReport);
    
    return finalReport;
  }
}

module.exports = { MainnetClient };