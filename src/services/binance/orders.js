// src/services/binance/orders.js

const logger = require('../../utils/logger');
const config = require('../../config');
const constants = require('../../config/constants');
const { formatNumber } = require('../../utils/formatter');

/**
 * –ú–µ–Ω–µ–¥–∂–µ—Ä –æ—Ä–¥–µ—Ä—ñ–≤ –¥–ª—è Binance
 */
class OrderManager {
  constructor(binanceClient) {
    this.binanceClient = binanceClient;
  }

  /**
   * –†–æ–∑–º—ñ—â–µ–Ω–Ω—è —Ä–∏–Ω–∫–æ–≤–æ–≥–æ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É
   */
  async placeMarketBuyOrder(symbol, quantity) {
    try {
      logger.trade(`üìà –†–æ–∑–º—ñ—â–µ–Ω–Ω—è —Ä–∏–Ω–∫–æ–≤–æ–≥–æ –æ—Ä–¥–µ—Ä–∞ BUY ${symbol}, –∫—ñ–ª—å–∫—ñ—Å—Ç—å: ${quantity}`);
      
      // –Ø–∫—â–æ –≤–≤—ñ–º–∫–Ω–µ–Ω–æ —Å–∏–º—É–ª—è—Ü—ñ—é - –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –º–æ–∫–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ
      if (config.debug.simulationMode) {
        const currentPrice = await this.binanceClient.getCurrentPrice(symbol);
        return this.mockOrderResult(symbol, quantity, currentPrice, 'BUY', true);
      }
      
      const orderParams = {
        symbol,
        side: constants.ORDER_SIDES.BUY,
        type: constants.ORDER_TYPES.MARKET,
        quantity: formatNumber(quantity, 8)
      };
      
      const result = await this.binanceClient.createOrder(orderParams);
      
      return {
        success: true,
        orderId: result.orderId,
        symbol: result.symbol,
        orderType: result.type,
        side: result.side,
        quantity: parseFloat(result.origQty),
        executedQty: parseFloat(result.executedQty),
        avgPrice: this.getOrderAveragePrice(result),
        status: result.status,
        time: result.transactTime
      };
      
    } catch (error) {
      logger.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è —Ä–∏–Ω–∫–æ–≤–æ–≥–æ –æ—Ä–¥–µ—Ä–∞ BUY ${symbol}:`, error);
      return {
        success: false,
        error: error.message
      };
    }
  }

  /**
   * –†–æ–∑–º—ñ—â–µ–Ω–Ω—è –ª—ñ–º—ñ—Ç–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –ø—Ä–æ–¥–∞–∂
   */
  async placeLimitSellOrder(symbol, quantity, price) {
    try {
      logger.trade(`üìâ –†–æ–∑–º—ñ—â–µ–Ω–Ω—è –ª—ñ–º—ñ—Ç–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞ SELL ${symbol}, –∫—ñ–ª—å–∫—ñ—Å—Ç—å: ${quantity}, —Ü—ñ–Ω–∞: ${price}`);
      
      // –Ø–∫—â–æ –≤–≤—ñ–º–∫–Ω–µ–Ω–æ —Å–∏–º—É–ª—è—Ü—ñ—é - –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –º–æ–∫–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ
      if (config.debug.simulationMode) {
        return this.mockOrderResult(symbol, quantity, price, 'SELL', false);
      }
      
      const orderParams = {
        symbol,
        side: constants.ORDER_SIDES.SELL,
        type: constants.ORDER_TYPES.LIMIT,
        timeInForce: constants.TIME_IN_FORCE.GTC,
        quantity: formatNumber(quantity, 8),
        price: formatNumber(price, 8)
      };
      
      const result = await this.binanceClient.createOrder(orderParams);
      
      return {
        success: true,
        orderId: result.orderId,
        symbol: result.symbol,
        orderType: result.type,
        side: result.side,
        quantity: parseFloat(result.origQty),
        executedQty: parseFloat(result.executedQty),
        price: parseFloat(result.price),
        status: result.status,
        time: result.transactTime
      };
      
    } catch (error) {
      logger.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è –ª—ñ–º—ñ—Ç–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞ SELL ${symbol}:`, error);
      return {
        success: false,
        error: error.message
      };
    }
  }

  /**
   * –†–æ–∑–º—ñ—â–µ–Ω–Ω—è Stop Loss –æ—Ä–¥–µ—Ä–∞
   */
  async placeStopLossOrder(symbol, quantity, stopPrice) {
    try {
      logger.trade(`üõë –†–æ–∑–º—ñ—â–µ–Ω–Ω—è Stop Loss –æ—Ä–¥–µ—Ä–∞ ${symbol}, –∫—ñ–ª—å–∫—ñ—Å—Ç—å: ${quantity}, —Ü—ñ–Ω–∞: ${stopPrice}`);
      
      // –Ø–∫—â–æ –≤–≤—ñ–º–∫–Ω–µ–Ω–æ —Å–∏–º—É–ª—è—Ü—ñ—é - –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –º–æ–∫–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ
      if (config.debug.simulationMode) {
        return this.mockOrderResult(symbol, quantity, stopPrice, 'SELL', false);
      }
      
      const orderParams = {
        symbol,
        side: constants.ORDER_SIDES.SELL,
        type: constants.ORDER_TYPES.STOP_LOSS,
        timeInForce: constants.TIME_IN_FORCE.GTC,
        quantity: formatNumber(quantity, 8),
        stopPrice: formatNumber(stopPrice, 8),
        price: formatNumber(stopPrice * 0.99, 8) // –¶—ñ–Ω–∞ —Ç—Ä–æ—Ö–∏ –Ω–∏–∂—á–µ stopPrice –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–æ–≤–∞–Ω–æ–≥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
      };
      
      const result = await this.binanceClient.createOrder(orderParams);
      
      return {
        success: true,
        orderId: result.orderId,
        symbol: result.symbol,
        orderType: result.type,
        side: result.side,
        quantity: parseFloat(result.origQty),
        executedQty: parseFloat(result.executedQty),
        stopPrice: parseFloat(result.stopPrice),
        price: parseFloat(result.price),
        status: result.status,
        time: result.transactTime
      };
      
    } catch (error) {
      logger.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è Stop Loss –æ—Ä–¥–µ—Ä–∞ ${symbol}:`, error);
      return {
        success: false,
        error: error.message
      };
    }
  }

  /**
   * –†–æ–∑–º—ñ—â–µ–Ω–Ω—è OCO –æ—Ä–¥–µ—Ä–∞ (One-Cancels-Other)
   */
  async placeOCOOrder(symbol, quantity, takeProfitPrice, stopLossPrice) {
    try {
      logger.trade(`üîÑ –†–æ–∑–º—ñ—â–µ–Ω–Ω—è OCO –æ—Ä–¥–µ—Ä–∞ ${symbol}, TP: ${takeProfitPrice}, SL: ${stopLossPrice}`);
      
      // –Ø–∫—â–æ –≤–≤—ñ–º–∫–Ω–µ–Ω–æ —Å–∏–º—É–ª—è—Ü—ñ—é - –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –º–æ–∫–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ
      if (config.debug.simulationMode) {
        return {
          success: true,
          orders: [
            this.mockOrderResult(symbol, quantity, takeProfitPrice, 'SELL', false, false),
            this.mockOrderResult(symbol, quantity, stopLossPrice, 'SELL', false, false)
          ]
        };
      }
      
      const orderParams = {
        symbol,
        side: constants.ORDER_SIDES.SELL,
        quantity: formatNumber(quantity, 8),
        price: formatNumber(takeProfitPrice, 8), // –õ—ñ–º—ñ—Ç –æ—Ä–¥–µ—Ä –¥–ª—è Take Profit
        stopPrice: formatNumber(stopLossPrice, 8), // –¢—Ä–∏–≥–µ—Ä –¥–ª—è Stop Loss
        stopLimitPrice: formatNumber(stopLossPrice * 0.99, 8), // –õ—ñ–º—ñ—Ç —Ü—ñ–Ω–∞ –¥–ª—è Stop Loss
        stopLimitTimeInForce: constants.TIME_IN_FORCE.GTC
      };
      
      const result = await this.binanceClient.privateRequest(
        constants.BINANCE_ENDPOINTS.ORDER_OCO,
        orderParams,
        'POST'
      );
      
      return {
        success: true,
        orderListId: result.orderListId,
        orders: result.orders.map(order => ({
          orderId: order.orderId,
          symbol: order.symbol,
          type: order.type,
          side: order.side,
          price: parseFloat(order.price),
          quantity: parseFloat(order.origQty),
          status: order.status
        }))
      };
      
    } catch (error) {
      logger.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è OCO –æ—Ä–¥–µ—Ä–∞ ${symbol}:`, error);
      return {
        success: false,
        error: error.message
      };
    }
  }

  /**
   * –°–∫–∞—Å—É–≤–∞–Ω–Ω—è –æ—Ä–¥–µ—Ä–∞
   */
  async cancelOrder(symbol, orderId) {
    try {
      logger.trade(`‚ùå –°–∫–∞—Å—É–≤–∞–Ω–Ω—è –æ—Ä–¥–µ—Ä–∞ ${symbol}, orderId: ${orderId}`);
      
      // –Ø–∫—â–æ –≤–≤—ñ–º–∫–Ω–µ–Ω–æ —Å–∏–º—É–ª—è—Ü—ñ—é - –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –º–æ–∫–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ
      if (config.debug.simulationMode) {
        return {
          success: true,
          symbol,
          orderId,
          status: 'CANCELED'
        };
      }
      
      const result = await this.binanceClient.cancelOrder(symbol, orderId);
      
      return {
        success: true,
        orderId: result.orderId,
        symbol: result.symbol,
        status: result.status
      };
      
    } catch (error) {
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –ø–æ–º–∏–ª–∫–∞ –ø–æ–≤'—è–∑–∞–Ω–∞ –∑ —Ç–∏–º, —â–æ –æ—Ä–¥–µ—Ä –≤–∂–µ –≤–∏–∫–æ–Ω–∞–Ω–æ
      if (error.response && error.response.data &&
          (error.response.data.code === -2011 || error.response.data.msg.includes('Unknown order'))) {
        logger.warn(`‚ö†Ô∏è –û—Ä–¥–µ—Ä ${orderId} –≤–∂–µ –≤–∏–∫–æ–Ω–∞–Ω–æ –∞–±–æ —Å–∫–∞—Å–æ–≤–∞–Ω–æ`);
        return {
          success: true,
          orderId,
          symbol,
          status: 'UNKNOWN',
          message: 'Order already executed or canceled'
        };
      }
      
      logger.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –æ—Ä–¥–µ—Ä–∞ ${symbol}:`, error);
      return {
        success: false,
        error: error.message
      };
    }
  }

  /**
   * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–µ—Ä–µ–¥–Ω—å–æ—ó —Ü—ñ–Ω–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –æ—Ä–¥–µ—Ä–∞
   */
  getOrderAveragePrice(orderResult) {
    // –î–ª—è —Ä–∏–Ω–∫–æ–≤–∏—Ö –æ—Ä–¥–µ—Ä—ñ–≤ Binance –Ω–µ –ø–æ–≤–µ—Ä—Ç–∞—î —Å–µ—Ä–µ–¥–Ω—é —Ü—ñ–Ω—É –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
    // –¢–æ–º—É –º–∏ –æ—Ç—Ä–∏–º—É—î–º–æ —ó—ó –∑ —ñ—Å—Ç–æ—Ä—ñ—ó —Ç–æ—Ä–≥—ñ–≤
    return new Promise(async (resolve) => {
      try {
        // –Ø–∫—â–æ –æ—Ä–¥–µ—Ä –Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–æ - –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ 0
        if (orderResult.status !== constants.ORDER_STATUS.FILLED) {
          return resolve(0);
        }
        
        // –û—Ç—Ä–∏–º—É—î–º–æ —Ç–æ—Ä–≥–∏ –¥–ª—è –æ—Ä–¥–µ—Ä–∞
        const trades = await this.binanceClient.getMyTrades(
          orderResult.symbol,
          { orderId: orderResult.orderId }
        );
        
        if (!trades || trades.length === 0) {
          return resolve(0);
        }
        
        // –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ —Å–µ—Ä–µ–¥–Ω—é —Ü—ñ–Ω—É
        let totalQty = 0;
        let totalValue = 0;
        
        for (const trade of trades) {
          const qty = parseFloat(trade.qty);
          const price = parseFloat(trade.price);
          
          totalQty += qty;
          totalValue += qty * price;
        }
        
        const avgPrice = totalValue / totalQty;
        resolve(avgPrice);
        
      } catch (error) {
        logger.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–µ—Ä–µ–¥–Ω—å–æ—ó —Ü—ñ–Ω–∏:', error);
        resolve(0);
      }
    });
  }

  /**
   * –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –º–æ–∫–æ–≤–∞–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É –æ—Ä–¥–µ—Ä–∞ –¥–ª—è —Å–∏–º—É–ª—è—Ü—ñ—ó
   */
  mockOrderResult(symbol, quantity, price, side, isFilled = false, isMarket = true) {
    const orderId = Math.floor(Math.random() * 1000000000);
    
    return {
      success: true,
      orderId,
      symbol,
      orderType: isMarket ? constants.ORDER_TYPES.MARKET : constants.ORDER_TYPES.LIMIT,
      side,
      quantity,
      executedQty: isFilled ? quantity : 0,
      avgPrice: price,
      price,
      status: isFilled ? constants.ORDER_STATUS.FILLED : constants.ORDER_STATUS.NEW,
      time: Date.now(),
      isSimulated: true
    };
  }
}

module.exports = { OrderManager };