// src/services/monitoring/polling.js

const EventEmitter = require('events');
const config = require('../../config');
const logger = require('../../utils/logger');
const { BinanceClient } = require('../binance/client');

/**
 * Polling –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –Ω–æ–≤–∏—Ö –ª—ñ—Å—Ç–∏–Ω–≥—ñ–≤
 * –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è —è–∫ —Ä–µ–∑–µ—Ä–≤–Ω–∏–π –º–µ—Ç–æ–¥, —è–∫—â–æ WebSocket –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π
 */
class PollingMonitor extends EventEmitter {
  constructor(binanceClient) {
    super();
    this.binanceClient = binanceClient;
    this.knownSymbols = new Set();
    this.pollingInterval = null;
    this.isRunning = false;
    this.lastCheckTime = 0;
  }

  /**
   * –ó–∞–ø—É—Å–∫ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É
   */
  async start() {
    try {
      logger.info('üîÑ –ó–∞–ø—É—Å–∫ Polling –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É...');
      
      // –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤–∏–π —Å–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª—ñ–≤
      await this.loadInitialSymbols();
      
      // –ó–∞–ø—É—Å–∫–∞—î–º–æ –ø–µ—Ä—ñ–æ–¥–∏—á–Ω—É –ø–µ—Ä–µ–≤—ñ—Ä–∫—É
      this.startPolling();
      
      this.isRunning = true;
      logger.info('‚úÖ Polling –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ');
      
    } catch (error) {
      logger.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É Polling –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É:', error);
      throw error;
    }
  }

  /**
   * –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ —Å–ø–∏—Å–∫—É —Å–∏–º–≤–æ–ª—ñ–≤
   */
  async loadInitialSymbols() {
    try {
      const exchangeInfo = await this.binanceClient.getExchangeInfo();
      
      // –§—ñ–ª—å—Ç—Ä—É—î–º–æ —Å–∏–º–≤–æ–ª–∏ –∑–≥—ñ–¥–Ω–æ –∑ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—î—é
      const symbols = exchangeInfo.symbols
        .filter(s => {
          // –§—ñ–ª—å—Ç—Ä—É—î–º–æ –∑–∞ quote asset
          if (!s.symbol.endsWith(config.trading.quoteAsset)) return false;
          
          // –§—ñ–ª—å—Ç—Ä—É—î–º–æ –∞–∫—Ç–∏–≤–Ω—ñ –ø–∞—Ä–∏
          if (s.status !== 'TRADING') return false;
          
          // –í–∏–∫–ª—é—á–∞—î–º–æ —Å—Ç–µ–π–±–ª–∫–æ—ó–Ω–∏ —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
          if (config.trading.filters.excludeStablecoins) {
            const stablecoins = ['USDC', 'BUSD', 'TUSD', 'USDP', 'DAI'];
            const baseAsset = s.baseAsset;
            if (stablecoins.includes(baseAsset)) return false;
          }
          
          // –í–∏–∫–ª—é—á–∞—î–º–æ –ø–µ–≤–Ω—ñ —Ç–æ–∫–µ–Ω–∏
          if (config.trading.filters.excludeTokens.includes(s.baseAsset)) {
            return false;
          }
          
          return true;
        })
        .map(s => s.symbol);
      
      this.knownSymbols = new Set(symbols);
      logger.info(`üìä –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ ${this.knownSymbols.size} —Ç–æ—Ä–≥–æ–≤–∏—Ö –ø–∞—Ä`);
      
    } catch (error) {
      logger.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–∏–º–≤–æ–ª—ñ–≤:', error);
      throw error;
    }
  }

  /**
   * –ó–∞–ø—É—Å–∫ –ø–µ—Ä—ñ–æ–¥–∏—á–Ω–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
   */
  startPolling() {
    const pollingInterval = config.monitoring.pollingInterval;
    
    this.pollingInterval = setInterval(async () => {
      try {
        await this.checkForNewListings();
      } catch (error) {
        logger.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –Ω–æ–≤–∏—Ö –ª—ñ—Å—Ç–∏–Ω–≥—ñ–≤:', error);
        this.emit('error', error);
      }
    }, pollingInterval);
    
    logger.info(`‚è±Ô∏è Polling –∑–∞–ø—É—â–µ–Ω–æ –∑ —ñ–Ω—Ç–µ—Ä–≤–∞–ª–æ–º ${pollingInterval}ms`);
  }

  /**
   * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–æ–≤–∏—Ö –ª—ñ—Å—Ç–∏–Ω–≥—ñ–≤
   */
  async checkForNewListings() {
    try {
      this.lastCheckTime = Date.now();
      
      // –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—ñ —Ü—ñ–Ω–∏ –≤—Å—ñ—Ö —Å–∏–º–≤–æ–ª—ñ–≤
      const tickers = await this.binanceClient.get24hrStats();
      
      // –°–ø–∏—Å–æ–∫ –¥–ª—è –Ω–æ–≤–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤
      const newSymbols = [];
      
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ–∂–µ–Ω —Ç—ñ–∫–µ—Ä
      for (const ticker of tickers) {
        const symbol = ticker.symbol;
        
        // –§—ñ–ª—å—Ç—Ä—É—î–º–æ –∑–∞ –Ω–∞—à–∏–º–∏ –∫—Ä–∏—Ç–µ—Ä—ñ—è–º–∏
        if (!symbol.endsWith(config.trading.quoteAsset)) continue;
        
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ –Ω–æ–≤–∏–π —Å–∏–º–≤–æ–ª
        if (!this.knownSymbols.has(symbol)) {
          logger.info(`üéâ –ó–Ω–∞–π–¥–µ–Ω–æ –Ω–æ–≤–∏–π –ª—ñ—Å—Ç–∏–Ω–≥ —á–µ—Ä–µ–∑ polling: ${symbol}`);
          
          // –î–æ–¥–∞—î–º–æ –¥–æ —Å–ø–∏—Å–∫—É –Ω–æ–≤–∏—Ö
          newSymbols.push(symbol);
          
          // –î–æ–¥–∞—î–º–æ –¥–æ –≤—ñ–¥–æ–º–∏—Ö
          this.knownSymbols.add(symbol);
          
          // –°—Ç–≤–æ—Ä—é—î–º–æ –æ–±'—î–∫—Ç –ª—ñ—Å—Ç–∏–Ω–≥—É
          const listingData = {
            symbol: symbol,
            price: parseFloat(ticker.lastPrice),
            volume: parseFloat(ticker.volume),
            quoteVolume: parseFloat(ticker.quoteVolume),
            priceChange: parseFloat(ticker.priceChange),
            priceChangePercent: parseFloat(ticker.priceChangePercent),
            timestamp: Date.now()
          };
          
          // –ï–º—ñ—Ç—É—î–º–æ –ø–æ–¥—ñ—é
          this.emit('newListing', listingData);
        }
      }
      
      // –Ø–∫—â–æ –∑–Ω–∞–π–¥–µ–Ω–æ –Ω–æ–≤—ñ —Å–∏–º–≤–æ–ª–∏ - –ª–æ–≥—É—î–º–æ
      if (newSymbols.length > 0) {
        logger.info(`üìä –ó–Ω–∞–π–¥–µ–Ω–æ ${newSymbols.length} –Ω–æ–≤–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤: ${newSymbols.join(', ')}`);
      }
      
    } catch (error) {
      logger.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ –Ω–æ–≤–∏—Ö –ª—ñ—Å—Ç–∏–Ω–≥—ñ–≤:', error);
      throw error;
    }
  }

  /**
   * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–µ–ª—ñ—Å—Ç–∏–Ω–≥—É
   */
  async checkDelisting() {
    try {
      // –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ —Å–∏–º–≤–æ–ª–∏
      const exchangeInfo = await this.binanceClient.getExchangeInfo();
      
      // –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ –≤ –º–Ω–æ–∂–∏–Ω—É –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –ø–æ—à—É–∫—É
      const currentSymbols = new Set(
        exchangeInfo.symbols
          .filter(s => s.status === 'TRADING' && s.symbol.endsWith(config.trading.quoteAsset))
          .map(s => s.symbol)
      );
      
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤—ñ–¥–æ–º—ñ —Å–∏–º–≤–æ–ª–∏
      const delisted = [...this.knownSymbols].filter(s => !currentSymbols.has(s));
      
      // –Ø–∫—â–æ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–µ–ª—ñ—Å—Ç–∏–Ω–≥–∏ - –ª–æ–≥—É—î–º–æ —Ç–∞ –µ–º—ñ—Ç—É—î–º–æ –ø–æ–¥—ñ—é
      if (delisted.length > 0) {
        logger.warn(`‚ö†Ô∏è –î–µ–ª—ñ—Å—Ç–∏–Ω–≥ —Å–∏–º–≤–æ–ª—ñ–≤: ${delisted.join(', ')}`);
        
        // –í–∏–¥–∞–ª—è—î–º–æ –∑ –≤—ñ–¥–æ–º–∏—Ö
        delisted.forEach(s => this.knownSymbols.delete(s));
        
        // –ï–º—ñ—Ç—É—î–º–æ –ø–æ–¥—ñ—é
        this.emit('delisting', { symbols: delisted });
      }
      
    } catch (error) {
      logger.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ –¥–µ–ª—ñ—Å—Ç–∏–Ω–≥—É:', error);
    }
  }

  /**
   * –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É —Å–∏–º–≤–æ–ª—ñ–≤
   */
  async refreshSymbolsList() {
    try {
      await this.loadInitialSymbols();
    } catch (error) {
      logger.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É —Å–∏–º–≤–æ–ª—ñ–≤:', error);
      this.emit('error', error);
    }
  }

  /**
   * –ó—É–ø–∏–Ω–∫–∞ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É
   */
  async stop() {
    logger.info('‚èπÔ∏è –ó—É–ø–∏–Ω–∫–∞ Polling –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É...');
    
    if (this.pollingInterval) {
      clearInterval(this.pollingInterval);
      this.pollingInterval = null;
    }
    
    this.isRunning = false;
    this.knownSymbols.clear();
    
    logger.info('‚úÖ Polling –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∑—É–ø–∏–Ω–µ–Ω–æ');
  }

  /**
   * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É
   */
  getStatus() {
    return {
      isRunning: this.isRunning,
      knownSymbols: this.knownSymbols.size,
      lastCheckTime: this.lastCheckTime,
      pollingInterval: config.monitoring.pollingInterval,
      uptime: this.lastCheckTime ? Date.now() - this.lastCheckTime : 0
    };
  }
}

module.exports = { PollingMonitor };