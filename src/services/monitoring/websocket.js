// src/services/monitoring/websocket.js

const WebSocket = require('ws');
const EventEmitter = require('events');
const config = require('../../config');
const logger = require('../../utils/logger');
const { BinanceClient } = require('../binance/client');

/**
 * WebSocket –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –Ω–æ–≤–∏—Ö –ª—ñ—Å—Ç–∏–Ω–≥—ñ–≤
 * –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î Binance WebSocket Streams
 */
class WebSocketMonitor extends EventEmitter {
  constructor() {
    super();
    this.ws = null;
    this.isConnected = false;
    this.reconnectAttempts = 0;
    this.heartbeatInterval = null;
    this.lastHeartbeat = null;
    this.knownSymbols = new Set();
    this.subscriptions = new Set();
    
    // Binance REST –∫–ª—ñ—î–Ω—Ç –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—á–∞—Ç–∫–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö
    this.binanceClient = new BinanceClient();
  }

  /**
   * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ç–∞ –∑–∞–ø—É—Å–∫ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É
   */
  async start() {
    try {
      logger.info('üöÄ –ó–∞–ø—É—Å–∫ WebSocket –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É...');
      
      // –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤–∏–π —Å–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª—ñ–≤
      await this.loadInitialSymbols();
      
      // –ü—ñ–¥–∫–ª—é—á–∞—î–º–æ—Å—å –¥–æ WebSocket
      await this.connect();
      
      // –ó–∞–ø—É—Å–∫–∞—î–º–æ heartbeat
      this.startHeartbeat();
      
      logger.info('‚úÖ WebSocket –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ');
    } catch (error) {
      logger.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É WebSocket –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É:', error);
      throw error;
    }
  }

  /**
   * –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ —Å–ø–∏—Å–∫—É —Å–∏–º–≤–æ–ª—ñ–≤
   */
  async loadInitialSymbols() {
    try {
      const exchangeInfo = await this.binanceClient.getExchangeInfo();
      
      // –§—ñ–ª—å—Ç—Ä—É—î–º–æ —Å–∏–º–≤–æ–ª–∏ –∑–≥—ñ–¥–Ω–æ –∑ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—î—é
      const symbols = exchangeInfo.symbols
        .filter(s => {
          // –§—ñ–ª—å—Ç—Ä—É—î–º–æ –∑–∞ quote asset
          if (!s.symbol.endsWith(config.trading.quoteAsset)) return false;
          
          // –§—ñ–ª—å—Ç—Ä—É—î–º–æ –∞–∫—Ç–∏–≤–Ω—ñ –ø–∞—Ä–∏
          if (s.status !== 'TRADING') return false;
          
          // –í–∏–∫–ª—é—á–∞—î–º–æ —Å—Ç–µ–π–±–ª–∫–æ—ó–Ω–∏ —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
          if (config.trading.filters.excludeStablecoins) {
            const stablecoins = ['USDC', 'BUSD', 'TUSD', 'USDP', 'DAI'];
            const baseAsset = s.baseAsset;
            if (stablecoins.includes(baseAsset)) return false;
          }
          
          // –í–∏–∫–ª—é—á–∞—î–º–æ –ø–µ–≤–Ω—ñ —Ç–æ–∫–µ–Ω–∏
          if (config.trading.filters.excludeTokens.includes(s.baseAsset)) {
            return false;
          }
          
          return true;
        })
        .map(s => s.symbol);
      
      this.knownSymbols = new Set(symbols);
      logger.info(`üìä –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ ${this.knownSymbols.size} —Ç–æ—Ä–≥–æ–≤–∏—Ö –ø–∞—Ä`);
      
    } catch (error) {
      logger.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–∏–º–≤–æ–ª—ñ–≤:', error);
      throw error;
    }
  }

  /**
   * –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ WebSocket
   */
  async connect() {
    return new Promise((resolve, reject) => {
      try {
        // –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ–º–±—ñ–Ω–æ–≤–∞–Ω–∏–π —Å—Ç—Ä—ñ–º
        const streams = [
          '!miniTicker@arr', // –í—Å—ñ –º—ñ–Ω—ñ —Ç—ñ–∫–µ—Ä–∏ –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –Ω–æ–≤–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤
          '!ticker@arr', // –ü–æ–≤–Ω—ñ —Ç—ñ–∫–µ—Ä–∏ –¥–ª—è –¥–æ–¥–∞—Ç–∫–æ–≤–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó
        ];

        // –í–∏–±—ñ—Ä endpoint –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ç–∏–ø—É —Å—Ç—Ä—ñ–º—É —Ç–∞ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
        let wsUrl;
        if (config.binance.useTestnet) {
          // –î–ª—è testnet –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –±–∞–∑–æ–≤–∏–π WebSocket URL
          wsUrl = 'wss://testnet.binance.vision/ws';
        } else {
          // –î–ª—è mainnet –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–æ–º–±—ñ–Ω–æ–≤–∞–Ω–∏–π —Å—Ç—Ä—ñ–º
          wsUrl = `${config.binance.activeConfig.wsBaseURL}/stream?streams=${streams.join('/')}`;
        }

        logger.debug(`üîå –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ WebSocket: ${wsUrl}`);
        
        this.ws = new WebSocket(wsUrl);
        
        // –û–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π
        this.ws.on('open', () => {
          this.isConnected = true;
          this.reconnectAttempts = 0;
          logger.info('‚úÖ WebSocket –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ');

          // –î–ª—è testnet –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ –ø–æ—Ç–æ–∫–∏ –ø—ñ—Å–ª—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
          if (config.binance.useTestnet) {
            // –ü—ñ–¥–ø–∏—Å—É—î–º–æ—Å—è –Ω–∞ –∫–æ–∂–µ–Ω –ø–æ—Ç—ñ–∫ –æ–∫—Ä–µ–º–æ
            streams.forEach(stream => {
              const subscribeMessage = {
                method: 'SUBSCRIBE',
                params: [stream],
                id: Date.now()
              };
              logger.debug(`üì° –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø—ñ–¥–ø–∏—Å–∫—É –Ω–∞ ${stream}`);
              this.ws.send(JSON.stringify(subscribeMessage));
            });
          }

          this.emit('connected');
          resolve();
        });
        
        this.ws.on('message', (data) => {
          this.handleMessage(data);
        });
        
        this.ws.on('error', (error) => {
          logger.error('‚ùå WebSocket –ø–æ–º–∏–ª–∫–∞:', error);
          this.emit('error', error);
        });
        
        this.ws.on('close', (code, reason) => {
          this.isConnected = false;
          logger.warn(`‚ö†Ô∏è WebSocket –∑–∞–∫—Ä–∏—Ç–æ. –ö–æ–¥: ${code}, –ü—Ä–∏—á–∏–Ω–∞: ${reason}`);
          this.emit('disconnected', { code, reason });
          
          // –°–ø—Ä–æ–±–∞ –ø–µ—Ä–µ–ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
          this.handleReconnect();
        });
        
        this.ws.on('ping', () => {
          this.ws.pong();
          this.lastHeartbeat = Date.now();
        });
        
        // –¢–∞–π–º–∞—É—Ç –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
        setTimeout(() => {
          if (!this.isConnected) {
            reject(new Error('WebSocket connection timeout'));
          }
        }, config.binance.timeout.ws);
        
      } catch (error) {
        reject(error);
      }
    });
  }

  /**
   * –û–±—Ä–æ–±–∫–∞ –≤—Ö—ñ–¥–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
   */
  handleMessage(data) {
    try {
      const message = JSON.parse(data);
      
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç–∏–ø –ø–æ—Ç–æ–∫—É
      if (message.stream === '!miniTicker@arr') {
        this.handleMiniTickerArray(message.data);
      } else if (message.stream === '!ticker@arr') {
        this.handleTickerArray(message.data);
      } else if (message.data) {
        // –û–±—Ä–æ–±–∫–∞ —ñ–Ω—à–∏—Ö —Ç–∏–ø—ñ–≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
        this.handleStreamData(message);
      }
      
    } catch (error) {
      logger.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:', error);
    }
  }

  /**
   * –û–±—Ä–æ–±–∫–∞ –º–∞—Å–∏–≤—É –º—ñ–Ω—ñ —Ç—ñ–∫–µ—Ä—ñ–≤
   */
  handleMiniTickerArray(tickers) {
    const currentSymbols = new Set();
    
    for (const ticker of tickers) {
      const symbol = ticker.s;
      
      // –§—ñ–ª—å—Ç—Ä—É—î–º–æ –∑–∞ –Ω–∞—à–∏–º–∏ –∫—Ä–∏—Ç–µ—Ä—ñ—è–º–∏
      if (!symbol.endsWith(config.trading.quoteAsset)) continue;
      
      currentSymbols.add(symbol);
      
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ –Ω–æ–≤–∏–π —Å–∏–º–≤–æ–ª
      if (!this.knownSymbols.has(symbol)) {
        logger.info(`üéâ –ó–Ω–∞–π–¥–µ–Ω–æ –Ω–æ–≤–∏–π –ª—ñ—Å—Ç–∏–Ω–≥: ${symbol}`);
        
        // –ï–º—ñ—Ç—É—î–º–æ –ø–æ–¥—ñ—é –Ω–æ–≤–æ–≥–æ –ª—ñ—Å—Ç–∏–Ω–≥—É –∑ –¥–æ–¥–∞—Ç–∫–æ–≤–∏–º–∏ –¥–∞–Ω–∏–º–∏
        this.emit('newListing', {
          symbol: symbol,
          price: parseFloat(ticker.c), // –ü–æ—Ç–æ—á–Ω–∞ —Ü—ñ–Ω–∞
          volume: parseFloat(ticker.v), // –û–±—Å—è–≥ –∑–∞ 24 –≥–æ–¥–∏–Ω–∏
          quoteVolume: parseFloat(ticker.q), // –û–±—Å—è–≥ –≤ quote –≤–∞–ª—é—Ç—ñ
          priceChange: parseFloat(ticker.p), // –ó–º—ñ–Ω–∞ —Ü—ñ–Ω–∏
          priceChangePercent: parseFloat(ticker.P), // –ó–º—ñ–Ω–∞ —Ü—ñ–Ω–∏ —É –≤—ñ–¥—Å–æ—Ç–∫–∞—Ö
          timestamp: Date.now()
        });
        
        // –î–æ–¥–∞—î–º–æ –¥–æ –≤—ñ–¥–æ–º–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤
        this.knownSymbols.add(symbol);
      }
    }
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –±—É–ª–∏ –¥–µ–ª—ñ—Å—Ç–∏–Ω–≥–∏ (–Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–æ, –∞–ª–µ –∫–æ—Ä–∏—Å–Ω–æ –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è)
    const delisted = [...this.knownSymbols].filter(s => !currentSymbols.has(s));
    if (delisted.length > 0) {
      logger.warn(`‚ö†Ô∏è –î–µ–ª—ñ—Å—Ç–∏–Ω–≥ —Å–∏–º–≤–æ–ª—ñ–≤: ${delisted.join(', ')}`);
      delisted.forEach(s => this.knownSymbols.delete(s));
      this.emit('delisting', { symbols: delisted });
    }
  }

  /**
   * –û–±—Ä–æ–±–∫–∞ –º–∞—Å–∏–≤—É –ø–æ–≤–Ω–∏—Ö —Ç—ñ–∫–µ—Ä—ñ–≤
   */
  handleTickerArray(tickers) {
    // –ú–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –¥–ª—è –¥–æ–¥–∞—Ç–∫–æ–≤–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –Ω–æ–≤—ñ –ª—ñ—Å—Ç–∏–Ω–≥–∏
    for (const ticker of tickers) {
      if (!ticker.s.endsWith(config.trading.quoteAsset)) continue;
      
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –æ–±—Å—è–≥–∏ –¥–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó
      const volume24h = parseFloat(ticker.q); // Quote volume
      
      if (volume24h >= config.trading.filters.minVolume24h) {
        this.emit('highVolumeTicker', {
          symbol: ticker.s,
          volume24h: volume24h,
          price: parseFloat(ticker.c),
          high24h: parseFloat(ticker.h),
          low24h: parseFloat(ticker.l),
          trades24h: parseInt(ticker.n)
        });
      }
    }
  }

  /**
   * –û–±—Ä–æ–±–∫–∞ —ñ–Ω—à–∏—Ö stream –¥–∞–Ω–∏—Ö
   */
  handleStreamData(message) {
    // –ú–æ–∂–Ω–∞ —Ä–æ–∑—à–∏—Ä–∏—Ç–∏ –¥–ª—è –æ–±—Ä–æ–±–∫–∏ —ñ–Ω—à–∏—Ö —Ç–∏–ø—ñ–≤ –ø–æ—Ç–æ–∫—ñ–≤
    this.emit('streamData', message);
  }

  /**
   * Heartbeat –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∑'—î–¥–Ω–∞–Ω–Ω—è
   */
  startHeartbeat() {
    this.heartbeatInterval = setInterval(() => {
      if (!this.isConnected) return;
      
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∞—Å –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ heartbeat
      if (this.lastHeartbeat && 
          Date.now() - this.lastHeartbeat > config.monitoring.heartbeat.timeout) {
        logger.warn('‚ö†Ô∏è WebSocket heartbeat timeout');
        this.ws.terminate();
        this.handleReconnect();
        return;
      }
      
      // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ ping
      if (this.ws.readyState === WebSocket.OPEN) {
        this.ws.ping();
      }
      
    }, config.monitoring.heartbeat.interval);
  }

  /**
   * –û–±—Ä–æ–±–∫–∞ –ø–µ—Ä–µ–ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
   */
  async handleReconnect() {
    if (this.reconnectAttempts >= config.monitoring.reconnect.maxAttempts) {
      logger.error('‚ùå –í–∏—á–µ—Ä–ø–∞–Ω–æ —Å–ø—Ä–æ–±–∏ –ø–µ—Ä–µ–ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è');
      this.emit('reconnectFailed');
      return;
    }
    
    this.reconnectAttempts++;
    const delay = config.monitoring.reconnect.delay * this.reconnectAttempts;
    
    logger.info(`üîÑ –°–ø—Ä–æ–±–∞ –ø–µ—Ä–µ–ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è ${this.reconnectAttempts}/${config.monitoring.reconnect.maxAttempts} —á–µ—Ä–µ–∑ ${delay}ms`);
    
    setTimeout(async () => {
      try {
        await this.connect();
      } catch (error) {
        logger.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è:', error);
        this.handleReconnect();
      }
    }, delay);
  }

  /**
   * –ü—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π —Å–∏–º–≤–æ–ª (–¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É)
   */
  async subscribeToSymbol(symbol) {
    if (this.subscriptions.has(symbol)) return;
    
    try {
      const streams = [
        `${symbol.toLowerCase()}@trade`, // –£–≥–æ–¥–∏
        `${symbol.toLowerCase()}@depth20`, // –°—Ç–∞–∫–∞–Ω
        `${symbol.toLowerCase()}@kline_1m` // –°–≤—ñ—á–∫–∏
      ];
      
      // –î–æ–¥–∞—î–º–æ –Ω–æ–≤—ñ –ø–æ—Ç–æ–∫–∏ –¥–æ —ñ—Å–Ω—É—é—á–æ–≥–æ –∑'—î–¥–Ω–∞–Ω–Ω—è
      const subscribeMessage = {
        method: 'SUBSCRIBE',
        params: streams,
        id: Date.now()
      };
      
      if (this.ws && this.ws.readyState === WebSocket.OPEN) {
        this.ws.send(JSON.stringify(subscribeMessage));
        this.subscriptions.add(symbol);
        logger.debug(`üì° –ü—ñ–¥–ø–∏—Å–∞–Ω–æ –Ω–∞ ${symbol}`);
      }
      
    } catch (error) {
      logger.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–ø–∏—Å–∫–∏ –Ω–∞ ${symbol}:`, error);
    }
  }

  /**
   * –í—ñ–¥–ø–∏—Å–∫–∞ –≤—ñ–¥ —Å–∏–º–≤–æ–ª—É
   */
  async unsubscribeFromSymbol(symbol) {
    if (!this.subscriptions.has(symbol)) return;
    
    try {
      const streams = [
        `${symbol.toLowerCase()}@trade`,
        `${symbol.toLowerCase()}@depth20`,
        `${symbol.toLowerCase()}@kline_1m`
      ];
      
      const unsubscribeMessage = {
        method: 'UNSUBSCRIBE',
        params: streams,
        id: Date.now()
      };
      
      if (this.ws && this.ws.readyState === WebSocket.OPEN) {
        this.ws.send(JSON.stringify(unsubscribeMessage));
        this.subscriptions.delete(symbol);
        logger.debug(`üì° –í—ñ–¥–ø–∏—Å–∞–Ω–æ –≤—ñ–¥ ${symbol}`);
      }
      
    } catch (error) {
      logger.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø–∏—Å–∫–∏ –≤—ñ–¥ ${symbol}:`, error);
    }
  }

  /**
   * –ó—É–ø–∏–Ω–∫–∞ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É
   */
  async stop() {
    logger.info('‚èπÔ∏è –ó—É–ø–∏–Ω–∫–∞ WebSocket –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É...');
    
    // –ó—É–ø–∏–Ω—è—î–º–æ heartbeat
    if (this.heartbeatInterval) {
      clearInterval(this.heartbeatInterval);
      this.heartbeatInterval = null;
    }
    
    // –ó–∞–∫—Ä–∏–≤–∞—î–º–æ WebSocket
    if (this.ws) {
      this.ws.removeAllListeners();
      if (this.ws.readyState === WebSocket.OPEN) {
        this.ws.close(1000, 'Normal closure');
      }
      this.ws = null;
    }
    
    this.isConnected = false;
    this.knownSymbols.clear();
    this.subscriptions.clear();
    
    logger.info('‚úÖ WebSocket –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∑—É–ø–∏–Ω–µ–Ω–æ');
  }

  /**
   * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
   */
  getStatus() {
    return {
      isConnected: this.isConnected,
      reconnectAttempts: this.reconnectAttempts,
      knownSymbols: this.knownSymbols.size,
      subscriptions: this.subscriptions.size,
      lastHeartbeat: this.lastHeartbeat,
      uptime: this.lastHeartbeat ? Date.now() - this.lastHeartbeat : 0
    };
  }
}

module.exports = { WebSocketMonitor };