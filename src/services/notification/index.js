// src/services/notification/index.js

const TelegramBot = require('node-telegram-bot-api');
const nodemailer = require('nodemailer');
const axios = require('axios');
const config = require('../../config');
const logger = require('../../utils/logger');
const constants = require('../../config/constants');

/**
 * –°–µ—Ä–≤—ñ—Å –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Å–ø–æ–≤—ñ—â–µ–Ω—å (Telegram, Email, Discord)
 */
class NotificationService {
  constructor() {
    this.telegramBot = null;
    this.emailTransporter = null;
    this.isInitialized = false;
  }

  /**
   * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–µ—Ä–≤—ñ—Å—É —Å–ø–æ–≤—ñ—â–µ–Ω—å
   */
  async initialize() {
    try {
      logger.info('üîî –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–µ—Ä–≤—ñ—Å—É —Å–ø–æ–≤—ñ—â–µ–Ω—å...');
      
      // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Telegram –±–æ—Ç–∞
      if (config.notifications.telegram.enabled) {
        await this.initializeTelegram();
      }
      
      // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Email
      if (config.notifications.email.enabled) {
        await this.initializeEmail();
      }
      
      this.isInitialized = true;
      logger.info('‚úÖ –°–µ—Ä–≤—ñ—Å —Å–ø–æ–≤—ñ—â–µ–Ω—å —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
      
    } catch (error) {
      logger.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó —Å–µ—Ä–≤—ñ—Å—É —Å–ø–æ–≤—ñ—â–µ–Ω—å:', error);
      // –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ —Ä–æ–±–æ—Ç—É –Ω–∞–≤—ñ—Ç—å –±–µ–∑ —Å–ø–æ–≤—ñ—â–µ–Ω—å
    }
  }

  /**
   * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Telegram –±–æ—Ç–∞
   */
  async initializeTelegram() {
    try {
      const token = config.notifications.telegram.botToken;
      
      if (!token) {
        throw new Error('–ù–µ –≤–∫–∞–∑–∞–Ω–æ —Ç–æ–∫–µ–Ω Telegram –±–æ—Ç–∞');
      }
      
      this.telegramBot = new TelegramBot(token, { polling: false });
      logger.info('‚úÖ Telegram –±–æ—Ç —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
      
      // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ç–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
      await this.sendTelegramMessage('ü§ñ –ë—ñ–Ω–∞–Ω—Å –ª—ñ—Å—Ç–∏–Ω–≥ –±–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ!');
      
    } catch (error) {
      logger.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó Telegram –±–æ—Ç–∞:', error);
      this.telegramBot = null;
    }
  }

  /**
   * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Email —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É
   */
  async initializeEmail() {
    try {
      const { smtp } = config.notifications.email;
      
      if (!smtp.host || !smtp.user || !smtp.pass) {
        throw new Error('–ù–µ –≤–∫–∞–∑–∞–Ω—ñ SMTP –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è');
      }
      
      this.emailTransporter = nodemailer.createTransport({
        host: smtp.host,
        port: smtp.port,
        secure: smtp.secure,
        auth: {
          user: smtp.user,
          pass: smtp.pass
        }
      });
      
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
      await this.emailTransporter.verify();
      logger.info('‚úÖ Email —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
      
    } catch (error) {
      logger.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó Email —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É:', error);
      this.emailTransporter = null;
    }
  }

  /**
   * –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
   */
  async send(type, data) {
    if (!this.isInitialized) {
      logger.warn('‚ö†Ô∏è –°–µ—Ä–≤—ñ—Å —Å–ø–æ–≤—ñ—â–µ–Ω—å –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
      return false;
    }
    
    try {
      let notificationType = constants.NOTIFICATION_TYPES.INFO;
      let title = '';
      let message = '';
      
      // –§–æ—Ä–º—É—î–º–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ —Ç–∏–ø—É
      switch (type) {
        case 'new_listing':
          if (!config.notifications.telegram.notifyOnNewListing) return;
          
          title = 'üéâ –ù–æ–≤–∏–π –ª—ñ—Å—Ç–∏–Ω–≥';
          message = this.formatNewListingMessage(data);
          break;
          
        case 'buy_executed':
          if (!config.notifications.telegram.notifyOnBuy) return;
          
          title = 'üõí –í–∏–∫–æ–Ω–∞–Ω–æ –ø–æ–∫—É–ø–∫—É';
          message = this.formatBuyMessage(data);
          break;
          
        case 'take_profit_hit':
        case 'stop_loss_hit':
        case 'position_closed':
          if (!config.notifications.telegram.notifyOnSell) return;
          
          title = type === 'take_profit_hit' ? 'üí∞ Take Profit' : 'üõë Stop Loss';
          message = this.formatSellMessage(data);
          break;
          
        case 'error':
          if (!config.notifications.telegram.notifyOnError) return;
          
          notificationType = constants.NOTIFICATION_TYPES.ERROR;
          title = '‚ùå –ü–æ–º–∏–ª–∫–∞';
          message = this.formatErrorMessage(data);
          break;
          
        case 'warning':
          notificationType = constants.NOTIFICATION_TYPES.WARNING;
          title = '‚ö†Ô∏è –ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è';
          message = this.formatWarningMessage(data);
          break;
          
        case 'bot_started':
          title = 'üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ';
          message = this.formatBotStartedMessage(data);
          break;
          
        case 'bot_stopped':
          title = '‚èπÔ∏è –ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ';
          message = this.formatBotStoppedMessage(data);
          break;
          
        default:
          title = '‚ÑπÔ∏è –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è';
          message = JSON.stringify(data, null, 2);
      }
      
      // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è —á–µ—Ä–µ–∑ —Ä—ñ–∑–Ω—ñ –∫–∞–Ω–∞–ª–∏
      const results = await Promise.all([
        this.sendTelegramMessage(`${title}\n\n${message}`),
        this.sendEmailNotification(title, message, notificationType),
        this.sendDiscordNotification(title, message, notificationType)
      ]);
      
      return results.some(r => r === true);
      
    } catch (error) {
      logger.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è —Ç–∏–ø—É ${type}:`, error);
      return false;
    }
  }

  /**
   * –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ Telegram
   */
  async sendTelegramMessage(message) {
    if (!this.telegramBot) return false;
    
    try {
      const chatId = config.notifications.telegram.chatId;
      
      if (!chatId) {
        logger.warn('‚ö†Ô∏è –ù–µ –≤–∫–∞–∑–∞–Ω–æ ID —á–∞—Ç—É Telegram');
        return false;
      }
      
      await this.telegramBot.sendMessage(chatId, message, {
        parse_mode: 'Markdown'
      });
      
      return true;
    } catch (error) {
      logger.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è Telegram:', error);
      return false;
    }
  }

  /**
   * –í—ñ–¥–ø—Ä–∞–≤–∫–∞ Email —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
   */
  async sendEmailNotification(subject, message, type) {
    if (!this.emailTransporter) return false;
    
    try {
      const { from, to } = config.notifications.email;
      
      if (!from || !to) {
        logger.warn('‚ö†Ô∏è –ù–µ –≤–∫–∞–∑–∞–Ω—ñ Email –∞–¥—Ä–µ—Å–∏');
        return false;
      }
      
      // –§–æ—Ä–º–∞—Ç—É—î–º–æ HTML –¥–ª—è Email
      const html = `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
          <h2 style="color: ${this.getColorForType(type)};">${subject}</h2>
          <pre style="background-color: #f5f5f5; padding: 15px; border-radius: 5px;">${message}</pre>
          <p style="color: #888; font-size: 12px;">Binance Listing Bot - ${new Date().toISOString()}</p>
        </div>
      `;
      
      const mailOptions = {
        from,
        to,
        subject: `[Binance Bot] ${subject}`,
        text: message,
        html
      };
      
      await this.emailTransporter.sendMail(mailOptions);
      
      return true;
    } catch (error) {
      logger.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ Email:', error);
      return false;
    }
  }

  /**
   * –í—ñ–¥–ø—Ä–∞–≤–∫–∞ Discord —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
   */
  async sendDiscordNotification(title, message, type) {
    if (!config.notifications.discord.enabled) return false;
    
    try {
      const webhookUrl = config.notifications.discord.webhookUrl;
      
      if (!webhookUrl) {
        logger.warn('‚ö†Ô∏è –ù–µ –≤–∫–∞–∑–∞–Ω–æ URL Discord webhook');
        return false;
      }
      
      const embed = {
        title,
        description: '```' + message + '```',
        color: this.getDiscordColorForType(type),
        timestamp: new Date().toISOString()
      };
      
      await axios.post(webhookUrl, {
        username: 'Binance Listing Bot',
        embeds: [embed]
      });
      
      return true;
    } catch (error) {
      logger.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ Discord —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è:', error);
      return false;
    }
  }

  /**
   * –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –Ω–æ–≤–∏–π –ª—ñ—Å—Ç–∏–Ω–≥
   */
  formatNewListingMessage(data) {
    return `–°–∏–º–≤–æ–ª: *${data.symbol}*
–¶—ñ–Ω–∞: ${data.price}
–û–±—Å—è–≥: ${data.quoteVolume ? data.quoteVolume.toLocaleString() : '–ù/–î'} USDT
–ß–∞—Å: ${new Date(data.timestamp).toLocaleString()}`;
  }

  /**
   * –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–∫—É–ø–∫—É
   */
  formatBuyMessage(data) {
    const { position, order } = data;
    
    return `–°–∏–º–≤–æ–ª: *${position.symbol}*
–¶—ñ–Ω–∞: ${position.entryPrice}
–ö—ñ–ª—å–∫—ñ—Å—Ç—å: ${position.quantity}
–°—É–º–∞: ${(position.entryPrice * position.quantity).toFixed(2)} USDT
–°—Ç–∞—Ç—É—Å: ${position.status}
–ß–∞—Å: ${new Date(position.entryTime).toLocaleString()}`;
  }

  /**
   * –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø—Ä–æ–¥–∞–∂
   */
  formatSellMessage(data) {
    const { position } = data;
    
    return `–°–∏–º–≤–æ–ª: *${position.symbol}*
–¶—ñ–Ω–∞ –≤—Ö–æ–¥—É: ${position.entryPrice}
–¶—ñ–Ω–∞ –≤–∏—Ö–æ–¥—É: ${position.exitPrice}
–ö—ñ–ª—å–∫—ñ—Å—Ç—å: ${position.quantity}
P&L: ${position.pnl ? position.pnl.toFixed(2) : '–ù/–î'} USDT (${position.pnlPercent ? position.pnlPercent.toFixed(2) : '–ù/–î'}%)
–ü—Ä–∏—á–∏–Ω–∞: ${position.closeReason}
–ß–∞—Å: ${new Date(position.exitTime).toLocaleString()}`;
  }

  /**
   * –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
   */
  formatErrorMessage(data) {
    let message = `–¢–∏–ø: ${data.type}\n`;
    
    if (data.symbol) {
      message += `–°–∏–º–≤–æ–ª: ${data.symbol}\n`;
    }
    
    message += `–ü–æ–º–∏–ª–∫–∞: ${data.error}\n`;
    
    if (data.data) {
      message += `–î–∞–Ω—ñ: ${JSON.stringify(data.data, null, 2)}`;
    }
    
    return message;
  }

  /**
   * –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è
   */
  formatWarningMessage(data) {
    return `–¢–∏–ø: ${data.type}\n–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: ${data.message}`;
  }

  /**
   * –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
   */
  formatBotStartedMessage(data) {
    let message = `–°–µ—Ä–µ–¥–æ–≤–∏—â–µ: ${data.environment}\n`;
    
    if (data.testnet) {
      message += `–†–µ–∂–∏–º: Testnet\n`;
    }
    
    if (data.simulationMode) {
      message += `–°–∏–º—É–ª—è—Ü—ñ—è: –£–≤—ñ–º–∫–Ω–µ–Ω–∞\n`;
    }
    
    return message;
  }

  /**
   * –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑—É–ø–∏–Ω–∫—É –±–æ—Ç–∞
   */
  formatBotStoppedMessage(data) {
    const uptime = this.formatUptime(data.uptime);
    return `–ß–∞—Å —Ä–æ–±–æ—Ç–∏: ${uptime}`;
  }

  /**
   * –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è uptime
   */
  formatUptime(seconds) {
    const days = Math.floor(seconds / 86400);
    const hours = Math.floor((seconds % 86400) / 3600);
    const minutes = Math.floor((seconds % 3600) / 60);
    const secs = Math.floor(seconds % 60);
    
    let result = '';
    
    if (days > 0) {
      result += `${days}–¥ `;
    }
    
    if (hours > 0 || days > 0) {
      result += `${hours}–≥ `;
    }
    
    if (minutes > 0 || hours > 0 || days > 0) {
      result += `${minutes}—Ö–≤ `;
    }
    
    result += `${secs}—Å`;
    
    return result;
  }

  /**
   * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–ª—å–æ—Ä—É –¥–ª—è —Ç–∏–ø—É —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
   */
  getColorForType(type) {
    switch (type) {
      case constants.NOTIFICATION_TYPES.SUCCESS:
        return '#28a745';
      case constants.NOTIFICATION_TYPES.WARNING:
        return '#ffc107';
      case constants.NOTIFICATION_TYPES.ERROR:
        return '#dc3545';
      case constants.NOTIFICATION_TYPES.CRITICAL:
        return '#6610f2';
      default:
        return '#17a2b8';
    }
  }

  /**
   * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–¥—É –∫–æ–ª—å–æ—Ä—É –¥–ª—è Discord
   */
  getDiscordColorForType(type) {
    switch (type) {
      case constants.NOTIFICATION_TYPES.SUCCESS:
        return 3066993; // –∑–µ–ª–µ–Ω–∏–π
      case constants.NOTIFICATION_TYPES.WARNING:
        return 16776960; // –∂–æ–≤—Ç–∏–π
      case constants.NOTIFICATION_TYPES.ERROR:
        return 15158332; // —á–µ—Ä–≤–æ–Ω–∏–π
      case constants.NOTIFICATION_TYPES.CRITICAL:
        return 10181046; // —Ñ—ñ–æ–ª–µ—Ç–æ–≤–∏–π
      default:
        return 3447003; // —Å–∏–Ω—ñ–π
    }
  }

  /**
   * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É —Å–µ—Ä–≤—ñ—Å—É
   */
  getStatus() {
    return {
      isInitialized: this.isInitialized,
      telegramEnabled: !!this.telegramBot,
      emailEnabled: !!this.emailTransporter,
      discordEnabled: config.notifications.discord.enabled
    };
  }
}

module.exports = { NotificationService };