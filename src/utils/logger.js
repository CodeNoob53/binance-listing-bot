// src/utils/logger.js

const winston = require('winston');
const { format } = winston;
const DailyRotateFile = require('winston-daily-rotate-file');
const path = require('path');
const fs = require('fs');

// –°—Ç–≤–æ—Ä—é—î–º–æ –¥–µ—Ñ–æ–ª—Ç–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è, —è–∫—â–æ –∫–æ–Ω—Ñ—ñ–≥ —â–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π
const defaultConfig = {
  logging: {
    level: 'info',
    format: 'json',
    file: {
      enabled: true,
      filename: 'app.log',
      maxSize: '10m',
      maxFiles: 5
    },
    console: {
      enabled: true,
      colorize: true
    },
    database: {
      enabled: false,
      level: 'error'
    }
  }
};

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–∫–ª–∞–¥–µ–Ω–æ–≥–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É (—É–Ω–∏–∫–∞—î–º–æ —Ü–∏–∫–ª—ñ—á–Ω–æ—ó –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ)
function getConfig() {
  try {
    return require('../config');
  } catch (e) {
    console.warn('–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –¥–µ—Ñ–æ–ª—Ç–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥–µ—Ä–∞');
    return defaultConfig;
  }
}

// –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó –¥–ª—è –ª–æ–≥—ñ–≤
const logDir = path.join(__dirname, '../../logs');
if (!fs.existsSync(logDir)) {
  fs.mkdirSync(logDir, { recursive: true });
}

// –°—Ç–≤–æ—Ä—é—î–º–æ —Ñ–æ—Ä–º–∞—Ç–∏ –¥–ª—è –ª–æ–≥–µ—Ä–∞ –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º –≤—ñ–¥–∫–ª–∞–¥–µ–Ω–æ–≥–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É
const customFormat = format.combine(
  format.timestamp({ format: 'YYYY-MM-DD HH:mm:ss.SSS' }),
  format.errors({ stack: true }),
  format.printf(info => {
    const config = getConfig();
    const { timestamp, level, message, ...rest } = info;
    
    // –î–æ–¥–∞—î–º–æ emoji –¥–ª—è —Ä—ñ–≤–Ω—ñ–≤ –ª–æ–≥—É–≤–∞–Ω–Ω—è
    const levelEmoji = {
      error: '‚ùå',
      warn: '‚ö†Ô∏è',
      info: '‚ÑπÔ∏è',
      http: 'üåê',
      verbose: 'üìù',
      debug: 'üîç',
      silly: 'ü§™',
      trade: 'üíπ',
      position: 'üìä'
    };
    
    const emoji = levelEmoji[level] || '';
    
    // –û—Å–Ω–æ–≤–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    let log = `${timestamp} ${emoji} [${level.toUpperCase()}]: ${message}`;
    
    // –î–æ–¥–∞—î–º–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç, —è–∫—â–æ —î
    if (Object.keys(rest).length > 0) {
      log += ` ${JSON.stringify(rest)}`;
    }
    
    return log;
  })
);

// –î–æ–¥–∞—Ç–∫–æ–≤—ñ —Ä—ñ–≤–Ω—ñ –ª–æ–≥—É–≤–∞–Ω–Ω—è
const customLevels = {
  levels: {
    error: 0,
    warn: 1,
    trade: 2, // –°–ø–µ—Ü—ñ–∞–ª—å–Ω–∏–π —Ä—ñ–≤–µ–Ω—å –¥–ª—è —Ç–æ—Ä–≥–æ–≤–∏—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π
    info: 3,
    position: 4, // –°–ø–µ—Ü—ñ–∞–ª—å–Ω–∏–π —Ä—ñ–≤–µ–Ω—å –¥–ª—è –ø–æ–∑–∏—Ü—ñ–π
    http: 5,
    verbose: 6,
    debug: 7,
    silly: 8
  },
  colors: {
    error: 'red',
    warn: 'yellow',
    trade: 'green',
    info: 'blue',
    position: 'cyan',
    http: 'magenta',
    verbose: 'grey',
    debug: 'grey',
    silly: 'grey'
  }
};

// –°—Ç–≤–æ—Ä—é—î–º–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∏ –∑ –≤—ñ–¥–∫–ª–∞–¥–µ–Ω–∏–º –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è–º –∫–æ–Ω—Ñ—ñ–≥—É
function createTransports() {
  const config = getConfig();
  const transports = [];

  // –ö–æ–Ω—Å–æ–ª—å–Ω–∏–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç
  if (config.logging.console.enabled) {
    transports.push(
      new winston.transports.Console({
        level: config.logging.level,
        format: format.combine(
          config.logging.console.colorize ? format.colorize() : format.uncolorize(),
          customFormat
        )
      })
    );
  }

  // –§–∞–π–ª–æ–≤–∏–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç
  if (config.logging.file.enabled) {
    transports.push(
      new DailyRotateFile({
        filename: path.join(logDir, '%DATE%_' + config.logging.file.filename),
        datePattern: 'YYYY-MM-DD',
        maxSize: config.logging.file.maxSize,
        maxFiles: config.logging.file.maxFiles,
        level: config.logging.level,
        format: customFormat
      })
    );
  }

  return transports;
}

// –°—Ç–≤–æ—Ä—é—î–º–æ –ª–æ–≥–µ—Ä
const logger = winston.createLogger({
  levels: customLevels.levels,
  level: 'info', // –ü–æ—á–∞—Ç–∫–æ–≤–∏–π —Ä—ñ–≤–µ–Ω—å, –±—É–¥–µ –æ–Ω–æ–≤–ª–µ–Ω–æ –ø—ñ—Å–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É
  format: customFormat,
  transports: createTransports(),
  exitOnError: false
});

// –î–æ–¥–∞—î–º–æ –∫–æ–ª—å–æ—Ä–∏
winston.addColors(customLevels.colors);

// –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä—ñ–≤–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è –ø—ñ—Å–ª—è –ø–æ–≤–Ω–æ–≥–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É
setTimeout(() => {
  const config = getConfig();
  logger.level = config.logging.level;
}, 0);

// –¢–∞–π–º–µ—Ä –¥–ª—è –≤–∏–º—ñ—Ä—é–≤–∞–Ω–Ω—è —á–∞—Å—É –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
logger.startTimer = function() {
  const start = Date.now();
  return {
    done: function(message, data = {}) {
      const ms = Date.now() - start;
      logger.info(`${message} [${ms}ms]`, data);
      return ms;
    }
  };
};

// –î–æ–¥–∞—î–º–æ –º–µ—Ç–æ–¥ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ª–æ–≥—É –≤ –ë–î
logger.saveToDb = async function(level, message, context = {}) {
  const config = getConfig();
  // –¶–µ–π –º–µ—Ç–æ–¥ –±—É–¥–µ –≤–∏–∫–ª–∏–∫–∞—Ç–∏—Å—å –∑ DatabaseService, –∫–æ–ª–∏ –±—É–¥–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π
  if (config.logging.database.enabled && level === config.logging.database.level) {
    try {
      const dbService = require('../services/storage/database');
      if (dbService.saveLog) {
        await dbService.saveLog({
          level,
          message,
          context
        });
      }
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ª–æ–≥—É –≤ –ë–î:', error);
    }
  }
};

// –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ –ª–æ–≥–µ—Ä
module.exports = logger;