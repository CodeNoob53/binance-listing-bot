// src/utils/logger.js

const winston = require('winston');
const { format } = winston;
const DailyRotateFile = require('winston-daily-rotate-file');
const path = require('path');
const fs = require('fs');
const config = require('../config');

// –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó –¥–ª—è –ª–æ–≥—ñ–≤
const logDir = path.join(__dirname, '../../logs');
if (!fs.existsSync(logDir)) {
  fs.mkdirSync(logDir, { recursive: true });
}

// –°—Ç–≤–æ—Ä—é—î–º–æ —Ñ–æ—Ä–º–∞—Ç–∏ –¥–ª—è –ª–æ–≥–µ—Ä–∞
const customFormat = format.combine(
  format.timestamp({ format: 'YYYY-MM-DD HH:mm:ss.SSS' }),
  format.errors({ stack: true }),
  config.logging.format === 'json'
    ? format.json()
    : format.printf(info => {
        const { timestamp, level, message, ...rest } = info;
        
        // –î–æ–¥–∞—î–º–æ emoji –¥–ª—è —Ä—ñ–≤–Ω—ñ–≤ –ª–æ–≥—É–≤–∞–Ω–Ω—è
        const levelEmoji = {
          error: '‚ùå',
          warn: '‚ö†Ô∏è',
          info: '‚ÑπÔ∏è',
          http: 'üåê',
          verbose: 'üìù',
          debug: 'üîç',
          silly: 'ü§™',
          trade: 'üíπ',
          position: 'üìä'
        };
        
        const emoji = levelEmoji[level] || '';
        
        // –û—Å–Ω–æ–≤–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        let log = `${timestamp} ${emoji} [${level.toUpperCase()}]: ${message}`;
        
        // –î–æ–¥–∞—î–º–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç, —è–∫—â–æ —î
        if (Object.keys(rest).length > 0) {
          log += ` ${JSON.stringify(rest)}`;
        }
        
        return log;
      })
);

// –°—Ç–≤–æ—Ä—é—î–º–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∏
const transports = [];

// –ö–æ–Ω—Å–æ–ª—å–Ω–∏–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç
if (config.logging.console.enabled) {
  transports.push(
    new winston.transports.Console({
      level: config.logging.level,
      format: format.combine(
        config.logging.console.colorize ? format.colorize() : format.uncolorize(),
        customFormat
      )
    })
  );
}

// –§–∞–π–ª–æ–≤–∏–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç
if (config.logging.file.enabled) {
  transports.push(
    new DailyRotateFile({
      filename: path.join(logDir, '%DATE%_' + config.logging.file.filename),
      datePattern: 'YYYY-MM-DD',
      maxSize: config.logging.file.maxSize,
      maxFiles: config.logging.file.maxFiles,
      level: config.logging.level,
      format: customFormat
    })
  );
}

// –î–æ–¥–∞—Ç–∫–æ–≤—ñ —Ä—ñ–≤–Ω—ñ –ª–æ–≥—É–≤–∞–Ω–Ω—è
const customLevels = {
  levels: {
    error: 0,
    warn: 1,
    trade: 2, // –°–ø–µ—Ü—ñ–∞–ª—å–Ω–∏–π —Ä—ñ–≤–µ–Ω—å –¥–ª—è —Ç–æ—Ä–≥–æ–≤–∏—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π
    info: 3,
    position: 4, // –°–ø–µ—Ü—ñ–∞–ª—å–Ω–∏–π —Ä—ñ–≤–µ–Ω—å –¥–ª—è –ø–æ–∑–∏—Ü—ñ–π
    http: 5,
    verbose: 6,
    debug: 7,
    silly: 8
  },
  colors: {
    error: 'red',
    warn: 'yellow',
    trade: 'green',
    info: 'blue',
    position: 'cyan',
    http: 'magenta',
    verbose: 'grey',
    debug: 'grey',
    silly: 'grey'
  }
};

// –°—Ç–≤–æ—Ä—é—î–º–æ –ª–æ–≥–µ—Ä
const logger = winston.createLogger({
  levels: customLevels.levels,
  level: config.logging.level,
  format: customFormat,
  transports,
  exitOnError: false
});

// –î–æ–¥–∞—î–º–æ –∫–æ–ª—å–æ—Ä–∏
winston.addColors(customLevels.colors);

// –¢–∞–π–º–µ—Ä –¥–ª—è –≤–∏–º—ñ—Ä—é–≤–∞–Ω–Ω—è —á–∞—Å—É –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
logger.startTimer = function() {
  const start = Date.now();
  return {
    done: function(message, data = {}) {
      const ms = Date.now() - start;
      logger.info(`${message} [${ms}ms]`, data);
      return ms;
    }
  };
};

// –î–æ–¥–∞—î–º–æ –º–µ—Ç–æ–¥ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ª–æ–≥—É –≤ –ë–î
logger.saveToDb = async function(level, message, context = {}) {
  // –¶–µ–π –º–µ—Ç–æ–¥ –±—É–¥–µ –≤–∏–∫–ª–∏–∫–∞—Ç–∏—Å—å –∑ DatabaseService, –∫–æ–ª–∏ –±—É–¥–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π
  if (config.logging.database.enabled && level === config.logging.database.level) {
    try {
      const dbService = require('../services/storage/database');
      if (dbService.saveLog) {
        await dbService.saveLog({
          level,
          message,
          context
        });
      }
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ª–æ–≥—É –≤ –ë–î:', error);
    }
  }
};

// –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ –ª–æ–≥–µ—Ä
module.exports = logger;