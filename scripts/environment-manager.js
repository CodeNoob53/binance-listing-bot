#!/usr/bin/env node
// scripts/environment-manager.js

const { Command } = require('commander');
const inquirer = require('inquirer');
const chalk = require('chalk');
const Table = require('cli-table3');
const fs = require('fs').promises;
const path = require('path');

// –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –Ω–∞—à—ñ —Å–µ—Ä–≤—ñ—Å–∏
const { getBinanceClientFactory } = require('../src/services/binance/client-factory');
const config = require('../src/config');
const logger = require('../src/utils/logger');

/**
 * CLI —É—Ç–∏–ª—ñ—Ç–∞ –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞–º–∏ Binance
 */
class EnvironmentCLI {
  constructor() {
    this.program = new Command();
    this.clientFactory = null;
    this.setupCommands();
  }

  /**
   * –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥ CLI
   */
  setupCommands() {
    this.program
      .name('environment-manager')
      .description('–£—Ç–∏–ª—ñ—Ç–∞ –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞–º–∏ Binance (testnet/mainnet)')
      .version('1.0.0');

    // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–∫–∞–∑—É –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å—É
    this.program
      .command('status')
      .description('–ü–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞—Ç—É—Å –≤—Å—ñ—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â')
      .option('-v, --verbose', '–î–µ—Ç–∞–ª—å–Ω–∏–π –≤–∏–≤—ñ–¥')
      .action((options) => this.showStatus(options));

    // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó —Å–µ—Ä–µ–¥–æ–≤–∏—â
    this.program
      .command('validate')
      .description('–í–∞–ª—ñ–¥—É–≤–∞—Ç–∏ –≤—Å—ñ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞')
      .option('-e, --environment <env>', '–í–∞–ª—ñ–¥—É–≤–∞—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–µ —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ')
      .action((options) => this.validateEnvironments(options));

    // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
    this.program
      .command('switch <environment>')
      .description('–ü–µ—Ä–µ–º–∫–Ω—É—Ç–∏ –Ω–∞ —ñ–Ω—à–µ —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ (testnet/mainnet)')
      .action((environment) => this.switchEnvironment(environment));

    // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑'—î–¥–Ω–∞–Ω–Ω—è
    this.program
      .command('test <environment>')
      .description('–ü—Ä–æ—Ç–µ—Å—Ç—É–≤–∞—Ç–∏ –∑\'—î–¥–Ω–∞–Ω–Ω—è –∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–º —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ–º')
      .option('--orders', '–¢–µ—Å—Ç—É–≤–∞—Ç–∏ —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–∏—Ö –æ—Ä–¥–µ—Ä—ñ–≤')
      .option('--balance', '–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –±–∞–ª–∞–Ω—Å')
      .action((environment, options) => this.testEnvironment(environment, options));

    // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
    this.program
      .command('setup')
      .description('–Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–µ—Ä–µ–¥–æ–≤–∏—â')
      .action(() => this.interactiveSetup());

    // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
    this.program
      .command('export')
      .description('–ï–∫—Å–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é —Å–µ—Ä–µ–¥–æ–≤–∏—â')
      .option('-o, --output <file>', '–§–∞–π–ª –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è', 'environment-config.json')
      .option('--include-secrets', '–í–∫–ª—é—á–∏—Ç–∏ —Å–µ–∫—Ä–µ—Ç–Ω—ñ –∫–ª—é—á—ñ (–Ω–µ–±–µ–∑–ø–µ—á–Ω–æ!)')
      .action((options) => this.exportConfiguration(options));

    // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–∫–∞–∑—É —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π
    this.program
      .command('recommendations')
      .description('–ü–æ–∫–∞–∑–∞—Ç–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –∑ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è')
      .action(() => this.showRecommendations());

    // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è –∫–µ—à—É
    this.program
      .command('clear-cache')
      .description('–û—á–∏—Å—Ç–∏—Ç–∏ –∫–µ—à –∫–ª—ñ—î–Ω—Ç—ñ–≤')
      .action(() => this.clearCache());
  }

  /**
   * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ñ–∞–±—Ä–∏–∫–∏ –∫–ª—ñ—î–Ω—Ç—ñ–≤
   */
  async initializeFactory() {
    if (!this.clientFactory) {
      this.clientFactory = getBinanceClientFactory();
    }
    return this.clientFactory;
  }

  /**
   * –ü–æ–∫–∞–∑ —Å—Ç–∞—Ç—É—Å—É —Å–µ—Ä–µ–¥–æ–≤–∏—â
   */
  async showStatus(options) {
    try {
      console.log(chalk.blue.bold('\nüåç –°—Ç–∞—Ç—É—Å —Å–µ—Ä–µ–¥–æ–≤–∏—â Binance\n'));

      await this.initializeFactory();
      const environments = this.clientFactory.environmentManager.getAvailableEnvironments();
      const currentEnv = this.clientFactory.environmentManager.currentEnvironment;

      const table = new Table({
        head: ['–°–µ—Ä–µ–¥–æ–≤–∏—â–µ', '–°—Ç–∞—Ç—É—Å', 'API –∫–ª—é—á—ñ', '–†–µ–∞–ª—å–Ω—ñ –≥—Ä–æ—à—ñ', 'WebSocket', 'REST API'].map(h => chalk.white.bold(h)),
        colWidths: [12, 10, 12, 15, 25, 35]
      });

      for (const env of environments) {
        const isCurrent = env.name === currentEnv;
        const statusIcon = isCurrent ? chalk.green('‚úÖ –ê–∫—Ç–∏–≤–Ω–µ') : chalk.gray('‚ö™ –î–æ—Å—Ç—É–ø–Ω–µ');
        const realMoneyIcon = env.features.realTrading ? chalk.red('üí∞ –¢–ê–ö') : chalk.green('üß™ –ù–Ü');
        const apiKeysIcon = env.hasApiKeys ? chalk.green('‚úÖ –¢–∞–∫') : chalk.red('‚ùå –ù—ñ');

        table.push([
          isCurrent ? chalk.green.bold(env.displayName) : env.displayName,
          statusIcon,
          apiKeysIcon,
          realMoneyIcon,
          env.endpoints.websocket,
          env.endpoints.rest
        ]);
      }

      console.log(table.toString());

      if (options.verbose) {
        console.log(chalk.blue('\nüìä –î–µ—Ç–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è:\n'));
        
        const stats = this.clientFactory.getClientStatistics();
        console.log(`–ü–æ—Ç–æ—á–Ω–µ —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ: ${chalk.yellow(stats.currentEnvironment)}`);
        console.log(`–ö–µ—à–æ–≤–∞–Ω—ñ –∫–ª—ñ—î–Ω—Ç–∏: ${chalk.cyan(stats.cachedClients.join(', ') || '–Ω–µ–º–∞—î')}`);
        console.log(`–î–æ—Å—Ç—É–ø–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞: ${chalk.cyan(stats.environmentsAvailable.join(', '))}`);

        if (stats.dailyStats) {
          console.log('\nüìà –î–µ–Ω–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
          console.log(`  –û—Ä–¥–µ—Ä—ñ–≤ —Ä–æ–∑–º—ñ—â–µ–Ω–æ: ${stats.dailyStats.ordersPlaced}`);
          console.log(`  –ó–∞–≥–∞–ª—å–Ω–∏–π –æ–±—Å—è–≥: $${stats.dailyStats.totalVolume.toFixed(2)}`);
          console.log(`  –ü—Ä–∏–±—É—Ç–æ–∫: $${stats.dailyStats.totalProfit.toFixed(2)}`);
          console.log(`  –ó–±–∏—Ç–∫–∏: $${stats.dailyStats.totalLoss.toFixed(2)}`);
        }

        if (stats.virtualBalance) {
          console.log('\nüß™ –í—ñ—Ä—Ç—É–∞–ª—å–Ω–∏–π –±–∞–ª–∞–Ω—Å:');
          Object.entries(stats.virtualBalance).forEach(([asset, amount]) => {
            console.log(`  ${asset}: ${amount}`);
          });
        }
      }

    } catch (error) {
      console.error(chalk.red('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó:'), error.message);
      process.exit(1);
    }
  }

  /**
   * –ü–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
   */
  async switchEnvironment(environment) {
    try {
      console.log(chalk.blue(`\nüîÑ –ü–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è –Ω–∞ —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ: ${chalk.yellow(environment)}\n`));

      await this.initializeFactory();
      
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—î —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ
      const availableEnvs = this.clientFactory.environmentManager.getAvailableEnvironments();
      const targetEnv = availableEnvs.find(env => env.name === environment);
      
      if (!targetEnv) {
        console.error(chalk.red(`‚ùå –°–µ—Ä–µ–¥–æ–≤–∏—â–µ "${environment}" –Ω–µ —ñ—Å–Ω—É—î`));
        console.log(chalk.gray(`–î–æ—Å—Ç—É–ø–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞: ${availableEnvs.map(e => e.name).join(', ')}`));
        process.exit(1);
      }

      // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è –¥–ª—è mainnet
      if (environment === 'mainnet') {
        console.log(chalk.red.bold('‚ö†Ô∏è –£–í–ê–ì–ê: –í–∏ –ø–µ—Ä–µ–º–∏–∫–∞—î—Ç–µ—Å—å –Ω–∞ MAINNET –∑ –†–ï–ê–õ–¨–ù–ò–ú–ò –ì–†–û–®–ò–ú–ê!'));
        
        const confirm = await inquirer.prompt([{
          type: 'confirm',
          name: 'proceed',
          message: '–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ —â–æ —Ö–æ—á–µ—Ç–µ –ø–µ—Ä–µ–º–∫–Ω—É—Ç–∏—Å—è –Ω–∞ mainnet?',
          default: false
        }]);

        if (!confirm.proceed) {
          console.log(chalk.gray('–ü–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ'));
          return;
        }
      }

      // –í–∏–∫–æ–Ω—É—î–º–æ –ø–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è
      const newClient = await this.clientFactory.switchEnvironment(environment);
      
      console.log(chalk.green(`‚úÖ –£—Å–ø—ñ—à–Ω–æ –ø–µ—Ä–µ–º–∫–Ω—É—Ç–æ –Ω–∞ ${targetEnv.displayName}`));
      
      // –ü–æ–∫–∞–∑—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –Ω–æ–≤–µ —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ
      const envInfo = this.clientFactory.environmentManager.getEnvironmentInfo();
      console.log(chalk.blue('\nüìã –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ:'));
      console.log(`  –ù–∞–∑–≤–∞: ${envInfo.displayName}`);
      console.log(`  –†–µ–∞–ª—å–Ω—ñ –≥—Ä–æ—à—ñ: ${envInfo.features.realTrading ? chalk.red('–¢–ê–ö') : chalk.green('–ù–Ü')}`);
      console.log(`  API –∫–ª—é—á—ñ: ${envInfo.hasApiKeys ? chalk.green('–ù–∞–ª–∞—à—Ç–æ–≤–∞–Ω—ñ') : chalk.red('–í—ñ–¥—Å—É—Ç–Ω—ñ')}`);
      console.log(`  REST API: ${envInfo.endpoints.rest}`);
      console.log(`  WebSocket: ${envInfo.endpoints.websocket}`);

    } catch (error) {
      console.error(chalk.red('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞:'), error.message);
      process.exit(1);
    }
  }

  /**
   * –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
   */
  async testEnvironment(environment, options) {
    try {
      console.log(chalk.blue(`\nüß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞: ${chalk.yellow(environment)}\n`));

      await this.initializeFactory();
      
      // –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª—ñ—î–Ω—Ç –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
      const client = this.clientFactory.createClientForEnvironment(environment);
      
      console.log(chalk.gray('–í–∏–∫–æ–Ω–∞–Ω–Ω—è –±–∞–∑–æ–≤–∏—Ö —Ç–µ—Å—Ç—ñ–≤...'));

      const tests = [];

      // –¢–µ—Å—Ç –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ API
      try {
        const start = Date.now();
        const exchangeInfo = await client.getExchangeInfo();
        const latency = Date.now() - start;
        
        tests.push({
          name: 'API –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è',
          status: 'passed',
          details: `–õ–∞—Ç–µ–Ω—Ç–Ω—ñ—Å—Ç—å: ${latency}ms, –°–∏–º–≤–æ–ª—ñ–≤: ${exchangeInfo.symbols.length}`,
          latency
        });
      } catch (error) {
        tests.push({
          name: 'API –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è',
          status: 'failed',
          details: error.message
        });
      }

      // –¢–µ—Å—Ç –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
      if (options.balance) {
        try {
          const accountInfo = await client.getAccountInfo();
          const balanceCount = accountInfo.balances.filter(b => parseFloat(b.free) > 0).length;
          
          tests.push({
            name: '–ê–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—è',
            status: 'passed',
            details: `–î–æ—Å—Ç—É–ø –¥–æ –±–∞–ª–∞–Ω—Å—É, –∞–∫—Ç–∏–≤–Ω–∏—Ö –∞–∫—Ç–∏–≤—ñ–≤: ${balanceCount}`
          });

          // –ü–æ–∫–∞–∑—É—î–º–æ –±–∞–ª–∞–Ω—Å
          if (environment === 'testnet' && client.virtualBalance) {
            console.log(chalk.cyan('\nüß™ –í—ñ—Ä—Ç—É–∞–ª—å–Ω–∏–π –±–∞–ª–∞–Ω—Å (testnet):'));
            Object.entries(Object.fromEntries(client.virtualBalance)).forEach(([asset, amount]) => {
              console.log(`  ${asset}: ${amount}`);
            });
          } else {
            console.log(chalk.cyan('\nüí∞ –û—Å–Ω–æ–≤–Ω—ñ –±–∞–ª–∞–Ω—Å–∏:'));
            accountInfo.balances
              .filter(b => parseFloat(b.free) > 0)
              .slice(0, 5) // –ü–æ–∫–∞–∑—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –ø–µ—Ä—à—ñ 5
              .forEach(balance => {
                console.log(`  ${balance.asset}: ${balance.free}`);
              });
          }

        } catch (error) {
          tests.push({
            name: '–ê–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—è',
            status: 'failed',
            details: error.message
          });
        }
      }

      // –¢–µ—Å—Ç —Ç–æ—Ä–≥–æ–≤–∏—Ö –¥–æ–∑–≤–æ–ª—ñ–≤
      try {
        const openOrders = await client.getOpenOrders();
        tests.push({
          name: '–¢–æ—Ä–≥–æ–≤—ñ –¥–æ–∑–≤–æ–ª–∏',
          status: 'passed',
          details: `–î–æ—Å—Ç—É–ø –¥–æ –æ—Ä–¥–µ—Ä—ñ–≤, –≤—ñ–¥–∫—Ä–∏—Ç–∏—Ö: ${openOrders.length}`
        });
      } catch (error) {
        tests.push({
          name: '–¢–æ—Ä–≥–æ–≤—ñ –¥–æ–∑–≤–æ–ª–∏',
          status: 'failed',
          details: error.message
        });
      }

      // –°–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ —Ç–µ—Å—Ç–∏ –¥–ª—è testnet
      if (environment === 'testnet' && client.validateTestEnvironment) {
        console.log(chalk.gray('–í–∏–∫–æ–Ω–∞–Ω–Ω—è —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏—Ö testnet —Ç–µ—Å—Ç—ñ–≤...'));
        const testnetValidation = await client.validateTestEnvironment();
        
        testnetValidation.checks.forEach(check => {
          tests.push({
            name: `Testnet: ${check.test}`,
            status: check.status,
            details: check.details
          });
        });
      }

      // –°–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ —Ç–µ—Å—Ç–∏ –¥–ª—è mainnet
      if (environment === 'mainnet' && client.healthCheck) {
        console.log(chalk.gray('–í–∏–∫–æ–Ω–∞–Ω–Ω—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤\'—è mainnet...'));
        const healthCheck = await client.healthCheck();
        
        healthCheck.checks.forEach(check => {
          tests.push({
            name: `Mainnet: ${check.test}`,
            status: check.status,
            details: check.details
          });
        });
      }

      // –ü–æ–∫–∞–∑—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ç–µ—Å—Ç—ñ–≤
      const table = new Table({
        head: ['–¢–µ—Å—Ç', '–°—Ç–∞—Ç—É—Å', '–î–µ—Ç–∞–ª—ñ'].map(h => chalk.white.bold(h)),
        colWidths: [20, 12, 50]
      });

      tests.forEach(test => {
        const statusIcon = test.status === 'passed' ? 
          chalk.green('‚úÖ –ü—Ä–æ–π—à–æ–≤') : 
          test.status === 'warning' ? 
            chalk.yellow('‚ö†Ô∏è –ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è') : 
            chalk.red('‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ');

        table.push([
          test.name,
          statusIcon,
          test.details
        ]);
      });

      console.log(table.toString());

      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
      const passed = tests.filter(t => t.status === 'passed').length;
      const failed = tests.filter(t => t.status === 'failed').length;
      const warnings = tests.filter(t => t.status === 'warning').length;

      console.log(chalk.blue(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è:`));
      console.log(`  –ü—Ä–æ–π—à–ª–æ: ${chalk.green(passed)}`);
      if (warnings > 0) console.log(`  –ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω—å: ${chalk.yellow(warnings)}`);
      if (failed > 0) console.log(`  –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${chalk.red(failed)}`);

      if (failed === 0) {
        console.log(chalk.green(`\n‚úÖ –°–µ—Ä–µ–¥–æ–≤–∏—â–µ ${environment} –≥–æ—Ç–æ–≤–µ –¥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è!`));
      } else {
        console.log(chalk.red(`\n‚ùå –°–µ—Ä–µ–¥–æ–≤–∏—â–µ ${environment} –º–∞—î –ø—Ä–æ–±–ª–µ–º–∏ –∑ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—î—é`));
      }

    } catch (error) {
      console.error(chalk.red('‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è:'), error.message);
      process.exit(1);
    }
  }

  /**
   * –Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
   */
  async interactiveSetup() {
    try {
      console.log(chalk.blue.bold('\nüîß –Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–µ—Ä–µ–¥–æ–≤–∏—â Binance\n'));

      // –í–∏–±—ñ—Ä —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
      const { environment } = await inquirer.prompt([{
        type: 'list',
        name: 'environment',
        message: '–û–±–µ—Ä—ñ—Ç—å —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:',
        choices: [
          { name: 'üß™ Testnet (—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ –¥–ª—è –ø–æ—á–∞—Ç–∫—É)', value: 'testnet' },
          { name: 'üí∞ Mainnet (—Ä–µ–∞–ª—å–Ω—ñ –≥—Ä–æ—à—ñ!)', value: 'mainnet' },
          { name: 'üìã –ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω—É –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é', value: 'show' }
        ]
      }]);

      if (environment === 'show') {
        await this.showStatus({ verbose: true });
        return;
      }

      console.log(chalk.yellow(`\nüìù –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ${environment === 'testnet' ? 'Testnet' : 'Mainnet'}`));

      if (environment === 'mainnet') {
        console.log(chalk.red.bold('\n‚ö†Ô∏è –£–í–ê–ì–ê: –í–∏ –Ω–∞–ª–∞—à—Ç–æ–≤—É—î—Ç–µ MAINNET –∑ –†–ï–ê–õ–¨–ù–ò–ú–ò –ì–†–û–®–ò–ú–ê!'));
        console.log(chalk.red('‚Ä¢ –í—Å—ñ –æ—Ä–¥–µ—Ä–∏ –±—É–¥—É—Ç—å –≤–∏–∫–æ–Ω—É–≤–∞—Ç–∏—Å—è –∑ —Ä–µ–∞–ª—å–Ω–∏–º–∏ –∫–æ—à—Ç–∞–º–∏'));
        console.log(chalk.red('‚Ä¢ –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—ñ –≤—Å—ñ—Ö –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å'));
        console.log(chalk.red('‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è —Å–ø–æ—á–∞—Ç–∫—É –ø—Ä–æ—Ç–µ—Å—Ç—É–≤–∞—Ç–∏ –Ω–∞ testnet\n'));
      }

      // –û—Ç—Ä–∏–º—É—î–º–æ API –∫–ª—é—á—ñ
      const apiConfig = await inquirer.prompt([
        {
          type: 'input',
          name: 'apiKey',
          message: `${environment} API –∫–ª—é—á:`,
          validate: (input) => input.length >= 64 || 'API –∫–ª—é—á –º–∞—î –±—É—Ç–∏ –¥–æ–≤–∂–∏–Ω–æ—é –º—ñ–Ω—ñ–º—É–º 64 —Å–∏–º–≤–æ–ª–∏'
        },
        {
          type: 'password',
          name: 'apiSecret',
          message: `${environment} API —Å–µ–∫—Ä–µ—Ç:`,
          validate: (input) => input.length >= 64 || 'API —Å–µ–∫—Ä–µ—Ç –º–∞—î –±—É—Ç–∏ –¥–æ–≤–∂–∏–Ω–æ—é –º—ñ–Ω—ñ–º—É–º 64 —Å–∏–º–≤–æ–ª–∏'
        }
      ]);

      // –ì–µ–Ω–µ—Ä—É—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–∏–π .env —Ñ–∞–π–ª
      await this.updateEnvFile(environment, apiConfig);

      console.log(chalk.green('\n‚úÖ –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –∑–±–µ—Ä–µ–∂–µ–Ω–∞!'));
      console.log(chalk.blue('üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç—ñ—Ç—å –¥–æ–¥–∞—Ç–æ–∫ –¥–ª—è –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –∑–º—ñ–Ω\n'));

      // –ü—Ä–æ–ø–æ–Ω—É—î–º–æ –ø—Ä–æ—Ç–µ—Å—Ç—É–≤–∞—Ç–∏
      const { testNow } = await inquirer.prompt([{
        type: 'confirm',
        name: 'testNow',
        message: '–ü—Ä–æ—Ç–µ—Å—Ç—É–≤–∞—Ç–∏ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–µ —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ –∑–∞—Ä–∞–∑?',
        default: true
      }]);

      if (testNow) {
        await this.testEnvironment(environment, { balance: true });
      }

    } catch (error) {
      console.error(chalk.red('‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:'), error.message);
      process.exit(1);
    }
  }

  /**
   * –û–Ω–æ–≤–ª–µ–Ω–Ω—è .env —Ñ–∞–π–ª—É
   */
  async updateEnvFile(environment, apiConfig) {
    const envPath = path.join(process.cwd(), '.env');
    
    try {
      // –ß–∏—Ç–∞—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π .env —Ñ–∞–π–ª
      let envContent = '';
      try {
        envContent = await fs.readFile(envPath, 'utf8');
      } catch (error) {
        // –§–∞–π–ª –Ω–µ —ñ—Å–Ω—É—î, —Å—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π
        envContent = '';
      }

      // –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ –∑–º—ñ–Ω–Ω—ñ
      const envVars = environment === 'testnet' ? {
        'BINANCE_TESTNET_API_KEY': apiConfig.apiKey,
        'BINANCE_TESTNET_API_SECRET': apiConfig.apiSecret,
        'BINANCE_TESTNET': 'true'
      } : {
        'BINANCE_API_KEY': apiConfig.apiKey,
        'BINANCE_API_SECRET': apiConfig.apiSecret,
        'BINANCE_TESTNET': 'false'
      };

      // –ü–∞—Ä—Å–∏–º–æ —ñ—Å–Ω—É—é—á–∏–π .env
      const envLines = envContent.split('\n');
      const updatedLines = [];
      const updatedVars = new Set();

      // –û–Ω–æ–≤–ª—é—î–º–æ —ñ—Å–Ω—É—é—á—ñ –∑–º—ñ–Ω–Ω—ñ
      for (const line of envLines) {
        if (line.trim() === '' || line.startsWith('#')) {
          updatedLines.push(line);
          continue;
        }

        const [key] = line.split('=');
        if (envVars[key]) {
          updatedLines.push(`${key}=${envVars[key]}`);
          updatedVars.add(key);
        } else {
          updatedLines.push(line);
        }
      }

      // –î–æ–¥–∞—î–º–æ –Ω–æ–≤—ñ –∑–º—ñ–Ω–Ω—ñ
      for (const [key, value] of Object.entries(envVars)) {
        if (!updatedVars.has(key)) {
          updatedLines.push(`${key}=${value}`);
        }
      }

      // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–∏–π —Ñ–∞–π–ª
      await fs.writeFile(envPath, updatedLines.join('\n'));

    } catch (error) {
      throw new Error(`–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è .env —Ñ–∞–π–ª—É: ${error.message}`);
    }
  }

  /**
   * –ï–∫—Å–ø–æ—Ä—Ç –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
   */
  async exportConfiguration(options) {
    try {
      console.log(chalk.blue.bold('\nüì¶ –ï–∫—Å–ø–æ—Ä—Ç –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó —Å–µ—Ä–µ–¥–æ–≤–∏—â\n'));

      await this.initializeFactory();
      const configuration = this.clientFactory.exportConfiguration();

      // –í–∏–¥–∞–ª—è—î–º–æ —Å–µ–∫—Ä–µ—Ç–∏ —è–∫—â–æ –Ω–µ –∑–∞–ø–∏—Ç–∞–Ω–æ
      if (!options.includeSecrets) {
        // –ú–∞—Å–∫—É—î–º–æ —á—É—Ç–ª–∏–≤—ñ –¥–∞–Ω—ñ
        configuration.environments.forEach(env => {
          if (env.endpoints) {
            // –ó–∞–ª–∏—à–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ –ø—É–±–ª—ñ—á–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é
            delete env.config;
          }
        });
      }

      const exportData = {
        timestamp: new Date().toISOString(),
        version: '1.0.0',
        includesSecrets: options.includeSecrets,
        ...configuration
      };

      await fs.writeFile(options.output, JSON.stringify(exportData, null, 2));

      console.log(chalk.green(`‚úÖ –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é –µ–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ –≤ ${options.output}`));
      
      if (options.includeSecrets) {
        console.log(chalk.red('‚ö†Ô∏è –£–í–ê–ì–ê: –§–∞–π–ª –º—ñ—Å—Ç–∏—Ç—å —Å–µ–∫—Ä–µ—Ç–Ω—ñ –∫–ª—é—á—ñ! –ó–±–µ—Ä—ñ–≥–∞–π—Ç–µ –π–æ–≥–æ –≤ –±–µ–∑–ø–µ—Ü—ñ.'));
      }

    } catch (error) {
      console.error(chalk.red('‚ùå –ü–æ–º–∏–ª–∫–∞ –µ–∫—Å–ø–æ—Ä—Ç—É:'), error.message);
      process.exit(1);
    }
  }

  /**
   * –ü–æ–∫–∞–∑ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π
   */
  async showRecommendations() {
    try {
      console.log(chalk.blue.bold('\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –∑ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è\n'));

      await this.initializeFactory();
      const recommendations = this.clientFactory.environmentManager.getSetupRecommendations();

      if (recommendations.length === 0) {
        console.log(chalk.green('‚úÖ –í—Å—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–ø—Ç–∏–º–∞–ª—å–Ω—ñ!'));
        return;
      }

      recommendations.forEach((rec, index) => {
        const icon = rec.type === 'warning' ? '‚ö†Ô∏è' : 
                    rec.type === 'security' ? 'üîí' : 
                    rec.type === 'info' ? '‚ÑπÔ∏è' : 'üí°';
        
        console.log(`${index + 1}. ${icon} ${chalk.yellow(rec.message)}`);
        if (rec.action) {
          console.log(`   ${chalk.gray('‚Üí')} ${rec.action}\n`);
        }
      });

    } catch (error) {
      console.error(chalk.red('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π:'), error.message);
      process.exit(1);
    }
  }

  /**
   * –û—á–∏—â–µ–Ω–Ω—è –∫–µ—à—É
   */
  async clearCache() {
    try {
      console.log(chalk.blue.bold('\nüßπ –û—á–∏—â–µ–Ω–Ω—è –∫–µ—à—É –∫–ª—ñ—î–Ω—Ç—ñ–≤\n'));

      await this.initializeFactory();
      this.clientFactory.clearClientCache();

      console.log(chalk.green('‚úÖ –ö–µ—à –∫–ª—ñ—î–Ω—Ç—ñ–≤ –æ—á–∏—â–µ–Ω–æ'));

    } catch (error) {
      console.error(chalk.red('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è –∫–µ—à—É:'), error.message);
      process.exit(1);
    }
  }

  /**
   * –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Å–µ—Ä–µ–¥–æ–≤–∏—â
   */
  async validateEnvironments(options) {
    try {
      console.log(chalk.blue.bold('\nüîç –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Å–µ—Ä–µ–¥–æ–≤–∏—â\n'));

      await this.initializeFactory();

      if (options.environment) {
        // –í–∞–ª—ñ–¥—É—î–º–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–µ —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ
        console.log(`–í–∞–ª—ñ–¥–∞—Ü—ñ—è —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞: ${chalk.yellow(options.environment)}`);
        const validation = this.clientFactory.environmentManager.validateEnvironment(options.environment);
        
        if (validation.isValid) {
          console.log(chalk.green('‚úÖ –í–∞–ª—ñ–¥–∞—Ü—ñ—è –ø—Ä–æ–π—à–ª–∞ —É—Å–ø—ñ—à–Ω–æ'));
        } else {
          console.log(chalk.red('‚ùå –í–∞–ª—ñ–¥–∞—Ü—ñ—è –ø—Ä–æ–≤–∞–ª–µ–Ω–∞:'));
          validation.errors.forEach(error => {
            console.log(chalk.red(`  ‚Ä¢ ${error}`));
          });
        }
      } else {
        // –í–∞–ª—ñ–¥—É—î–º–æ –≤—Å—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
        const results = await this.clientFactory.validateAllEnvironments();
        
        const table = new Table({
          head: ['–°–µ—Ä–µ–¥–æ–≤–∏—â–µ', '–°—Ç–∞—Ç—É—Å', '–ü–µ—Ä–µ–≤—ñ—Ä–∫–∏', '–î–µ—Ç–∞–ª—ñ'].map(h => chalk.white.bold(h)),
          colWidths: [12, 10, 12, 50]
        });

        for (const [envName, result] of Object.entries(results)) {
          const statusIcon = result.isValid ? chalk.green('‚úÖ –ü—Ä–æ–π—à–ª–∞') : chalk.red('‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–∞');
          const checksInfo = result.checks ? 
            `${result.checks.filter(c => c.status === 'passed').length}/${result.checks.length}` : 
            'N/A';
          
          const details = result.isValid ? 
            '–í—Å—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—Ä–æ–π—à–ª–∏' : 
            (result.error || result.checks?.filter(c => c.status === 'failed').map(c => c.details).join(', ') || '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞');

          table.push([
            envName,
            statusIcon,
            checksInfo,
            details.length > 45 ? details.substring(0, 42) + '...' : details
          ]);
        }

        console.log(table.toString());

        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        const totalEnvs = Object.keys(results).length;
        const validEnvs = Object.values(results).filter(r => r.isValid).length;
        
        console.log(chalk.blue(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: ${validEnvs}/${totalEnvs} —Å–µ—Ä–µ–¥–æ–≤–∏—â –ø—Ä–æ–π—à–ª–∏ –≤–∞–ª—ñ–¥–∞—Ü—ñ—é`));
        
        if (validEnvs === 0) {
          console.log(chalk.red('\n‚ö†Ô∏è –ñ–æ–¥–Ω–µ —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ –Ω–µ –ø—Ä–æ–π—à–ª–æ –≤–∞–ª—ñ–¥–∞—Ü—ñ—é! –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è API –∫–ª—é—á—ñ–≤.'));
        }
      }

    } catch (error) {
      console.error(chalk.red('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó:'), error.message);
      process.exit(1);
    }
  }

  /**
   * –ó–∞–ø—É—Å–∫ CLI
   */
  run() {
    this.program.parse();
  }
}

// –ó–∞–ø—É—Å–∫ CLI —è–∫—â–æ —Ü–µ –≥–æ–ª–æ–≤–Ω–∏–π —Ñ–∞–π–ª
if (require.main === module) {
  const cli = new EnvironmentCLI();
  cli.run();
}

module.exports = { EnvironmentCLI };