version: '3.8'

services:
  # Основний бот
  bot:
    build: .
    container_name: binance-listing-bot
    restart: unless-stopped
    env_file:
      - .env
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
    networks:
      - bot-network
    depends_on:
      - redis
      - postgres
    healthcheck:
      test: ["CMD", "node", "scripts/healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis для черг та кешу
  redis:
    image: redis:7-alpine
    container_name: bot-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - bot-network
    command: redis-server --appendonly yes

  # PostgreSQL база даних (опціонально)
  postgres:
    image: postgres:15-alpine
    container_name: bot-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: binance_bot
      POSTGRES_USER: ${DB_USERNAME:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - bot-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Grafana для моніторингу (опціонально)
  grafana:
    image: grafana/grafana:latest
    container_name: bot-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - bot-network
    depends_on:
      - prometheus

  # Prometheus для збору метрик (опціонально)
  prometheus:
    image: prom/prometheus:latest
    container_name: bot-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    networks:
      - bot-network

  # Nginx reverse proxy (опціонально)
  nginx:
    image: nginx:alpine
    container_name: bot-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    networks:
      - bot-network
    depends_on:
      - bot

networks:
  bot-network:
    driver: bridge

volumes:
  postgres-data:
  redis-data:
  grafana-data:
  prometheus-data: